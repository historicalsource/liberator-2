	.NLIST
	.INCLUDE LBCOMN
	.LIST
	.INCLUDE LBDCLM
	.TITLE LBIRQ - IRQ PROCESSING
	.CSECT LBIRQ
	.PAGE
	.SBTTL GLOBALS DEFINED
;
; EXTERNAL ENTRY POINTS
;
	.GLOBL SHPMOV,GNRSTR,GNPLOT
	.GLOBL RESET,MAIN,CLRTRI,SCORE1
	.GLOBL MODSND,MOOLAH
	.GLOBL CLEAR
	.GLOBL EAUPD,REHIIN,EAZERO,EAZBOO,EAZHIS,WRBOOK
	.GLOBL COLOR,CURON,CUROFF,INIT,PLTON,PLTOFF
	.GLOBL TBLMSG,MESENT,LETOUT,HEXOUT
;
; EXTERNAL CONSTANTS
;
	.GLOBL CBONUS,CNEWGA,CSTART,CATTR1
	.GLOBL $$CRDT,$CCTIM,$CNCTR,$COINS
	.GLOBL RNGCOL
	.GLOBL EAFLG,EAREQU,EABAD
	.GLOBL OK,BAD
	.GLOBL CKSM6
;
; ENTRY POINTS DEFINED HERE
;
	.GLOBL IRQXIT
;
; CONSTANTS DEFINED HERE
;
	.GLOBL BASUVV,BASUHV,BASLVV,BASLHV
	.GLOBL BSUVAL,BSUHAL,BSUVAR,BSUHAR
	.GLOBL BSLVAL,BSLHAL,BSLVAR,BSLHAR
	.GLOBL BASXLO,BASXHI,BASLLO,BASLHI
	.GLOBL BASLAT,BASCLR,BASLOC
	.PAGE
	.SBTTL	IRQ ENTRY
IRQ:	PHA			;SAVE REGS
	TXA
	PHA
	TYA
	PHA
	LDA BITMOX		;SAVE X,Y
	PHA
	LDA BITMOY
	PHA
	LDA TEMP1
	PHA
	LDA TEMP2
	PHA
	LDA CURCLR
	PHA
	LDA STMPNT		;SAVE STAMP POINTER
	PHA
	LDA STMPNT+1
	PHA
	LDA STMPBF
	PHA
	LDA SAVBMX
	PHA
	CLD
	INC QUAD

	LDY I,0			;GET CURRENT COIN & TBALL
	LDA TBALL		;GET TBALL
	STY CTRLD
	LDX TBALL		;GET COINS SWITCHES
	LDY I,10
	STY CTRLD
	STA TBUFF		;SAVE TBALL IN BUFFER
	TXA
	BIT PLAYER		;SET COCKTAIL BIT
	IFEQ
	ORA I,40
	THEN
	STA $COINS		;SAVE COIN READINGS

	ORA I,0
	IFPL			;SELF-TEST?
	BIT TSTFLG		;YES, DO WE KNOW?
	IFPL
	JMP HERE		;WAIT FOR WATCHDOG TO RESET
	THEN
	LDA GSTATE		;COLOR BARS?
	CMP I,CTST3B
	IFEQ
	JSR TEST3C
	THEN
	ELSE			;NOT IN SELF-TEST
	BIT TSTFLG		;WERE WE?
	IFMI
	JMP HERE		;YES, RESET ME
	THEN
	.PAGE
;
; *** COIN STUFF ***
;
	LDA $$CRDT		;SAVE CURRENT CREDIT COUNT
	PHA
	LDA I,0			;SET UP TO READ COINS
	STA CTRLD
	JSR MOOLAH		;PROCESS COINS
	LDA I,10		;BACK TO TBALL
	STA CTRLD
	PLA
	CMP $$CRDT		;GOT A CREDIT?
	IFNE
	LDA ATRACT		;ONLY IN ATTRACT
	IFPL
	LDA I,0			;YES
	STA MSGFLG
	STA PAUSET		;ZERO PAUSE
	LDA I,CSTART		;DO DIRECTLY TO PRESS START MODE
	STA GSTATE
	THEN
	THEN
	THEN

	LDX I,0
	LDA $CCTIM		;CHECK COIN COUNTERS
	IFMI
	LDX I,10		;TURN IT ON
	THEN
	STX $CNCTR

	LDX I,0
	LDA $CCTIM+1
	IFMI
	LDX I,10		;TURN IT ON
	THEN
	STX $CNCTR+1

	.PAGE
	.SBTTL	VBLANK PROCESSING
	LDA VBLANK		;END OF SCREEN?
	IFMI
	LDA I,0
	STA QUAD		;QUAD=0 IN VBLANK
	INC VBLNKS		;COUNT THE VBLANKS
	INC SYNC		;SYNC MAIN LOOP
	LSR BCKFRM		;SYNC THE BACKROUND
;
; *** VBLANK IMMEDIATE ROUTINES ***
;
	JSR MISC		;DO INPORTANT UPDATES
	JSR DEBNCE		;DE-BOUNCE SWITCHES

	LDA ATRACT		;UPDATE TIMER IN GAME
	IFMI
	JSR MODSND		;PROCESS NOISES

	LDA VBLNKS		;COUNT SECONDS
	AND I,3F
	IFEQ
	SED
	LDA TOTIME
	CLC
	ADC I,1
	STA TOTIME
	LDA TOTIME+1
	ADC I,0
	STA TOTIME+1
	LDA TOTIME+2
	ADC I,0
	STA TOTIME+2
	CLD
	THEN
	THEN
	LDA VBLNKS		;CHECK EAROM UPDATE
	AND I,03
	IFEQ
	JSR EAUPD
	THEN
	THEN

	LDA GSTATE		;BONUS ROUND?
	CMP I,CBONUS
	IFEQ
	LDX SHPNUM		;MOVE SHIP ACTIVE?
	IFPL
	CPX I,2
	IFCC
	LDA QUAD		;DRAW UPPER SHIPS IN QUAD 2
	CMP I,2
	IFEQ
	CLI
	JSR SHPMOV
	SEI
	THEN
	ELSE
	LDA QUAD		;DRAW LOWER SHIPS IN VBLANK
	CMP I,0
	IFEQ
	JSR SHPMOV
	THEN
	THEN
	THEN
	THEN
	.PAGE
	.SBTTL	READ TRAK BALL
	LDA TRKFLG		;SHIELD ON?
	IFMI
	LDA TBUFF		;READ TRAK BALL
	SEC
	SBC OLDTB
	AND I,0F		;HORIZONTAL ONLY
	CMP I,8			;DIRECTION CHANGE?
	IFCS
	ORA I,0F0
	THEN
	CLC
	ADC GUNX		;NEW X COORDINATE
	STA GUNX
	LDA TBUFF
	SEC
	ORA I,0F		;VERTICAL ONLY
	SBC OLDTB
	LSR
	LSR
	LSR
	LSR
	CMP I,8
	IFCS
	ORA I,0F0
	THEN
	CLC
	ADC GUNY		;NEW Y COORDINATE
	STA GUNY
	CMP I,81
	IFPL
	LDA I,1			;GUN IN LOWER HALF
	STA GNTRIG
	ELSE
	CMP I,47
	IFPL
	LDA I,3			;GUN IN 2ND QUARTER
	STA GNTRIG
	ELSE
	LDA I,2			;GUN IN 1ST QUARTER
	STA GNTRIG
	THEN
	THEN
	LDA TBALL		;SAVE CURRENT TBALL
	STA OLDTB
	THEN
	.PAGE
	LDA CURFLG		;ACTIVE ?
	IFNE
	LDA QUAD		;SEE WHAT QUAD WE'RE IN
	CMP GNTRIG
	IFEQ
	JSR GNRSTR		;DRAW GUN
	JSR GNPLOT
	THEN
	THEN
	.PAGE
	.SBTTL	IRQ EXIT
	STA IRQACK		;ACKNOLEDGE INTERRUPT
	LDA SYNC		;GOT VBLANK?
	CMP I,0F0		;IN A LOOP?
	IFCS
HERE:	JMP HERE		;YES, WAIT FOR WATCHDOG
	ELSE
	STA WCHDOG		;NO, KILL WATCHDOG
	THEN
	ORA I,0			;GOT A VBLANK?
	IFNE
	LDA $COINS		;IN SELF TEST?
	IFMI			;NO...
	LDA FRGRND		;SEE IF MAIN IS ACTIVE
	IFEQ
	ORA I,80		;NO, ACTIVATE MAIN
	STA FRGRND
	LDA SYNC		;NO MORE THAN 4 FRAME OVERRUN
	CMP I,5
	IFCS
	LDA I,4
	STA SYNC
	THEN
	DEC SYNC		;TAKE A SYNC
	LDA COUNT1
	PHA
	LDA COUNT2
	PHA
	CLI			;ENABLE INTERRUPTS
	JSR MAIN		;DO MAIN PROGRAM
	PLA
	STA COUNT2
	PLA
	STA COUNT1
	LDA I,0			;FORGROUND DONE
	STA FRGRND
	THEN
	THEN
	THEN
IRQXIT:	PLA			;NORMAL EXIT
	STA SAVBMX
	PLA
	STA STMPBF
	PLA
	STA STMPNT+1
	PLA
	STA STMPNT
	PLA
	STA CURCLR
	PLA
	STA TEMP2
	PLA
	STA TEMP1
	PLA
	STA BITMOY
	PLA
	STA BITMOX
	PLA
	TAY
	PLA
	TAX
	PLA
	RTI			;RETURN
	.PAGE
	.SBTTL IRQ ROUTINES
	.SBTTL	VARIOUS ROUTINES TO DO
MISC:	LDA LONGLO		;ROTATE PLANET
	CLC
	ADC PLTLO
	STA LONGLO
	LDA LONGHI
	ADC PLTHI
	CMP LONGHI		;SAME?
	IFNE
	STA LONGHI
	STA ROTATE

	LSR			;USE LONGITUDE AS INDEX
	TAY
	LDX I,MAXBAS-1		;BASE INDEX
	LDAL BASEF		;INIT INDIRECT POINTER
	STA BASPNT
	LDAH BASEF
	STA BASPNT+1
	BEGIN			;FILL X COORDINATE TABLE
	LDA NY,BASPNT
	STA X,BASX
	LDA BASPNT		;BUMP INDIRECT POINTER
	SEC
	SBC I,80
	STA BASPNT
	LDA BASPNT+1
	SBC I,0
	STA BASPNT+1
	DEX
	MIEND
	THEN

	LDA BASFLS		;SEE IF PLANET ON
	IFPL
	LDA VBLNKS
	AND I,01
	IFEQ
	LDX BASFLS		;FLASH INDEX
	LDA AX,BASCOL
	STA PLTCOL
	DEX
	IFMI
	LDX I,0D
	THEN
	STX BASFLS
	THEN
	LDX MSTRBS		;FLASH MASTER BASE
	IFNE
	LDA RANDOM
	STA PLTCOL+1
	THEN
	THEN

	LDA ATRACT		;DISABLE FLASH?
	AND I,60
	IFEQ
	LDA $COINS		;NO, SELF-TEST?
	IFMI			;NO...
	LDX WHLPNT		;DO COLOR WHEEL
	LDA AX,WHEEL
	STA MAPCOL+1
	DEX
	STX WHLPNT
	IFMI
	LDX I,ENDWHL
	STX WHLPNT
	THEN
	THEN
	ELSE
	AND I,40		;ROTATE RING?
	IFNE
	LDA FRAME		;YES, ROTATE RING
	AND I,0C
	LSR
	LSR
	TAX
	LDY I,03
	BEGIN
	LDA X,RNGCOL
	STA AY,MAPCOL+2
	DEX
	IFMI
	LDX I,03
	THEN
	DEY
	MIEND
	THEN
	THEN

	BIT MKMODE			;IN MARKETING MODE?
	IFMI
	IFVS
	LDA $COINS			;AUX PUSHED?
	AND I,01
	IFEQ
	JMP HERE
	THEN
	THEN
	THEN
	RTS

BASCOL:	.BYTE R6,R5,R4,R3,R2,R1,R0
	.BYTE R1,R2,R3,R4,R5,R6,R7

WHEEL:	.BYTE GREEN2&RED0,GREEN0&RED0,GREEN0&RED2,GREEN0
	.BYTE BLUE1&GREEN0,BLUE0&GREEN0,BLUE0&GREEN2,BLUE0
	.BYTE RED2&BLUE0,RED0&BLUE0,RED0&BLUE1,RED0
ENDWHL	=.-WHEEL-1
	.PAGE
	.SBTTL	DE-BOUNCE SWITCHES
DEBNCE:	LDA FIRE		;CHECK FIRE BUTTON
	AND LASMSK
	IFNE
	LDA LASFLG		;SET DE-BOUNCE ENABLE
	ORA I,40
	STA LASFLG
	THEN

	LDA MKMODE		;IN MARKETING MODE?
	IFMI
	LDA $COINS		;DEBOUNCE AUX COIN
	AND I,01
	IFNE
	LDA MKMODE
	ORA I,40
	STA MKMODE
	THEN
	THEN

	RTS
	.PAGE
	.SBTTL POWER-ON / WATCHDOG RESET ROUTINE
RESET:	SEI			;NO INTERRUPTS
	CLD
	LDA I,0			;CLEAR Z PAGE
	TAX
	BEGIN
	STA X,0
	DEX
	EQEND

	STA CTRLD		;CHECK FOR SELF-TEST
	LDA SLFTST
	IFPL
	JMP STEST
	THEN
	JMP INIT
	.PAGE
	.SBTTL SELF-TEST / DIAGNOSTICS ROUTINES
	.SBTTL	INIT FOR SELF TEST
STEST:	LDA I,0			;CLEAR THE POKEYS
	LDX I,0F
	BEGIN
	STA X,POKEY1
	STA X,POKEY2
	DEX
	MIEND
	LDA I,7			;"FAST POT"
	STA PKCTL1
	STA PKCTL2

	.SBTTL	VBLANK TEST
	LDY I,60		;WAIT FOR 60 VBLANKS
	STY POKEY1		;MAKE WOOP
	LDA I,0A8
	STA POKEY1+1
	BEGIN
	BEGIN
	BIT VBLANK
	PLEND
	BEGIN
	BIT VBLANK
	MIEND
	STY POKEY1
	STA WCHDOG		;WOOF
	DEY
	EQEND
	STY POKEY1+1		;SOUND OFF
	.PAGE
	.SBTTL	RAM TEST
;
;ENTRY: Z PAGE CLEARED
;
RAMTST:	LDX I,3			;SKIP BIT MODE REGS
	BEGIN
	LDA X,0			;STILL ZERO?
	BNE RAMERR
	LDA I,0FF		;USE GALLOPING FF
	STA X,0			;BIT TEST
	EOR X,0
	BNE RAMERR
	STA X,0			;CLEAR IT
	INX			;NEXT BYTE
	EQEND
	STA WCHDOG

	LDX I,1			;CLEAR REST OF MEMORY
	LDY I,0
	LDA I,0
	BEGIN
	BEGIN
	STA INDIR1		;RESET INDIRECT POINTER
	STX INDIR1+1
	STA NY,INDIR1
	INY
	EQEND
	STA WCHDOG		;WOOF
	INX
	CPX I,40		;END OF MEMORY
	EQEND

	LDX I,7			;NOW TEST THE CLEARED MEMORY
	LDY I,0
	BEGIN
	BEGIN
	LDA I,0
	STA INDIR1
	STX INDIR1+1
	LDA NY,INDIR1		;STILL ZERO?
	BNE RAMERR
	LDA I,0FF
	STA NY,INDIR1
	EOR NY,INDIR1
	BNE RAMERR
	STA NY,INDIR1
	INY			;NEXT BYTE
	EQEND
	STA WCHDOG		;WOOF
	INX			;NEXT PAGE
	CPX I,40
	EQEND			;ALL BYTE MODE RAM OK!
	JMP RAMOK		;GO TEST BITMODE
	.PAGE
	.SBTTL		RAM ERROR REPORT
;
;ENTRY:	(ACC)=BAD BYTE
;
RAMERR:	LDX I,8			;8 BITS
	BEGIN
	LDY I,0A0		;GOOD SOUND
	ASL
	IFCS
	LDY I,10		;BAD SOUND
	THEN
	STY POKEY1
	LDY I,0A8
	STY POKEY1+1
	LDY I,20
	BEGIN
	BEGIN			;WAIT FOR VBLANK-NOT
	BIT VBLANK
	PLEND
	BEGIN			;WAIT FOR VBLANK
	BIT VBLANK
	MIEND
	STA WCHDOG		;WOOF
	DEY
	EQEND
	STY POKEY1+1		;TURN OFF SOUND
	LDY I,14
	BEGIN
	BEGIN			;DELAY
	BIT VBLANK
	PLEND
	BEGIN
	BIT VBLANK
	MIEND
	STA WCHDOG		;WOOF
	DEY
	EQEND
	DEX
	EQEND
10$:	JMP 10$			;DO IT, DOGGIE!
	.PAGE
	.SBTTL	BITMODE TEST
RAMOK:	LDX I,0FF		;SET UP STACK
	TXS
	LDA I,0FF		;SET INPUT SWITCH BUFFER
	STA $COINS
	LDX I,0
	JSR COLOR		;GIVE MAP COLOR
;
; BIT MODE TEST
;
BITEST:	LDX I,0			;SET UP FIRST COORDINATE
	LDY I,0D
	BEGIN
	BEGIN
	STX BITMOX
	STY BITMOY
	LDA BITDAT		;SEE IF PIXEL CLEAR
	AND I,0E0
	BNE BITERR
	LDA I,0E0		;TEST PIXEL
	STA BITDAT
	EOR BITDAT
	AND I,0E0
	BNE BITERR
	STA BITDAT		;CLEAR IT
	INX			;NEXT PIXEL
	EQEND
	STA WCHDOG
	INY			;NEXT LINE
	CPY I,0F5		;END OF SCREEN?
	EQEND
	JMP MAPOK		;BIT MODE OK
	.PAGE
	.SBTTL		BIT MODE ERROR REPORT
BITERR:	STA TEMP3		;SAVE BAD BYTE
	LDA BITMOX		;SAVE ADDRESS
	STA SAVBMY
	LDA I,MBITER		;BITMAP ERROR
	JSR TBLMSG
	LDY I,0D
	BEGIN
	LDA MESSX		;OFFSET NEXT MESSAGE
	SEC
	SBC I,60
	STA MESSX
	LDA MESSY
	CLC
	ADC I,10
	STA MESSY
	JSR MESENT		;WRITE NEXT MESSAGE
	STA WCHDOG
	DEY
	EQEND
	.PAGE
	.SBTTL		BIT MAP AUDIO ERROR REPORT
	LDX I,3			;3 NIBBLES
	BEGIN
	LDA SAVBMY		;GET BIT OFFSET
	AND I,3
	STA COUNT1
	LDA I,3
	STA COUNT2
	BEGIN
	LDY I,0A0		;GOOD SOUND
	LDA COUNT1
	IFNE
	DEC COUNT1
	ELSE
	DEC COUNT1
	ASL TEMP3		;SHIFT OUT BIT
	IFCS
	LDY I,10		;BAD SOUND
	THEN
	THEN
	STY POKEY1		;TURN ON SOUND
	LDY I,0A8
	STY POKEY1+1
	LDY I,20
	BEGIN
	BEGIN
	BIT VBLANK		;WAIT FOR 20 VBLANKS
	PLEND
	BEGIN
	BIT VBLANK
	MIEND
	STA WCHDOG
	DEY
	EQEND
	STY POKEY1+1		;SOUND OFF
	LDY I,14		;PAUSE COUNT
	LDA COUNT2
	IFEQ
	LDY I,28		;DOUBLE PAUSE AT NIBBLE
	THEN
	BEGIN
	BEGIN
	BIT VBLANK
	PLEND
	BEGIN
	BIT VBLANK
	MIEND
	STA WCHDOG
	DEY
	EQEND
	DEC COUNT2
	MIEND
	DEX
	EQEND
10$:	JMP 10$
	.PAGE
	.SBTTL	ROM TEST FOR CHECKSUM
MAPOK:	LDA I,08		;SET SWITCH MASKS
	STA LASMSK
	LDA I,04
	STA SHDMSK

MAPOK1:	LDA I,MRAMOK		;"RAM OK"
	JSR TBLMSG
	LDA I,MMAPOK		;"BIT MAP OK"
	JSR TBLMSG
;
; ROM TEST
;
PROG	=8000			;START OF PROGRAM
NPROM	=7			;NUMBER OF 2532s

ROMTST:	LDA I,0			;SET UP INDIRECT POINTER
	STA INDIR1
	LDA I,PROG/100
	STA INDIR1+1
	LDX I,10*NPROM-1
	LDA I,0FF		;SEED
	BEGIN
	LDY I,0			;INDEX
	BEGIN
	EOR NY,INDIR1		;LONGITUDINAL PARITY
	INY
	EQEND
	TAY
	TXA
	AND I,0F		;END OF PROM?
	IFEQ
	TYA
	PHA			;YES, SAVE CHECKSUM
	LDY I,0FF		;NEW SEED
	THEN
	TYA
	INC INDIR1+1		;NEXT PAGE
	STA WCHDOG
	DEX
	MIEND

	LDA I,MROMS		;REPORT ROM STATUS
	JSR TBLMSG
	LDX I,NPROM-1
	BEGIN
	LDA I,18		;SETUP DISPLAY LOC
	STA MESSX
	LDA MESSY
	CLC
	ADC I,08
	STA MESSY
	TXA			;GET PROM NUMBER
	CLC
	ADC I,30		;MAKE IT ASCII
	JSR LETOUT		;WRITE IT
	LDA MESSX
	CLC
	ADC I,8
	STA MESSX
	PLA			;GET CHECKSUM
	IFNE
	PHA
	LDAL BAD 		;BAD CHECKSUM
	STA MESAGE
	LDAH BAD
	STA MESAGE+1
	JSR MESENT
	LDA MESSX		;DISPLAY INCORRECT NUMBER
	ADC I,08
	STA MESSX
	PLA
	JSR HEXOUT		;DISPLAY HEX NUMBER
	ELSE
	LDAL OK			;GOOD CHECKSUM
	STA MESAGE
	LDAH OK
	STA MESAGE+1
	JSR MESENT
	THEN
	STA WCHDOG
	DEX
	MIEND
	.PAGE
	.SBTTL	SETUP FOR INTERRUPT ENABLE
	LDA I,80		;TBALL ON
	JSR CURON

	LDA I,0			;FLASH BASES
	LDX I,0F
	BEGIN
	STA X,BASES
	DEX
	MIEND
	STA BASFLS
	LDA I,0			;ROTATE PLANET
	STA PLTLO
	LDA I,1
	STA PLTHI

	LDA I,MOP1		;WRITE OPTION MESSAGE
	JSR TBLMSG
	LDA I,MOP2
	JSR TBLMSG
	STA WCHDOG

	LDA I,22
	STA MESSY
	STA PKSCN1		;READ OPTION SWITCHES
	LDA PKSW1
	STA OPTN1
	JSR DSPOPT		;DISPLAY OPTION1

	LDA I,3A
	STA MESSY
	STA PKSCN2
	LDA PKSW2
	STA OPTN2
	JSR DSPOPT		;DISPLAY OPTION2
	STA WCHDOG

	LDA I,MSWICH		;"SWITCHES"
	JSR TBLMSG
	LDA I,MSTRT1		;"START1"
	JSR TBLMSG
	LDA I,MSTRT2		;"START2"
	JSR TBLMSG
	LDA I,MFIRSW		;"FIRE"
	JSR TBLMSG
	LDA I,MSHELD		;"SHIELD"
	JSR TBLMSG
	LDA I,MCOINL		;"COIN L"
	JSR TBLMSG
	LDA I,MCOINR		;"COIN R"
	JSR TBLMSG

	LDA I,0			;CHECK VERSION
	STA CTRLD
	BIT SLFTST
	IFVC
	LDA I,MCKTL
	ELSE
	LDA I,MUPRT
	THEN
	JSR TBLMSG

	LDA I,80		;SET SELF-TEST FLAG
	STA TSTFLG

	LDA I,CTST1		;GOTO TEST #1
	STA GSTATE

	CLI			;ENABLE INTERRUPTS
	.PAGE
	.SBTTL	SELF-TEST MAIN LOOP
TEST0:	BEGIN			;VBLANK SYNC
	LDA SYNC
	NEEND
	LDA I,0			;CLEAR SYNC
	STA SYNC

	JSR EXTEST		;EXECUTE TEST 
	JSR ANYSW		;DE-BOUNCE ALL SWITCHES
	JSR NXTEST		;CHECK FOR NEXT MODE
	JMP TEST0

EXTEST:	LDX GSTATE		;GET TEST STATE
	LDA X,TESTS+1
	PHA
	LDA X,TESTS
	PHA
	RTS

TESTS:	STATST TEST1,CTST1
	STATST TEST2A,CTST2A
	STATST TEST2B,CTST2B
	STATST TEST2C,CTST2C
	STATST TEST2D,CTST2D
	STATST TEST2E,CTST2E
	STATST EWAIT,CEWAIT
	STATST TEST3A,CTST3A
	STATST TEST3B,CTST3B
	STATST TEST4,CTST4
	STATST WAIT,CWAIT
MAXTST	=.-TESTS

	.SBTTL	DE-BOUNCE ALL SWITCHES
ANYSW:	LDA FIRE		;READ SWITCHES
	AND I,6F
	EOR I,6F
	IFEQ
	STA SWFLG		;CLEAR FLAG - NOT ACTIVE
	THEN

	LDA $COINS		;READ OTHER INPUTS
	AND I,07
	EOR I,07
	IFEQ
	STA SWFLG1
	THEN
	RTS

	.SBTTL	SWITCH TEST MODE
NXTEST:	LDA SWFLG1		;SWITCHES DE-BOUNCED?
	IFEQ
	LDA $COINS		;CHANGE REQ?
	AND I,41
	EOR I,41
	IFNE
	STA SWFLG1
	LDA TSTFLG		;GOTO NEXT TEST MODE
	AND I,7F
	CLC
	ADC I,01
	CMP I,04		;OVER LIMIT?
	IFCS
	JMP RESET		;GOTO FIRST TEST
	THEN
	TAX
	ORA I,80
	STA TSTFLG
	LDA X,TSTMOD
	STA GSTATE
	THEN
	THEN
	RTS

	.SBTTL WAIT STATE
WAIT:	RTS

TSTMOD:	.BYTE CTST1,CTST2A,CTST3A,CTST4
	.PAGE
	.SBTTL		OPERATOR TEST #1
TEST1:	LDA SWFLG		;SWITCHES DE-BOUNCED
	ORA SWFLG1
	IFEQ
	LDA $COINS		;ANY COINS PRESSED?
	AND I,06
	EOR I,06
	BNE 10$

	LDA FIRE		;READ SWITCHES
	AND I,6F		;ANY ACTIVE?
	EOR I,6F
	IFEQ
	STA POKEY1+1		;TONE OFF
	JMP 20$			;NO ACTIVE SWITCHES
	THEN

	STA TEMP1
	AND I,03		;PLR2 COCKTAIL?
	IFNE
	LDA I,02		;NO, RESET SWITCH MASKS
	STA LASMSK
	LDA I,01
	STA SHDMSK
	LDA I,10		;READ OTHER TBALL
	STA TBSWAP
	ELSE
	LDA I,08		;NO, USE PLR1 MASKS
	STA LASMSK
	LDA I,04
	STA SHDMSK
	LDA I,0
	STA TBSWAP
	THEN

	LDA TEMP1		;GET SWITCH SETTING
10$:	STA SWFLG		;FLAG IT
	STA SWFLG1
	LDA RANDOM		;RANDOM COLOR
	STA MAPCOL
	STA POKEY1		;RANDOM TONE
	LDA I,0A8
	STA POKEY1+1
	LDX I,0
	LDA PLTNUM		;SWITCH PLANET, TOO
	EOR I,10
	STA PLTNUM
	STA PLTSEL
	IFNE
	LDX I,6
	THEN
	STX WAVNUM
	JSR PLTON		;COLOR PLANET
	THEN

20$:	STA PKSCN1		;OPTIONS CHANGE?
	LDA PKSW1
	CMP OPTN1
	IFNE
	LDX I,22
	STX MESSY
	STA OPTN1
	JSR DSPOPT		;NEW OPTION
	THEN

	STA PKSCN2		;READ OPTION2
	LDA PKSW2
	CMP OPTN2
	IFNE
	LDX I,3A
	STX MESSY
	STA OPTN2
	JSR DSPOPT
	THEN

	LDA I,0B8		;SET Y COORDINATE
	STA MESSY
	STA MSGSET
	LDA FIRE		;READ SWITCHES
	STA TEMP1
	AND I,40
	JSR SWOUT		;START1
	LDA TEMP1
	AND I,20
	JSR SWOUT		;START2
	LDA TEMP1
	AND LASMSK
	JSR SWOUT		;FIRE
	LDA TEMP1
	AND SHDMSK
	JSR SWOUT		;SHIELD
	LDA $COINS
	AND I,02
	JSR SWOUT		;COINL
	LDA $COINS
	AND I,04
	JSR SWOUT		;COINR

	RTS
	.PAGE
	.SBTTL		DISPLAY OPTIONS
DSPOPT:	STA TEMP1
	LDA I,0A3		;SETUP FOR MESSAGE 
	STA MESSX
	LDA I,0			;LARGE CHARS
	STA MSGSET
	LDX I,7
	BEGIN
	LDA I,0
	ASL TEMP1		;SHIFT OUT A BIT
	ROL
	CLC
	ADC I,30		;MAKE IT ASCII
	JSR LETOUT		;WRITE IT
	DEX
	MIEND
	RTS


	.SBTTL		OUTPUT SWITCH VALUES
;
;ENTRY:	(ACC)=0 IF SWITCH ON
;
SWOUT:	IFNE
	LDA I,30		;OUTPUT 0
	ELSE
	LDA I,31		;OUTPUT 1
	THEN

	LDX I,50		;SET X COORDINATE
	STX MESSX
	JSR LETOUT

	LDA MESSY		;NEXT LINE
	CLC
	ADC I,8
	STA MESSY
	RTS
	.PAGE
	.SBTTL TEST2 - EAROM INIT
TEST2A:	JSR PLTOFF		;TURN OFF PLANET
	JSR CUROFF
	JSR CLEAR		;CLEAR SCREEN
	LDA I,0FF		;BLACK BACKROUND
	STA MAPCOL

	LDA I,MEAR1		;"TOTAL TIME"
	JSR TBLMSG
	LDA I,MEAR2		;"TOTAL SCORE"
	JSR TBLMSG
	LDA I,MEAR3		;"ONE PLAYER GAMES"
	JSR TBLMSG
	LDA I,MEAR4		;"TWO PLAYER GAMES"
	JSR TBLMSG

	JSR REHIIN		;READ IN THE EAROM
	LDA I,CEWAIT		;WAIT FOR HIM
	STA GSTATE
	LDA I,CTST2B		;GOTO TEST2B
	STA NSTATE
	RTS
	.PAGE
	.SBTTL	TEST2 - EAROM DISPLAY
TEST2B:	LDA EABAD		;IS EAROM OK?
	IFNE
	LDA I,0			;NO..CLEAR IT (OUCH!)
	STA EABAD
	JSR EAZERO
	LDA I,MECLR		;"CLEARING ENTIRE..."
	JSR TBLMSG
	LDA I,CEWAIT		;WAIT FOR HIM
	STA GSTATE
	LDA I,CTST2D		;THEN CHECK AGAIN
	STA NSTATE
	RTS
	THEN

	LDA I,0			;CLEAR TOTAL GAMES
	STA TOTGAM
	STA TOTGAM+1
	STA TOTGAM+2

	SED			;GET TOTAL GAMES
	LDA N2PGAM
	CLC
	ADC N2PGAM
	STA TOTGAM
	LDA N2PGAM+1
	ADC N2PGAM+1
	STA TOTGAM+1
	IFCS
	LDA TOTGAM+2
	ADC I,0
	STA TOTGAM+2
	THEN
	LDA TOTGAM
	CLC
	ADC N1PGAM
	STA TOTGAM
	LDA TOTGAM+1
	ADC N1PGAM+1
	STA TOTGAM+1
	IFCS
	LDA TOTGAM+2
	ADC I,0
	STA TOTGAM+2
	THEN
	CLD

	LDA TOTIME		;MOVE TOTAL TIME TO BUFFER
	STA TRIPLE
	LDA TOTIME+1
	STA TRIPLE+1
	LDA TOTIME+2
	STA TRIPLE+2
	JSR TOTDIV		;GET AVERAGE TIME
	LDA I,8A
	STA BITMOX
	STA MESSX
	LDA I,30
	STA BITMOY
	STA MESSY
	LDA I,HUE3
	STA STPCLR
	LDX I,2			;3 DIGITS
	JSR SCORE1


	LDA TOTSCR		;MOVE TOTAL SCORE TO BUFFER
	STA TRIPLE
	LDA TOTSCR+1
	STA TRIPLE+1
	LDA TOTSCR+2
	STA TRIPLE+2
	JSR TOTDIV		;GET AVERAGE SCORE
	LDA TRIPLE+1		;PUT IN FAKE ZERO
	STA TRIPLE+2
	LDA TRIPLE
	STA TRIPLE+1
	LDA I,0
	STA TRIPLE
	LDA I,8A
	STA BITMOX
	STA MESSX
	LDA I,50
	STA BITMOY
	STA MESSY
	LDX I,2
	JSR SCORE1

	LDA N1PGAM		;NUMBER 1 PLAYER GAMES
	STA TRIPLE
	LDA N1PGAM+1
	STA TRIPLE+1
	LDA I,9A
	STA BITMOX
	STA MESSX
	LDA I,70
	STA BITMOY
	STA MESSY
	LDX I,1			;2 DIGITS
	JSR SCORE1

	LDA N2PGAM		;NUMBER 2 PLAYER GAMES
	STA TRIPLE
	LDA N2PGAM+1
	STA TRIPLE+1
	LDA I,9A
	STA BITMOX
	STA MESSX
	LDA I,90
	STA BITMOY
	STA MESSY
	LDX I,1
	JSR SCORE1

	LDA I,CTST2C		;WAIT FOR CLEAR REQUEST
	STA GSTATE
	RTS
	.PAGE
	.SBTTL	EAROM - WAIT FOR CLEAR REQUEST
TEST2C:	LDA SWFLG		;SWITCH DEBOUNCED?
	IFEQ
	LDA FIRE		;ZERO REQUEST?
	AND I,6C		;ALL SWITCHES
	IFEQ
	EOR I,6C
	STA SWFLG
	LDA I,MECLR		;"CLEARING ENTIRE..."
	JSR TBLMSG
	JSR EAZERO
	LDA I,CTST2A		;GO BACK TO INIT
	STA NSTATE
	LDA I,CEWAIT
	STA GSTATE
	ELSE
	LDA FIRE		;CLEAR REQUEST?
	AND I,48		;START1&FIRE
	IFEQ
	EOR I,48
	STA SWFLG
	LDA I,MECLRB		;"CLEARING BOOKEEPING.."
	JSR TBLMSG
	JSR EAZBOO		;CLEAR BOOKEEPING STUFF
	LDA I,CTST2A		;GO BACK TO EA INIT
	STA NSTATE
	LDA I,CEWAIT		;WAIT FOR HIM
	STA GSTATE
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL		DIVIDE TRIPLE BY TOTAL GAMES
TOTDIV:	LDA I,0			;CLEAR TEMPS
	STA TEMP1
	STA TEMP2
	STA TEMP3

	LDA TOTGAM+1		;DON'T DIVIDE BY ZERO
	IFEQ
	LDA TOTGAM
	BEQ 10$
	THEN

	SED			;DIVIDE BY TOTAL GAMES
	BEGIN
	LDA TEMP1		;COUNT REPTS
	CLC
	ADC I,1
	STA TEMP1
	LDA TEMP2
	ADC I,0
	STA TEMP2
	LDA TEMP3
	ADC I,0
	STA TEMP3

	LDA TRIPLE		;DIVIDE BY TOTGAM
	SEC
	SBC TOTGAM
	STA TRIPLE
	LDA TRIPLE+1
	SBC TOTGAM+1
	STA TRIPLE+1
	LDA TRIPLE+2
	SBC TOTGAM+2
	STA TRIPLE+2
	CCEND
	CLD

10$:	LDA TEMP1		;MOVE RESULT TO BUFFER
	STA TRIPLE
	LDA TEMP2
	STA TRIPLE+1
	LDA TEMP3
	STA TRIPLE+2
	RTS
	.PAGE
	.SBTTL	TEST2 - WAIT FOR EAROM UPDATE
EWAIT:	LDA EAFLG		;EAROM ACTIVE?
	ORA EAREQU
	IFNE
	RTS			;YES, WAIT
	THEN

	LDA NSTATE		;GOTO NEXT STATE
	STA GSTATE
	RTS

TEST2D:	JSR REHIIN		;READ IN ONCE MORE
	LDA I,CTST2E		;THEN CHECK
	STA NSTATE
	LDA I,CEWAIT
	STA GSTATE
	RTS

TEST2E:	LDA EABAD		;STILL BAD?
	IFEQ
	LDA I,CTST2A		;NO, START OVER
	STA GSTATE
	RTS
	THEN

	JSR CLEAR		;CLEAR SCREEN
	LDA I,MEBAD		;"EAROM BAD"
	JSR TBLMSG
	LDA I,CWAIT		;WAIT STATE
	STA GSTATE
	RTS
	.PAGE
	.SBTTL TEST3 - DRAW COLOR BARS
TEST3A:	LDX I,20		;BAND COUNT
	LDA I,0FF
	STA BITMOX
	LDA I,0E0
	STA TEMP1
	BEGIN
	LDA I,0D
	STA BITMOY
	LDY I,0E8		;LINE COUNT
	LDA TEMP1
	BEGIN
	STA BITDAT
	INC BITMOY
	DEY
	EQEND
	DEX
	IFEQ
	SEC
	SBC I,40
	IFCC
	LDA I,0C0
	THEN
	STA TEMP1
	LDX I,20
	THEN
	DEC BITMOX
	EQEND
	LDA I,CTST3B
	STA GSTATE
	RTS
	.PAGE
	.SBTTL TEST3 - WAIT STATE FOR COLOR BARS
TEST3B:	RTS

	.SBTTL	TEST3 - IRQ COLOR CHANGE
TEST3C:	LDA QUAD
	CMP I,4			;4 IS REALLY 0
	IFCS
	LDA I,0
	THEN
	ASL
	ASL
	ASL
	CLC
	ADC I,7
	TAY
	LDX I,7
	BEGIN
	LDA AY,PATRN0
	STA AX,MAPCOL
	DEY
	DEX
	MIEND
	RTS

	.SBTTL	COLOR BAR PATTERN
PATRN0:	.BYTE B0,B0,B1,B1,B1,B2,B2,0FF
	.BYTE G0,G1,G2,G3,G4,G5,G6,G7
	.BYTE R0,R1,R2,R3,R4,R5,R6,R7
	.BYTE 0FF,00,0FF,00,0FF,00,0FF,00
	.PAGE
	.SBTTL TEST4 - CONVERGENCE TEST GRID
TEST4:	JSR CLEAR		;CLEAR SCREEN
	LDA I,BLACK		;SETUP COLORS
	STA MAPCOL
	LDA I,WHITE	
	STA MAPCOL+1
	LDA I,B0
	STA MAPCOL+2
	LDA I,R0
	STA MAPCOL+3
	LDA I,G0
	STA MAPCOL+4

	LDA I,29		;HORIZ CROSSHATCH
	BEGIN
	JSR HZ5
	LDA BITMOY
	CLC
	ADC I,10
	CMP I,0DA
	CSEND

	LDA I,20		;VERT CROSSHATCH
	BEGIN
	JSR VT1
	LDA BITMOX
	CLC
	ADC I,10
	CMP I,0E1
	CSEND

	LDA I,0D		;TOP LINE
	JSR HZ1
	LDA I,0F4		;BOTTOM LINE
	JSR HZ1

	LDA I,0E		;TOP BORDER
	JSR HZ2
	LDA I,0EF		;BOTTOM BORDER
	JSR HZ2

	LDA I,13		;TOP INNER BORDER
	JSR HZ3
	LDA I,0EE		;BOTTOM INNER BORDER
	JSR HZ3

	JSR HZ4			;SIDE BORDERS

	LDA I,CWAIT		;WAIT STATE
	STA GSTATE
	RTS
	.PAGE
	.SBTTL	CONVERGENCE DISPLAY
HZ1:	STA BITMOY
	LDA I,4
	STA BITMOX
	LDX I,HUE3
	BEGIN
	STX BITDAT
	CLC
	ADC I,1
	STA BITMOX
	CMP I,0FC
	EQEND
	RTS

HZ2:	STA BITMOY
	LDX I,5
	BEGIN
	LDA I,4
	STA BITMOX
	LDA I,HUE3
	STA BITDAT
	INC BITMOX
	LDA I,HUE2
	LDY I,5
	BEGIN
	STA BITDAT
	INC BITMOX
	DEY
	EQEND
	LDA I,0F6
	STA BITMOX
	LDA I,HUE2
	LDY I,5
	BEGIN
	STA BITDAT
	INC BITMOX
	DEY
	EQEND
	LDA I,HUE3
	STA BITDAT
	INC BITMOY
	DEX
	EQEND
	RTS

HZ3:	STA BITMOY
	LDA I,4
	STA BITMOX
	LDA I,HUE3
	STA BITDAT
	LDA I,0A
	STA BITMOX
	LDX I,HUE4
	BEGIN
	STX BITDAT
	CLC
	ADC I,1
	STA BITMOX
	CMP I,0F6
	EQEND
	LDA I,0FB
	STA BITMOX
	LDA I,HUE3
	STA BITDAT
	RTS

HZ4:	LDA I,14
	STA BITMOY
	LDX I,HUE3
	LDY I,HUE4
	BEGIN
	LDA I,4
	STA BITMOX
	STX BITDAT
	LDA I,0A
	STA BITMOX
	STY BITDAT
	LDA I,0F5
	STA BITMOX
	STY BITDAT
	LDA I,0FB
	STA BITMOX
	STX BITDAT
	LDA BITMOY
	CLC
	ADC I,01
	STA BITMOY
	CMP I,0EE
	EQEND
	RTS

HZ5:	STA BITMOY
	LDA I,5
	STA BITMOX
	LDX I,HUE1
	BEGIN
	STX BITDAT
	CLC
	ADC I,01
	STA BITMOX
	CMP I,0FB
	EQEND
	RTS

VT1:	STA BITMOX
	LDA I,0E
	STA BITMOY
	LDX I,HUE1
	BEGIN
	STX BITDAT
	CLC
	ADC I,01
	STA BITMOY
	CMP I,0F4
	EQEND
	RTS
	.PAGE
	.SBTTL PLANET BASE TABLES
BASLAT:	.BYTE 44,4C,55,5C	;BASE Y COORDINATES
	.BYTE 65,6D,74,7D
	.BYTE 84,8C,95,9C
	.BYTE 0A5,0AC,0B5,0BD

BASUVV: .BYTE -1,-1,-1,-1	;UPPER VERTICAL VELOCITIES
	.BYTE -1,-1,-1,-1 
	.BYTE 3,3,3,3 
	.BYTE 2,2,1,1

BASUHV: .BYTE 0,0,1,1		;UPPER HORIZ. VELOCITIES
	.BYTE 2,2,3,3
	.BYTE -2,-2,-2,-2
	.BYTE -2,-2,-2,-2

BASLVV: .BYTE -1,-1,-2,-2	;LOWER VERTICAL VELOCITIES
	.BYTE -3,-3,-3,-3
	.BYTE 1,1,1,1
	.BYTE 1,1,1,1

BASLHV: .BYTE -2,-2,-2,-2	;LOWER HORIZ. VELOCITIES
	.BYTE -2,-2,-2,-2
	.BYTE 3,3,2,2 
	.BYTE 1,1,0,0

BSUVAL: .BYTE 0,0,0,0		;UPPER VERTICAL ACCELERATION BASE
	.BYTE 0,0,0,0
	.BYTE -1F,-20,-21,-22
	.BYTE -1C,-1D,-18,-1A

BSUHAL: .BYTE 15,12,16,12 	;UPPER HORIZ. ACCELERATION BASE
	.BYTE 16,14,17,15
	.BYTE 0,0,0,0
	.BYTE 0,0,0,0

BSUVAR: .BYTE 0,0,0,0 		;UPPER ACCELERATION RANGE
	.BYTE 0,0,0,0
	.BYTE 7,8,8,8
	.BYTE 8,9,8,0C

BSUHAR: .BYTE 19,10,0D,0A	;UPPER HORIZ. ACCELERATION RANGE
	.BYTE 9,6,6,5
	.BYTE 0,0,0,0
	.BYTE 0,0,0,0

BSLVAL: .BYTE 1A,18,1D,1C
	.BYTE 22,21,20,1F	;LOWER VERTICAL ACCEL. BASE
	.BYTE 0,0,0,0
	.BYTE 0,0,0,0

BSLHAL: .BYTE 0,0,0,0		;LOWER HORIZ. ACCEL. BASE
	.BYTE 0,0,0,0
	.BYTE 15,17,14,16
	.BYTE 12,16,12,15

BSLVAR: .BYTE 0C,8,9,8		;LOWER VERTICAL ACCEL. RANGE
	.BYTE 8,8,8,7
	.BYTE 0,0,0,0 
	.BYTE 0,0,0,0

BSLHAR: .BYTE 0,0,0,0		;LOWER HORIZ. ACCEL. RANGE
	.BYTE 0,0,0,0
	.BYTE 5,6,6,9
	.BYTE 0A,0D,10,19

BASXLO:	.BYTE 70,64,5C,58
	.BYTE 55,53,52,51
	.BYTE 51,52,53,55
	.BYTE 58,5C,64,70

BASXHI:	.BYTE 091,09D,0A3,0A8
	.BYTE 0AA,0AD,0AE,0AF
	.BYTE 0AF,0AE,0AD,0AA
	.BYTE 0A8,0A3,09D,091

BASLHI:	.BYTE 94,54,18,43
	.BYTE 62,0C0,0D9,095
	.BYTE 0E8,0B4,0D1,0F6
	.BYTE 058,074,024,006

BASLLO: .BYTE 02D,0EC,0AF,0DA
	.BYTE 0F9,058,071,02D
	.BYTE 080,04C,068,08D
	.BYTE 0EF,00A,0BA,09D

BASCLR: .BYTE 0E,0E,0E,0C		;PLANET 1
	.BYTE 0C,09,0C,08
	.BYTE 09,08,09,0C
	.BYTE 0C,09,09,0E
	.BYTE 06,08,08,08		;PLANET 2
	.BYTE 09,0B,0C,0C
	.BYTE 09,0D,0D,08
	.BYTE 0E,0E,08,08

BASLOC: .WORD BASE0,BASE1,BASE2,BASE3
	.WORD BASE4,BASE5,BASE6,BASE7
	.WORD BASE8,BASE9,BASEA,BASEB
	.WORD BASEC,BASED,BASEE,BASEF
	.PAGE
;
; CHECKSUM #6
;
CKSUM6:	.BYTE CKSM6
;
; ENCRYPTIC COPYRIGHT
;
	.BYTE 002,0BB,05A,030
	.BYTE 05F,0EE,01D,0A8
	.INCLUDE BASTBL.MAC
	.PAGE
;
; FILL UP REST WITH ZEROS
;
	.REPT 028
	.BYTE 00
	.ENDR

	HLL65
	.SBTTL	VECTORS
;
; MAKE SURE ONLY ONE SET OF VECTORS IS REAL.
; COMMENT OUT THE OTHER SET.
;

;
; DEVELOPMENT SYSTEM VECTORS
;
 	.VCTRS 0FFF8,IRQ,IRQ,RESET
;
; PROM VECTORS
;
	.VCTRS 0EFFA,IRQ,RESET,IRQ
	.END
                                                                                                                                                                                                                                                                                                                                                                  