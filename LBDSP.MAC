	.NLIST
	.INCLUDE LBCOMN
	.LIST
	.INCLUDE LBDCLM
	.TITLE LBDSP - DISPLAY SUPPORT
	.CSECT LBDSP
	.PAGE
	.SBTTL GLOBALS DEFINED
;
; EXTERNAL ENTRY POINTS
;
	.GLOBL SNDON
;
; EXTERNAL VARIABLES AND CONSTANTS
;
	.GLOBL SHPMSK,SDRAY
	.GLOBL CZOOM,CSPA1A
	.GLOBL SBONUS,$COINS
	.GLOBL MIRV,SATLIT,LILSHP
	.GLOBL HUN1,HUN2,HUN3,HUN4,HUN5,HUN6,HUN7,HUN8
	.GLOBL SHIP1,SHIP2,SHIP3,SHIP4
	.GLOBL SHPEX0,SHPEX1,SHPEX2,SHPEX3,SHPEX4,SHPEX5
	.GLOBL FIRE0,FIRE1,FIRE2,FIRE3
	.GLOBL STAR0,STAR1,STAR2,STAR3
	.GLOBL SCT1A,SCT1B,SCT1C,SCT1D,SCT1E
	.GLOBL SCT2A,SCT2B,SCT2C,SCT2D,SCT2E
	.GLOBL LIBRNG,LIBER
	.GLOBL CKSM4,CKSM5
;
; ENTRY POINTS DEFINED HERE
;
	.GLOBL CLEAR,MESENT,DIGIT8,TBLMSG,TYPMSG,MESTYP
	.GLOBL LETOUT,HEXOUT
	.GLOBL GNPLOT,GNRSTR
	.GLOBL DIMOND,XHAIR,CIRCLE
	.GLOBL BEMPLT,EXPLT1,EXPLT2
	.GLOBL SAUERS,SAUDRW,STRDRW,SHPDRW,LIVDRW,SATDRW
	.GLOBL MSLDRW,MSLDR1,KLLDRW,MRVDRW,FIRDRW,SCTDRW
	.GLOBL DTHRAY,SHPMOV,SHPEXP
	.GLOBL DIDRW,RING,LIBDSP
	.GLOBL COLOR,MCOLOR,PLTOFF,PLTON,CURON,CUROFF
	.GLOBL SCORE,SCORY,SCORE1,CLRTRI
	.GLOBL REVRSE
;
; CONSTANTS DEFINED HERE
;
	.GLOBL CBASE,OK,BAD
	.PAGE
	.SBTTL STAR SHIPS
	.SBTTL	MOVE STAR SHIPS
;
;ENTRY:	(X)=SHIP INDEX
;	CALLED FROM IRQ
;
SHPMOV:	LDA SHPINX		;CHECK IF DONE
	IFEQ
	JSR SHPDRW		;ERASE SHIP
	LDA AX,SHPXLC		;GET NEXT LOCATION
	CLC
	ADC AX,BONMVX
	STA AX,SHPXLC
	LDA AX,SHPYLC
	CLC
	ADC AX,BONMVY
	STA AX,SHPYLC
	JSR SHPDRW		;DRAW NEW SHIP

	LDA X,SHPYLC		;CHECK IF DONE
	SEC
	SBC I,80
	IFCC
	COMP
	THEN
	BIT $COINS		;COCKTAIL?
	IFVS
	CMP X,SHPCTR
	ELSE
	CMP X,SHPCTC
	THEN
	IFCC
	LDA I,80		;TELL MAIN LOOP
	STA SHPINX
	THEN
	THEN
	RTS

BONMVX:	.BYTE 02,-2,02,-2
BONMVY:	.BYTE 02,02,-2,-2
SHPCTR:	.BYTE 15,15,05,05
SHPCTC:	.BYTE 05,05,15,15
	.PAGE
	.SBTTL	DRAW STAR SHIPS
;
;ENTRY:	(X)=INDEX INTO SHIP TABLES
;
;EXIT:	(X) IS OK
;
SHPDRW:	LDA AX,SHPXLC		;LOAD BITMODE REGS
	STA BITMOX
	LDA AX,SHPYLC
	STA BITMOY
	TXA			;DOUBLE THE INDEX
	ASL
	TAX
	BIT $COINS		;COCKTAIL?
	IFVS
	LDA AX,SHPADD		;LOAD STAMP POINTER
	STA STMPNT
	LDA AX,SHPADD+1
	STA STMPNT+1
	ELSE
	LDA X,SHPAD1		;FLIP LOCATIONS
	STA STMPNT
	LDA X,SHPAD1+1
	STA STMPNT+1
	THEN
	TXA			;RESTORE INDEX
	LSR
	TAX
	JSR STAMP		;DRAW SHIP
	STA WCHDOG		;HIT WATCHDOG
	RTS

SHPADD:	.WORD SHIP1,SHIP2,SHIP3,SHIP4
SHPAD1:	.WORD SHIP4,SHIP3,SHIP2,SHIP1
	.PAGE
	.SBTTL	GENERATE SHIP EXPLOSION SEQUENCE
SHPEXP:	LDA FRAME		;CHECK UPDATE RATE
	AND I,0F
	IFEQ
	LDX I,3
	BEGIN
	LDY AX,SHPINX		;CHECK PICTURE INDEX (DOUBLE)
	IFPL
	CPY I,0C		;SEE IF FIRST TIME
	IFCC
	LDA AX,SHPXLC		;NO, ERASE OLD ONE
	STA BITMOX
	LDA AX,SHPYLC
	STA BITMOY
	LDA AY,SEXPIC
	STA STMPNT
	LDA AY,SEXPIC+1
	STA STMPNT+1
	JSR STAMP
	THEN
	LDA AX,SHPINX		;BUMP INDEX
	SEC
	SBC I,2
	STA AX,SHPINX
	TAY
	IFPL			;NOW WRITE NEW
	LDA AX,SHPXLC
	STA BITMOX
	LDA AX,SHPYLC
	STA BITMOY
	LDA AY,SEXPIC
	STA STMPNT
	LDA AY,SEXPIC+1
	STA STMPNT+1
	JSR STAMP
	THEN
	THEN
	DEX
	MIEND
	THEN
	RTS

SEXPIC:	.WORD SHPEX0,SHPEX1,SHPEX2,SHPEX3
	.WORD SHPEX4,SHPEX5
	.PAGE
	.SBTTL	DRAW NUMBER OF LIVES LEFT
;
;ENTRY:	(X)=NUMBER OF LIVES TO DRAW
;
LIVDRW:	LDA ATRACT		;DON'T DO IN ATTRACT
	IFMI
	LDAL LILSHP		;POINT TO STAMP
	STA STMPNT
	LDAH LILSHP
	STA STMPNT+1
	BEGIN
	LDA LIVPNT		;GET X COORDINATE
	STA BITMOX
	BIT $COINS		;COCKTAIL?
	IFVS
	CLC
	ADC I,4			;MOVE TO NEXT
	STA LIVPNT
	LDA I,TOP		;GET Y COORDINATE
	ELSE
	SEC
	SBC I,4
	STA LIVPNT
	LDA I,BOTTOM-1
	THEN
	STA BITMOY
	JSR STAMP
	DEX
	EQEND
	THEN
	RTS
	.PAGE
	.SBTTL STAR FIELD
	.SBTTL	DRAW STARS
;
;ENTRY:	(X)=STAR INDEX
;
STRDRW:	LDA AX,STRXHI
	STA BITMOX
	LDA AX,STRYHI
	STA BITMOY
	LDA BITDAT
	EOR I,STRCOL
	STA BITDAT
	RTS
	.PAGE
	.SBTTL CURSOR ROUTINES
	.SBTTL	UNDER CURSOR RESTORE
GNRSTR:	LDY I,06		;SET LINE COUNTER
	LDA I,HUE3
	STA CURCLR
	LDA GNOLDY
	STA BITMOY
	LDA GNOLDX		;GET PREVIOUS INITIAL VALUES
	JSR DIMOND		;DRAW DIAMOND
	LDA GNOLDY
	JSR XHAIR		;DRAW XHAIR
	RTS
	.SBTTL	WRITE OUT CURSOR
GNPLOT:	LDY I,06		;DIAMOND SIZE
	LDA I,HUE3
	STA CURCLR
	LDA GUNY
	CMP I,YLIMD		;CHECK LOWER LIMIT
	IFCS
	LDA I,YLIMD		;OUT OF BOUNDS
	STA GUNY
	ELSE
	CMP I,YLIMU		;CHECK UPPER LIMIT
	IFCC
	LDA I,YLIMU		;OUT OF BOUNDS
	STA GUNY
	THEN
	THEN
	STA GNOLDY		;SAVE Y
	STA BITMOY
	LDA GUNX
	CMP I,XLIMR
	IFCS
	LDA I,XLIMR
	STA GUNX
	ELSE
	CMP I,XLIML
	IFCC
	LDA I,XLIML
	STA GUNX
	THEN
	THEN
	STA GNOLDX
	JSR DIMOND		;DRAW DIAMOND
	LDA GUNY
	JSR XHAIR		;DRAW XHAIR
	RTS
	.PAGE
	.SBTTL	DIAMOND ROUTINE
;ENTRY:	(A)=X COORDINATE FOR TOP OF DIAMOND
;	(Y)=DIAMOND SIZE
;
;EXIT:	(A)=X COORDINATE OF BOTTOM
;	(Y) IS DESTROYED
;
;
DIMOND:	STA TEMP1
	STA TEMP2
	BEGIN
	STA BITMOX
	LDA BITDAT
	EOR CURCLR		;XOR DIAMOND TO SCREEN
	STA BITDAT
	INC BITMOY		;NEXT LINE
	DEY
	IFPL
	INC TEMP2		;UPPER HALF
	DEC TEMP1
	ELSE
	DEC TEMP2		;LOWER HALF
	INC TEMP1
	THEN
	LDA TEMP1
	STA BITMOX
	LDA BITDAT
	EOR CURCLR		;XOR TEMP1 SIDE
	STA BITDAT
	LDA TEMP2
	CMP TEMP1
	EQEND
	RTS

	.SBTTL	SET UP TARGET DIAMOND
;
;ENTRY:	(X)=BEAM INDEX
;
;EXIT:	(X)&(Y) OK
;
DIDRW:	STY SAVEY		;SAVE Y
	LDY AX,DISIZE		;GET DIAMOND SIZE
	LDA I,HUE3		;DIAMOND COLOR
	STA CURCLR
	LDA AX,BEMTGY		;DIAMOND COORDINATES
	SEC
	SBC AX,DISIZE
	STA BITMOY
	LDA AX,BEMTGX
	JSR DIMOND
	LDY SAVEY
	RTS

DISIZE:	.BYTE 5,4,3,2
	.BYTE 5,4,3,2
	.BYTE 5,4,3,2
	.PAGE
	.SBTTL	CROSS HAIR ROUTINE
;
;ENTRY:	(A)=Y COORDINATE OF TOP OF DIAMOND
;	(BITMOX=X COORDINATE OF TOP
;
XHAIR:	CLC
	ADC I,03		;DROP 4 LINES
	STA BITMOY
	LDY I,04
	BEGIN			;--VERTICAL XHAIR--
	INC BITMOY
	LDA BITDAT
	EOR CURCLR
	AND I,0E0
	STA BITDAT		;WRITE PIXEL
	DEY
	MIEND
	DEC BITMOY
	DEC BITMOY
	DEC BITMOX
	DEC BITMOX
	LDY I,03
	BEGIN			;--HORIZONTAL XHAIR--
	LDA BITDAT
	EOR CURCLR
	AND I,0E0
	STA BITDAT		;WRITE PIXEL
	INC BITMOX
	CPY I,2
	IFEQ
	INC BITMOX		;SKIP CENTER PIXEL
	THEN
	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL SAUCER ROUTINES
	.SBTTL	ERASE OLD SAUCER
SAUERS:	LDA I,1
	STA TEMP1
	LDA I,3
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,-1
	STA TEMP1
	LDA I,-3
	THEN
	CLC
	ADC SROLDY		;SET Y COORDINATE
	STA BITMOY
	LDA SAUFLG		;GET PICTURE INDEX
	AND I,03
	TAY
	LDX AY,SAUINX
	LDA I,6			;LOOP COUNTER
	STA COUNT1
	BEGIN
	LDA SROLDX
	SEC
	SBC AX,SAUXOF
	STA BITMOX
	LDY AX,SAULLN		;LINE LENGTH
	BEGIN
	LDA BITDAT
	EOR AX,SAUCOL
	STA BITDAT
	INC BITMOX
	DEY
	EQEND
	LDA BITMOY
	SEC
	SBC TEMP1
	STA BITMOY
	DEX
	DEC COUNT1
	EQEND
	RTS

	.PAGE
	.SBTTL	DRAW NEW SAUCER
SAUDRW:	LDA I,1
	STA TEMP1
	LDA I,3
	BIT $COINS
	IFVC
	LDA I,-1
	STA TEMP1
	LDA I,-3
	THEN
	CLC
	ADC SRNEWY		;SET Y COORDINATE
	STA BITMOY
	LDA SAUFLG		;GET PICTURE INDEX
	AND I,03
	TAY
	LDX AY,SAUINX
	LDA I,6			;LOOP COUNTER
	STA COUNT1
	BEGIN
	LDA SRNEWX
	SEC
	SBC AX,SAUXOF
	STA BITMOX
	LDY AX,SAULLN		;LINE LENGTH
	BEGIN
	LDA BITDAT
	EOR AX,SAUCOL
	STA BITDAT
	INC BITMOX
	DEY
	EQEND
	LDA BITMOY		;NEXT LINE
	SEC
	SBC TEMP1
	STA BITMOY
	DEX
	DEC COUNT1
	EQEND
	LDA SRNEWX		;MAKE NEW VALUES OLD
	STA SROLDX
	LDA SRNEWY
	STA SROLDY
	RTS

SAUINX:	.BYTE 05,0B,11,17
SAUXOF: .BYTE 0,2,4,5,1,0
	.BYTE 0,3,5,6,1,0
	.BYTE 0,4,6,7,1,0
	.BYTE 0,5,7,8,1,0
SAULLN: .BYTE 01,05,09,0B,03,01
	.BYTE 01,07,0B,0D,03,01
	.BYTE 01,09,0D,0F,03,01
	.BYTE 01,0B,0F,11,03,01
SAUCOL: .BYTE FLASH,HUE6,HUE7,HUE5,FLASH,FLASH
	.BYTE FLASH,HUE4,HUE4,HUE4,FLASH,FLASH
	.BYTE FLASH,HUE5,HUE5,HUE5,FLASH,FLASH
	.BYTE FLASH,HUE3,HUE3,HUE3,FLASH,FLASH
	.PAGE
	.SBTTL	SHOOT DEATH RAY
DTHRAY:	LDA SAUTM2		;CHECK ENABLE TIMER
	IFNE
	SEC
	SBC I,1
	STA SAUTM2
	BIT SAUFLG		;WERE WE JUST KILLED?
	IFPL
	LDA I,0			;YES, CLEAR FLAG
	STA SAUFLG
	RTS
	THEN
	ORA I,0
	IFNE
	CMP I,48		;CHANGE ON VALUES
	IFNE
	CMP I,30
	IFNE
	CMP I,18
	IFNE
	RTS
	THEN
	THEN
	THEN
	JSR SAUERS		;ERASE OLD SAUCER
	INC SAUFLG		;CHANGE PICTURE INDEX
	JSR SAUDRW		;DRAW NEW SAUCER
	RTS
	ELSE
	JSR SAUERS		;ERASE OLD SAUCER
	LDA SAUFLG		;GET ORIGINAL PICTURE
	AND I,0F0
	STA SAUFLG
	JSR SAUDRW		;DRAW NEW ONE
	LDA I,SDRAY		;TURN ON DEATH RAY SOUND
	JSR SNDON
	THEN
	THEN

	LDX RAYINX		;LOAD INDEX
	LDA RAYVRT		;NEW VERTICAL COORDINATE
	CLC
	ADC AX,VRTBL
	STA RAYVRT
	STA BITMOY

	LDA RAYLLO
	CLC
	ADC AX,LFTLO		;CALCULATE NEW LEFT X
	STA RAYLLO
	LDA RAYLHI
	ADC AX,LFTHI
	CMP I,XLEFT		;CHECK SCREEN EDGE
	IFCC
	LDA I,XLEFT-1
	THEN
	STA RAYLHI
	STA BITMOX

	LDA RAYRLO		;CALCULATE NEW RIGHT X
	CLC
	ADC AX,RGTLO
	STA RAYRLO
	LDA RAYRHI
	ADC AX,RGTHI
	CMP I,XRIGHT		;EDGE CHECK
	IFCS
	LDA I,XRIGHT
	THEN
	STA RAYRHI
	CMP RAYLHI
	IFEQ
	JMP 10$
	THEN

	BEGIN			;DRAW LINE
	LDA BITDAT
	EOR I,FLASH
	STA BITDAT
	LDA BITMOX
	CLC
	ADC I,1
	STA BITMOX
	CMP RAYRHI
	EQEND
10$:	LDA BITDAT 		;LAST DOT
	EOR I,FLASH
	STA BITDAT

	LDA RAYVRT		;CHECK IF DONE
	CMP AX,RAYLIM
	IFEQ
	LDA SAUFLG
	AND I,20
	IFEQ
	LDA RAYSVX		;RESTORE INITIAL VALUES
	STA RAYLHI
	STA RAYRHI
	LDA RAYSVY
	STA RAYVRT
	LDA I,80
	STA RAYLLO
	STA RAYRLO
	LDA SAUFLG
	ORA I,20
	STA SAUFLG

	LDA MKMODE		;MARKETING MODE?
	IFPL			;NO...
	LDA SHPFLG		;CHECK IF SHIP ALIVE
	AND AX,SHPMSK
	IFNE
	JSR SHPDRW
	LDA AX,SHPMSK
	EOR I,0FF
	AND I,0F0
	AND SHPFLG
	STA SHPFLG
	LDY PLAYER		;GET PLAYER INDEX
	LDA AY,NUMSHP		;TAKE A SHIP
	SEC
	SBC I,1
	STA AY,NUMSHP
	THEN
	THEN
	ELSE
20$:	LDA SAUFLG		;TURN OFF RAY
	AND I,80
	STA SAUFLG
	THEN
	THEN
	RTS

LFTLO:	.BYTE 0,80,0,80
LFTHI:	.BYTE -1,0,-1,0
RGTLO:	.BYTE 80,0,80,0
RGTHI:	.BYTE -1,1,-1,1
VRTBL:	.BYTE -1,-1,1,1
RAYLIM: .BYTE 0D,0D,0F4,0F4
	.PAGE
	.SBTTL PLANET BASES
	.SBTTL	DISPLAY KILL POINTS
;
;ENTRY: (X)=BASE NUMBER
;
KLLDRW:	PHY
	LDA BSKLLY		;GET Y COORDINATE
	STA BITMOY
	LDA BSKLLX		;GET X COORDINATE
	STA BITMOX
	LDA WAVNUM		;POINT TO STAMP
	CMP I,8			;MORE THAT 8?
	IFCS
	LDA I,7
	THEN
	ASL
	TAY
	LDA AY,KLLTBL
	STA STMPNT
	LDA AY,KLLTBL+1
	STA STMPNT+1
	LDA I,HUE3		;SET COLOR
	STA STPCLR
	JSR STAMP
	PLY
	RTS

KLLTBL:	.WORD HUN1,HUN2,HUN3,HUN4
	.WORD HUN5,HUN6,HUN7,HUN8
	.PAGE
	.SBTTL LASER ROUTINES
	.SBTTL	DRAW LASER BEAM
;
;ENTRY:	(X)=INDEX INTO BEAM TABLES, TEMP2=REPT COUNT
;
BEMPLT:	BEGIN
	LDA AX,BEMXLO		;NEXT HEAD LOCATION
	CLC
	ADC AX,BEMHVL
	STA AX,BEMXLO
	LDA AX,BEMXHI
	ADC AX,BEMHVH
	STA AX,BEMXHI
	STA BITMOX
	LDA AX,BEMYLO
	CLC
	ADC AX,BEMVVL
	STA AX,BEMYLO
	LDA AX,BEMYHI
	ADC AX,BEMVVH
	STA AX,BEMYHI
	STA BITMOY

	LDA BITDAT		;PLOT THE POINT
	EOR I,FLASH
	STA BITDAT

	LDA AX,BEMXHI		;HIT TARGET?
	SEC
	SBC AX,BEMTGX
	IFCC
	COMP
	THEN
	CMP I,2
	IFCC
	LDA AX,BEMYHI
	SEC
	SBC AX,BEMTGY
	IFCC
	COMP
	THEN
	CMP I,2
	IFCC
	LDA AX,BEMFLG		;FLAG TO FINISH
	ORA I,20
	STA AX,BEMFLG
	THEN
	THEN

	LDA AX,BEMFLG		;IS ERASE ACTIVE?
	AND I,40
	IFNE
10$:	LDA AX,BMEXLO		;NEXT TAIL LOCATION
	CLC
	ADC AX,BEMHVL
	STA AX,BMEXLO
	LDA AX,BMEXHI
	ADC AX,BEMHVH
	STA AX,BMEXHI
	STA BITMOX
	LDA AX,BMEYLO
	CLC
	ADC AX,BEMVVL
	STA AX,BMEYLO
	LDA AX,BMEYHI
	ADC AX,BEMVVH
	STA AX,BMEYHI
	STA BITMOY

	LDA BITDAT		;ERASE THE TAIL
	EOR I,FLASH
	STA BITDAT

	LDA AX,BEMFLG		;IS FINISH ACTIVE?
	AND I,20
	IFNE
	LDA AX,BMEXHI		;HIT TARGET?
	CMP AX,BEMXHI
	IFEQ
	LDA AX,BMEYHI
	CMP AX,BEMYHI
	IFEQ
	JSR DIDRW		;ERASE TARGET DIAMOND
	LDA I,1			;ACTIVATE CLOUD
	STA AX,CLDSIZ
	STA AX,CLDINC
	LDA X,BEMFLG		;CLEAR PLOT FLAG
	AND I,7F
	STA AX,BEMFLG
	RTS
	THEN
	THEN
	JMP 10$
	THEN

	THEN
	DEC TEMP2
	EQEND
	RTS
	.PAGE
	.SBTTL DRAW A CIRCLE
;
;ENTRY: (RADIUS)=CIRCLE RADIUS
;	(CIRX)=CIRCLE CENTER X COORDINATE
;	(CIRY)=  "       "   Y     "
;EXIT:	CIRCLE OUTPUT TO SCREEN
;
CIRCLE:	LDA RADIUS
	COMP
	STA NEGRAD
	LDA I,0
	STA OFFSET
	BEGIN
10$:	LDA RADIUS
	CMP OFFSET
	IFCC
	RTS
	THEN

	LDA CIRX
	CLC
	ADC RADIUS
	STA BITMOX
	LDA CIRY
	CLC
	ADC OFFSET
	STA TEMP1
	STA BITMOY
	JSR CIRPNT

	LDA CIRY
	SEC
	SBC OFFSET
	STA TEMP2
	STA BITMOY
	JSR CIRPNT

	LDA CIRX
	SEC
	SBC RADIUS
	STA BITMOX
	LDA TEMP1
	STA BITMOY
	JSR CIRPNT

	LDA TEMP2
	STA BITMOY
	JSR CIRPNT

	LDA CIRX
	CLC
	ADC OFFSET
	STA BITMOX
	LDA CIRY
	CLC
	ADC RADIUS
	STA TEMP1
	STA BITMOY
	JSR CIRPNT

	LDA CIRY
	SEC
	SBC RADIUS
	STA TEMP2
	STA BITMOY
	JSR CIRPNT

	LDA CIRX
	SEC
	SBC OFFSET
	STA BITMOX
	LDA TEMP1
	STA BITMOY
	JSR CIRPNT

	LDA TEMP2
	STA BITMOY
	JSR CIRPNT

	LDA NEGRAD
	CLC
	ADC OFFSET
	CLC
	ADC OFFSET
	CLC
	ADC I,1
	STA NEGRAD
	INC OFFSET
	ORA I,0
	PLEND
	IFEQ
	JMP 10$
	THEN
	STA TEMP1
	LDA RADIUS
	CLC
	ADC RADIUS
	STA TEMP2
	LDA TEMP1
	SEC
	SBC TEMP2
	CLC
	ADC I,2
	STA NEGRAD
	DEC RADIUS
	JMP 10$

;
; CHECKSUM #4
;
CKSUM4:	.BYTE CKSM4
	.PAGE
	.SBTTL	PLOT A POINT ON THE CIRCLE
CIRPNT:	LDA GSTATE		;CHECK IF ZOOMING
	CMP I,CZOOM
	IFNE
	LDA BITDAT
	EOR CIRCOL
	STA BITDAT
	ELSE
	LDA CIRCOL
	STA BITDAT
	INC BITMOX
	STA BITDAT
	INC BITMOY
	STA BITDAT
	DEC BITMOX
	STA BITDAT
	DEC BITMOY
	THEN
	RTS
	.PAGE
	.SBTTL EXPLOSION PLOTTING ROUTINES
	.SBTTL	ERASE LAST EXPLOTION
;
;ENTRY:	THE EXPLOSION TABLE MUST BE FILLED WITH
;	VALID HPOS & VPOS FOR ALL PARTICLES
;
EXPLT1:	LDY I,NPRTCL-1
	BEGIN
	LDA NY,XHPOS		;PLOT A POINT
	STA BITMOX
	LDA NY,XVPOS
	STA BITMOY
	POINT EXPCLR		;PLOT POINT
	DEY			;BUMP TABLE INDEX
	MIEND
	RTS
;
;THIS ROUTINE CALCULATES THE NEXT EXPLOSION FRONT AND PLOTS IT.
;
	.SBTTL	PLOT NEW EXPLOSION
EXPLT2:	LDY I,NPRTCL-1
	BEGIN
	LDA NY,XHPOS		;CALCULATE NEXT HPOS
	CLC
	ADC NY,XHDIR
	CMP I,04		;EDGE DETECTION
	IFCC
	LDA I,03
	ELSE
	CMP I,0FC
	IFCS
	LDA I,0FC
	THEN
	THEN
	STA NY,XHPOS
	STA BITMOX
	LDA NY,XVPOS		;CALCULATE NEXT VPOS
	CLC
	ADC NY,XVDIR
	CMP I,0D		;EDGE DETECTION
	IFCC
	LDA I,0C
	ELSE
	CMP I,0F5
	IFCS
	LDA I,0F5
	THEN
	THEN
	STA NY,XVPOS
	STA BITMOY
	POINT EXPCLR		;PLOT POINT
	DEY			;BUMP TABLE INDEX
	MIEND
	RTS
	.PAGE
	.SBTTL PLANET MISSILES
	.SBTTL	DRAW PLANET MISSILES
;
; ENTRY:	(A)=CURRENT MSLVTH
;
MSLDR1:	LDA I,HUE3
	STA MSLCOL
	JMP MSLENT
MSLDRW:	LDA I,HUE1
	STA MSLCOL
	LDA AX,MSLY
	STA BITMOY
	LDA AX,MSLX
	STA BITMOX
MSLENT:	LDA BITDAT
	EOR I,HUE2
	STA BITDAT
	DEC BITMOY
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT
	LDA BITMOY
	CLC
	ADC I,02
	STA BITMOY
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT
	DEC BITMOX
	DEC BITMOY
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT
	LDA BITMOX
	CLC
	ADC I,2
	STA BITMOX
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT
	RTS
	.PAGE
	.SBTTL MIRV DISPLAY
;
;ENTRY:	(X)=MISSILE INDEX
;
MRVDRW:	LDA I,1			;SET COCKTAIL
	BIT $COINS
	IFVC
	LDA I,-1
	THEN
	STA TEMP1
	LDA AX,MSLHZH		;SET UP COORDINATES
	SEC
	SBC TEMP1
	STA BITMOX
	LDA AX,MSLVTH
	SEC
	SBC TEMP1
	STA BITMOY
	LDAL MIRV
	STA STMPNT
	LDAH MIRV
	STA STMPNT+1
	JSR STAMP
	RTS
	.PAGE
	.SBTTL SATTILITE DISPLAY
;
;ENTRY: (X)=SATTILITE INDEX
;
SATDRW:	LDA I,5			;COCKTAIL
	BIT $COINS
	IFVC
	LDA I,-5
	THEN
	STA TEMP1
	LDA AX,SATX		;SET UP X & Y
	SEC
	SBC TEMP1
	STA BITMOX
	LDA AX,SATVRT
	SEC
	SBC TEMP1
	STA BITMOY
	LDAL SATLIT		;POINT TO STAMP
	STA STMPNT
	LDAH SATLIT
	STA STMPNT+1
	JSR STAMP		;WRITE IT
	RTS
	.PAGE
	.SBTTL DRAW THE FIREBALL
;
;ENTRY:	(X)=BALL INDEX
;
FIRDRW:	PHY
	LDA I,5			;COCKTAIL
	BIT $COINS
	IFVC
	LDA I,-5
	THEN
	STA TEMP1
	LDA X,FIRXHI		;SET UP DISPLAY
	SEC
	SBC TEMP1
	STA BITMOX
	LDA X,FIRYHI
	SEC
	SBC TEMP1
	STA BITMOY
	LDY X,FIRINX
	LDA X,FIRFLG		;STAR BALL?
	AND I,40
	IFEQ
	LDA AY,FIRBAL
	STA STMPNT
	LDA AY,FIRBAL+1
	STA STMPNT+1
	ELSE
	LDA AY,STRBAL
	STA STMPNT
	LDA AY,STRBAL+1
	STA STMPNT+1
	THEN
	JSR STAMP
	PLY
	RTS

FIRBAL:	.WORD FIRE0,FIRE1,FIRE2,FIRE3
STRBAL:	.WORD STAR0,STAR1,STAR2,STAR3
	.PAGE
	.SBTTL DRAW SCOUT SHIPS
;
;ENTRY:	(X)=SCOUT INDEX
;
SCTDRW:	LDA AX,SCTINX		;GET PICTURE INDEX
	ASL
	TAY
	TXA
	AND I,01		;CHOOSE ONE OF TWO SCOUTS
	IFEQ
	LDA X,SCT1X		;SET COCKTAIL
	STA TEMP1
	LDA X,SCT1Y
	STA TEMP2
	BIT $COINS
	IFVC
	COMP			;FLIP
	STA TEMP2
	LDA TEMP1
	COMP
	STA TEMP1
	THEN
	LDA AX,SCTXHI		;CENTER PICTURE
	SEC
	SBC TEMP1
	STA BITMOX
	LDA AX,SCTYHI
	SEC
	SBC TEMP2
	STA BITMOY

	LDA AY,SCTBL1		;SCOUT 1
	STA STMPNT
	LDA AY,SCTBL1+1
	STA STMPNT+1
	ELSE
	LDA X,SCT2X		;SET COCKTAIL
	STA TEMP1
	LDA X,SCT2Y
	STA TEMP2
	BIT $COINS
	IFVC
	COMP
	STA TEMP2
	LDA TEMP1
	COMP
	STA TEMP1
	THEN
	LDA AX,SCTXHI		;CENTER PICTURE
	SEC
	SBC TEMP1
	STA BITMOX
	LDA AX,SCTYHI
	SEC
	SBC TEMP2
	STA BITMOY

	LDA AY,SCTBL2		;SCOUT 2
	STA STMPNT
	LDA AY,SCTBL2+1
	STA STMPNT+1
	THEN

	JSR STAMP
	RTS

SCT1X:	.BYTE 01,02,02,03,05
SCT1Y:	.BYTE 01,01,01,02,03
SCT2X:	.BYTE 01,02,03,04,05
SCT2Y:	.BYTE 01,02,02,02,03
SCTBL1:	.WORD SCT1E,SCT1D,SCT1C,SCT1B,SCT1A
SCTBL2:	.WORD SCT2A,SCT2B,SCT2C,SCT2D,SCT2E
	.PAGE
	.SBTTL DISPLAY LIBERATOR RING
RING:	LDA I,30		;SET X & Y
	STA BITMOX
	LDA I,6C
	STA BITMOY
	LDAL LIBRNG		;POINT TO STAMP
	STA STMPNT
	LDAH LIBRNG
	STA STMPNT+1
	JSR STAMP
	RTS
	.PAGE
	.SBTTL DRAW THE LIBERATOR
LIBDSP:	LDA LIBX		;SET COODINATES
	STA BITMOX
	LDA LIBY
	STA BITMOY

	LDA I,1
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA BITMOY
	COMP
	STA BITMOY
	LDA BITMOX
	COMP
	STA BITMOX
	LDA I,-1
	THEN
	STA TEMP1

	LDY I,1			;DRAW THE BOX
	BEGIN
	LDX I,88.
	BEGIN
	LDA BITDAT
	EOR I,HUE5
	STA BITDAT
	LDA BITMOX
	CLC
	ADC TEMP1
	STA BITMOX
	DEX
	EQEND
	LDX I,88.
	BEGIN
	LDA BITDAT
	EOR I,HUE5
	STA BITDAT
	LDA BITMOY
	CLC
	ADC TEMP1
	STA BITMOY
	DEX
	EQEND
	LDA TEMP1
	COMP
	STA TEMP1
	DEY
	MIEND

	LDX I,4			;SET PICTURE COORDINATES
	ORA I,0
	IFMI
	LDX I,-4
	THEN
	STX TEMP1
	LDA BITMOX
	CLC
	ADC TEMP1
	STA BITMOX
	LDA BITMOY
	CLC
	ADC TEMP1
	STA BITMOY

	LDAL LIBER		;POINT TO STAMP
	STA STMPNT
	LDAH LIBER
	STA STMPNT+1
	JSR STAMP
	LDA I,0			;CLEAR OUR FLAG
	STA LIBFLG
	RTS
	.PAGE
	.SBTTL STAMP DISPLAY
;
;ENTRY:	BITMODE REGS POINT AT UPPER LEFT CORNER
;	STMPNT = ADDRESS OF STAMP
;
;EXIT:	X AND Y RESTORED
;
STAMP:	BIT $COINS		;COCKTAIL?
	BVC STAMPC		;YES, INVERT THE STAMP
	SAVEXY
	LDA BITMOX		;SAVE RIGHT COORDINATE
	STA SAVBMX
	LDY I,0			;Y IS INDEX
	LDA NY,STMPNT		;LOAD FIRST BYTE
	BEGIN
	STA STMPBF		;SAVE IN BUFFER
	AND I,0E0		;CHECK IF BACKRND
	IFNE
	LDA STMPBF		;A COLOR
	AND I,0F
	TAX			;GET LENGTH IN X
	BEGIN
	LDA BITDAT		;WRITE A PIXEL
	EOR STMPBF
	STA BITDAT
	INC BITMOX
	DEX
	EQEND
	ELSE
	LDA STMPBF		;SKIP LENGTH
	AND I,0F
	CLC
	ADC BITMOX
	STA BITMOX
	THEN
	LDA STMPBF		;CHECK FOR END OF LINE
	AND I,10
	IFNE
	LDA SAVBMX		;EOL..RESTORE LEFT POINTER
	STA BITMOX
	INC BITMOY		;NEXT LINE
	THEN
	CLC
	INY
	IFEQ
	INC STMPNT+1		;PAGE WRAP
	THEN
	LDA NY,STMPNT		;GET NEXT BYTE
	EQEND			;EXIT IF ZERO
	RESTXY
	RTS
	.PAGE
	.SBTTL	INVERTED STAMP DISPLAY
;
;ENTRY:	BITMODE REGS POINT AT LOWER RIGHT CORNER
;	STMPNT = ADDRESS OF STAMP
;
;EXIT:	X AND Y RESTORED
;
STAMPC:	SAVEXY
	LDA BITMOX		;SAVE RIGHT COORDINATE
	STA SAVBMX
	LDY I,0			;Y IS INDEX
	LDA NY,STMPNT		;LOAD FIRST BYTE
	BEGIN
	STA STMPBF		;SAVE IN BUFFER
	AND I,0E0		;CHECK IF BACKRND
	IFNE
	LDA STMPBF		;A COLOR
	AND I,0F
	TAX			;GET LENGTH IN X
	BEGIN
	LDA BITDAT		;WRITE A PIXEL
	EOR STMPBF
	STA BITDAT
	DEC BITMOX
	DEX
	EQEND
	ELSE
	LDA STMPBF		;SKIP LENGTH
	AND I,0F
	STA TEMP1
	LDA BITMOX
	SEC
	SBC TEMP1
	STA BITMOX
	THEN
	LDA STMPBF		;CHECK FOR END OF LINE
	AND I,10
	IFNE
	LDA SAVBMX		;EOL..RESTORE RIGHT POINTER
	STA BITMOX
	DEC BITMOY		;NEXT LINE
	THEN
	CLC
	INY
	IFEQ
	INC STMPNT+1		;PAGE WRAP
	THEN
	LDA NY,STMPNT		;GET NEXT BYTE
	EQEND			;EXIT IF ZERO
	RESTXY
	RTS
	.PAGE
	.SBTTL DISPLAY TABLE MESSAGE
;
;ENTRY:	(ACC)=MESSAGE CODE
;
;EXIT:	X&Y OK
;
TYPMSG:	PHA
	LDA I,40		;FLAG TYPER
	STA MSGFLG
	LDA I,0			;CLEAR PAUSE
	STA PAUSET
	PLA
TBLMSG:	STX SAVEX		;SAVE X & Y
	STY SAVEY
	TAY			;USE Y AS MESSAGE INDEX
	LDA AY,MSGVRT		;GET VERTICAL COORDINATE
	STA MESSY
	TYA
	ASL
	TAY			;CODE X2
	LDA AY,ENGLOC		;GET MESSAGE LOCATION
	STA MESAGE
	LDA AY,ENGLOC+1
	STA MESAGE+1
	LDA AY,ENGDAT		;GET H LOC
	STA MESSX
	LDA AY,ENGDAT+1		;GET COLOR
	STA TEMP1
	AND I,0F0
	STA STPCLR
	LDA TEMP1		;SET CHAR SET SELECTION
	AND I,10
	IFNE
	LDA I,80
	THEN
	STA MSGSET
	LDA TEMP1		;GET SPACING
	AND I,0F
	STA STPSPA
	BIT $COINS		;COCKTAIL?
	IFVC
	JSR REVRSE		;FLIP MESSAGE
	THEN
	JMP MESDSP

REVRSE:	LDA MESSX		;REVERSE MESSAGE COORDINATES
	COMP
	CLC
	ADC STPSPA
	STA MESSX
	LDA MESSY
	COMP
	CLC
	BIT MSGSET
	IFMI
	ADC I,5
	ELSE
	ADC I,8
	THEN
	STA MESSY
	LDA STPSPA
	COMP
	STA STPSPA
	RTS
	.PAGE
	.SBTTL MESSAGE DISPLAY
;
;ENTRY:	MESSX,MESSY = BIT MODE COORDINATES OF FIRST CHARACTER
;	MESAGE = ADDRESS OF ASCII STRING
;	STPCLR = COLOR OF MESSAGE
;
;EXIT:	MESSAGE OUTPUT TO SCREEN
;	ACC DESTROYED
;
MESENT:	BIT $COINS		;COCKTAIL?
	IFVC
	JSR REVRSE		;FLIP
	THEN

MESTYP:	BIT MSGFLG		;TYPING MESSAGE?
	IFVS
	LDA PAUSET		;YES, PAUSE OUT?
	IFNE
	DEC PAUSET		;NO, EXIT
	RTS
	THEN
	THEN

	STX SAVEX		;MESSAGE ENTRY POINT
	STY SAVEY

MESDSP:
	LDY I,0			;CHAR INDEX
	BEGIN
	LDA NY,MESAGE		;GET CHARACTER
	STA TEMP1
	JSR ASCSTP		;FIND STAMP LOCATION
	BIT MSGSET		;WHICH CHARACTER SET?
	IFPL
	JSR CHAR8		;OUTPUT CHARACTER
	ELSE
	JSR CHAR5
	THEN
	LDA MESSX
	CLC
	ADC STPSPA		;POINT TO NEXT CHARACTER
	STA MESSX
	BIT MSGFLG		;TYPING MESSAGE?
	IFVS
	INC MESAGE		;YES, BUMP POINTER
	IFEQ
	INC MESAGE+1
	THEN
	LDA I,3			;SET PAUSE
	STA PAUSET
	LDA TEMP1		;END OF MESSAGE?
	IFMI
	LDA I,0			;YES, CLEAR TYPE
	STA MSGFLG
	THEN
	JMP 10$
	THEN
	INY
	LDA TEMP1		;CHECK END
	MIEND
10$:	LDX SAVEX		;RESTORE REGS
	LDY SAVEY
	RTS

	.SBTTL	DISPLAY ONE LETTER
;
;ENTRY:	ACC=ASCII VALUE OF LETTER
;	(MESSX,MESSY)=COORDINATE OF DISPLAY
;	(STPCLR)=COLOR OF LETTER
;
LETOUT:	STX SAVEX
	JSR ASCSTP		;GET STAMP LOCATION
	LDX SAVEX
	BIT MSGSET		;WHICH CHAR SET?
	IFMI
	JSR DIGIT5
	LDA I,06
	BIT $COINS
	IFVC
	LDA I,-6
	THEN
	STA TEMP3
	LDA MESSX
	CLC
	ADC TEMP3
	ELSE
	JSR DIGIT8		;WRITE IT
	LDA I,0A
	BIT $COINS
	IFVC
	LDA I,-0A
	THEN
	STA TEMP3
	LDA MESSX
	CLC
	ADC TEMP3
	THEN
	STA MESSX
	RTS
	.PAGE
	.SBTTL	CONVERT ASCII VALUE TO STAMP LOCATION
;
;ENRTY: ACC = ASCII VALUE
;
;EXIT:  STMPNT(2) = ADDRESS OF STAMP
;	(X) IS DESTOYED
;
ASCSTP:	AND I,7F
	CMP I,41		;NUMBER OR LETTER?
	IFCS
	AND I,3F		;LETTER
	LDX I,2
	ELSE
	CMP I,30
	IFCC
	JMP 10$			;ILLEGAL CHARACTER OR BLANK
	THEN
	AND I,0F		;NUMBER
	LDX I,0
	THEN
	BIT MSGSET		;WHICH CHAR SET?
	IFPL
	ASL			;INDEX X 8
	ASL
	ASL
	CLC
	ADC AX,CBASE		;ADD TABLE BASE TO INDEX
	STA STMPNT
	LDA AX,CBASE+1
	ADC I,0
	STA STMPNT+1
	ELSE
	STA TEMP2
	ASL
	ASL
	CLC
	ADC TEMP2		;INDEX X 5
	CLC
	ADC AX,CBASE1
	STA STMPNT
	LDA AX,CBASE1+1
	ADC I,0
	STA STMPNT+1
	THEN
	RTS
10$:	LDAL BLANK		;BLANK CHARACTER
	STA STMPNT
	LDAH BLANK
	STA STMPNT+1
 	RTS
;
CBASE:	.WORD NUMBER,LETTER-8	;CHARACTER BASE TABLE
CBASE1:	.WORD LILNUM,LILETR-5	;SMALL CHARACTER SET
	.PAGE
	.SBTTL	HEX NUMBER OUTPUT
;
;ENTRY:	(ACC)=HEX NUMBER
;
HEXOUT:	STY SAVEY		;SAVE Y
	LDY I,1
	STA TEMP1
	AND I,0F0		;WORK ON HI NIBBLE
	LSR
	LSR
	LSR
	LSR
	BEGIN
	CMP I,0A		;OVER 9?
	IFCS
	SBC I,0A
	CLC
	ADC I,41		;COVERT TO ASCII
	ELSE
	CLC
	ADC I,30		;NUMBER TO ASCII
	THEN
	JSR LETOUT		;OUTPUT NUMBER
	LDA TEMP1
	AND I,0F
	DEY
	MIEND
	LDY SAVEY
	RTS
	.PAGE
	.SBTTL	8X8 MONO COLOR STAMP DISPLAY
;ENTRY: BITMODE REGS POINT AT LOWER RIGHT CORNER OF STAMP
;	STMPNT(2) = ADDRESS OF STAMP
;	STPCLR = COLOR OF STAMP
;
;EXIT:  CHARACTER OUTPUT TO SCREEN
;
CHAR8:  SAVEXY
	LDA MESSY		;INIT COORDINATES
	STA BITMOY
	LDA MESSX
	STA BITMOX
	STA SAVBMX		;SAVE RIGHT COORDINATE
	LDA I,1
	BIT $COINS		;COCKTAIL FLIP?
	IFVC
	LDA BITMOX		;YES, REVERSE IT
	SEC
	SBC I,7
	STA BITMOX
	STA SAVBMX
	LDA BITMOY
	SEC
	SBC I,7
	STA BITMOY
	LDA I,-1
	THEN
	STA TEMP3
	LDY I,7			;Y IS INDEX
	BEGIN
	LDA NY,STMPNT		;GET LINE PATTERN
	BEQ 10$			;SKIP A BLANK LINE
	LDX I,7
	BEGIN
	LSR			;SHIFT OUT A BIT
	PHA
	IFCS
	LDA BITDAT 		;WRITE PIXEL ON FLAG BIT
	EOR STPCLR
	STA BITDAT 
	THEN
	LDA BITMOX		;NEXT PIXEL
	SEC
	SBC TEMP3
	STA BITMOX
	PLA
	DEX
	MIEND
	LDA SAVBMX		;RESTORE RIGHT POINTER
	STA BITMOX
10$:	LDA BITMOY		;NEXT LINE
	SEC
	SBC TEMP3
	STA BITMOY
	DEY
	MIEND
	RESTXY
	RTS
	.PAGE
	.SBTTL	5X5 MONO COLOR STAMP DISPLAY
;ENTRY: BITMODE REGS POINT AT LOWER RIGHT CORNER OF STAMP
;	STMPNT(2) = ADDRESS OF STAMP
;	STPCLR = COLOR OF STAMP
;
;EXIT:  CHARACTER OUTPUT TO SCREEN
;
CHAR5:  SAVEXY
	LDA MESSY		;INIT COORDINATES
	STA BITMOY
	LDA MESSX
	STA BITMOX
	STA SAVBMX		;SAVE RIGHT COORDINATE
	LDA I,1
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA BITMOX
	SEC
	SBC I,4
	STA BITMOX
	STA SAVBMX
	LDA BITMOY
	SEC
	SBC I,4
	STA BITMOY
	LDA I,-1
	THEN
	STA TEMP3
	LDY I,4			;Y IS INDEX
	BEGIN
	LDA NY,STMPNT		;GET LINE PATTERN
	LSR
	LSR
	LSR
	BEQ 10$			;SKIP A BLANK LINE
	LDX I,4
	BEGIN
	LSR			;SHIFT OUT A BIT
	PHA
	IFCS
	LDA BITDAT 		;WRITE PIXEL ON FLAG BIT
	EOR STPCLR
	STA BITDAT 
	THEN
	LDA BITMOX		;NEXT PIXEL
	SEC
	SBC TEMP3
	STA BITMOX
	PLA
	DEX
	MIEND
	LDA SAVBMX		;RESTORE RIGHT POINTER
	STA BITMOX
10$:	LDA BITMOY		;NEXT LINE
	SEC
	SBC TEMP3
	STA BITMOY
	DEY
	MIEND
	RESTXY
	RTS
	.PAGE
	.SBTTL	8X8 DIGIT DISPLAY
;ENTRY: BITMODE REGS POINT AT LOWER RIGHT CORNER OF STAMP
;	STMPNT(2) = ADDRESS OF STAMP
;	STPCLR = COLOR OF STAMP
;
;EXIT:  DIGIT OUTPUT TO SCREEN
;
SCROUT:	CPX I,0			;LAST NUMBERS?
	IFNE
	LDA TEMP2		;NUMBER YET?
	IFEQ
	LDA TEMP1		;NO, WAS IT ZERO?
	IFEQ
	RTS			;YES, SKIP IT
	THEN
	STA TEMP2		;NO, TURN OFF FLAG
	THEN
	THEN

DIGIT8: SAVEXY
	LDA MESSY		;INIT COORDINATES
	STA BITMOY
	LDA MESSX
	STA BITMOX
	STA SAVBMX		;SAVE RIGHT COORDINATE
	LDA I,1
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA BITMOX
	SEC
	SBC I,7
	STA BITMOX
	STA SAVBMX
	LDA BITMOY
	SEC
	SBC I,7
	STA BITMOY
	LDA I,-1
	THEN
	STA TEMP3
	LDY I,7			;Y IS INDEX
	BEGIN
	LDA NY,STMPNT		;GET LINE PATTERN
	LDX I,7
	BEGIN
	LSR			;SHIFT OUT A BIT
	PHA
	IFCS
	LDA STPCLR 		;WRITE PIXEL ON FLAG BIT
	STA BITDAT 
	ELSE
	LDA I,0
	STA BITDAT		;WRITE BLANK
	THEN
	LDA BITMOX		;NEXT PIXEL
	SEC
	SBC TEMP3
	STA BITMOX
	PLA
	DEX
	MIEND
	LDA SAVBMX		;RESTORE RIGHT POINTER
	STA BITMOX
	LDA BITMOY		;NEXT LINE
	SEC
	SBC TEMP3
	STA BITMOY
	DEY
	MIEND
	RESTXY
	RTS
	.PAGE
	.SBTTL	5X5 DIGIT DISPLAY
;ENTRY: BITMODE REGS POINT AT LOWER RIGHT CORNER OF STAMP
;	STMPNT(2) = ADDRESS OF STAMP
;	STPCLR = COLOR OF STAMP
;
;EXIT:  DIGIT OUTPUT TO SCREEN
;
DIGIT5: SAVEXY
	LDA MESSY		;INIT COORDINATES
	STA BITMOY
	LDA MESSX
	STA BITMOX
	STA SAVBMX		;SAVE RIGHT COORDINATE
	LDA I,1
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA BITMOX
	SEC
	SBC I,4
	STA BITMOX
	STA SAVBMX
	LDA BITMOY
	SEC
	SBC I,4
	STA BITMOY
	LDA I,-1
	THEN
	STA TEMP3
	LDY I,4			;Y IS INDEX
	BEGIN
	LDA NY,STMPNT		;GET LINE PATTERN
	LSR
	LSR
	LSR
	LDX I,4
	BEGIN
	LSR			;SHIFT OUT A BIT
	PHA
	IFCS
	LDA STPCLR 		;WRITE PIXEL ON FLAG BIT
	STA BITDAT 
	ELSE
	LDA I,0
	STA BITDAT		;WRITE BLANK
	THEN
	LDA BITMOX		;NEXT PIXEL
	SEC
	SBC TEMP3
	STA BITMOX
	PLA
	DEX
	MIEND
	LDA SAVBMX		;RESTORE RIGHT POINTER
	STA BITMOX
	LDA BITMOY		;NEXT LINE
	SEC
	SBC TEMP3
	STA BITMOY
	DEY
	MIEND
	RESTXY
	RTS
	.PAGE
	.SBTTL UPDATE SCORE AND DISPLAY
;
;ENTRY: PLAYER=CURRENT PLAYER INDEX
;       TRIPLE=TRIPLE PRECISION SCORE TO BE ADDED TO PLAYER'S
;	SCOREL,M,H=PLAYER'S TOTAL SCORE
;
;EXIT:	TRIPLE CLEARED
;	SCOREL,M,H UPDATED
;	SCREEN UPDATED
;
SCORE:
	LDY PLAYER		;CURRENT PLAYER INDEX
SCORY:	JSR UPSCOR		;UPDATE SCORE
	LDA AY,SCOLCX		;GET STARTING X COORDINATE OF SCORE
	STA MESSX
	LDA I,SCOLIN
	STA MESSY
	LDA I,SCOCLR		;GIVE SCORE A COLOR
	STA STPCLR
	LDX I,2
SCORE1:	LDA I,8			;SPACING
	STA STPSPA
	STA MSGSET
	BIT $COINS		;COCKTAIL?
	IFVC
	JSR REVRSE		;YES, REVERSE COORDINATES
	THEN
	LDA I,0			;SET ZERO SUPPRESS FLAG
	STA TEMP2
	BEGIN
	LDA X,TRIPLE		;WORK ON HI NIBBLE
	AND I,0F0
	STA TEMP1
	LSR
	CLC
	ADC CBASE		;ADD INDEX TO TABLE BASE
	STA STMPNT
	LDA CBASE+1
	ADC I,0
	STA STMPNT+1
	JSR SCROUT		;OUTPUT A DIGIT
	LDA MESSX
	CLC
	ADC STPSPA		;NEXT DIGIT POSITION
	STA MESSX
	LDA X,TRIPLE		;WORK ON LO NIBBLE
	AND I,0F
	STA TEMP1
	ASL
	ASL
	ASL
	CLC
	ADC CBASE
	STA STMPNT
	LDA CBASE+1
	ADC I,0
	STA STMPNT+1
	JSR SCROUT
	LDA MESSX
	CLC
	ADC STPSPA
	STA MESSX
	DEX
	MIEND
	BIT $COINS		;SELF-TEST?
	IFMI
	LDA I,'0		;PUT IN FAKE ZERO
	JSR LETOUT
	THEN
	JSR CLRTRI		;CLEAR TRIPLE
	LDA I,0
	STA REQSCO		;ACKNOWLEDE SCORE REQUEST
	RTS
;
SCOLCX: .BYTE 28,0B0
	.PAGE
	.SBTTL	SCORE SUPPORT ROUTINES
	.SBTTL		CLEAR TRIPLE
CLRTRI: LDA I,0
	STA TRIPLE
	STA TRIPLE+1
	STA TRIPLE+2
	RTS
;
	.SBTTL		UPDATE SCORE
UPSCOR: LDA ATRACT
	IFPL
	JSR CLRTRI		;DON'T UPDATE IN ATTRACT
	THEN
	SED			;DECIMAL MODE
	LDA TRIPLE
	CLC
	ADC AY,SCOREL
	STA AY,SCOREL
	STA TRIPLE
	LDA TRIPLE+1
	ADC AY,SCOREM
	STA AY,SCOREM
	STA TRIPLE+1
	LDA TRIPLE+2
	ADC AY,SCOREH
	STA AY,SCOREH
	STA TRIPLE+2

	BIT ATRACT		;NO BONUS IN ATTRACT
	IFMI
	CMP AY,BONLVH		;SEE IF PAST BONUS LEVEL
	IFCS
	LDA TRIPLE+1
	CMP AY,BONLVM
	IFCS
	LDA AY,BONLVM		;YES, SET NEXT LEVEL
	CLC
	ADC BONINC
	STA AY,BONLVM
	LDA AY,BONLVH
	ADC I,0
	STA AY,BONLVH
	CLD			;BACK TO BINARY
	LDA AY,NUMLIV		;ADD ONE LIFE
	CMP I,MAXLIV		;NOT OVER MAX
	IFCC
	CLC
	ADC I,1
	STA AY,NUMLIV
	LDX I,1			;DRAW ONE MORE
	JSR LIVDRW
	LDA I,SBONUS		;BONUS SHIP SOUND
	JSR SNDON
	THEN
	THEN
	THEN

	CLD
	RTS
	.PAGE
	.SBTTL CLEAR SCREEN SUBROUTINE
CLEAR:	LDA I,40		;SET UP
	STA INDIR1		;SCREEN
	LDA I,03
	STA INDIR1+1
	LDX I,3A		;SET X=3A LOOPS
	LDA I,0			;CLEAR A
10$:	LDY I,0FF		;MAX Y
20$:	STA NY,INDIR1		;CLEAR SCREEN BYTE
	DEY
	BNE 20$			;LOOP 255
	INC INDIR1+1
	DEX
	BNE 10$			;LOOP 3A
	RTS
	.PAGE
	.SBTTL CURSOR ROUTINES
	.SBTTL	ACTIVATE CURSOR
;
;ENTRY:	(ACC) <0 FOR TBALL ENABLE
;
CURON:	PHA			;SAVE TBALL REQ
	LDA I,0
	STA TRKFLG		;DISABLE TBALL
	LDA I,80
	STA GUNX		;SET INIT COORDINATES
	STA GNOLDX
	LDA I,79
	STA GUNY
	STA GNOLDY
	JSR GNPLOT		;DRAW CURSOR
	LDA I,10		;LOAD COUNTER
	STA CTRLD
	LDA TBALL
	STA OLDTB
	LDA I,3			;INIT TRIGGER
	STA GNTRIG
	LDA I,0FF
	STA CURFLG		;TURN ON FLAG
	LDA I,0			;CLEAR LASER ENABLE
	STA LASFLG
	PLA			;DO TBALL
	STA TRKFLG
	RTS
	.SBTTL	DEACTIVATE CURSOR
CUROFF:	LDA CURFLG		;CURSOR ON?
	IFMI
	LDA I,0			;YES, TURN OFF
	STA CURFLG
	STA TRKFLG
	JSR GNRSTR
	THEN
	RTS
	.PAGE
	.SBTTL	COLOR ASSIGNMENTS
COLOR:	PHX			;SAVE REGS
	PHY
	LDA WAVNUM		;GET CURRENT WAVE
	ASL
	TAX
	JSR PCOLOR		;COLOR PLANET
	JSR MCOLOR		;COLOR BITMAP
	PLY			;RESTORE REGS
	PLX
	RTS

PCOLOR:	LDA GSTATE		;CHECK FOR SPACE MODE
	CMP I,CSPA1A
	IFEQ
	LDA I,80		;STOP BASES FLASHING
	STA BASFLS
	LDAL PBLACK		;SETUP BLACK PLANET
	STA INDIR1
	LDAH PBLACK
	STA INDIR1+1
	JMP 10$
	THEN
	LDA X,PLTTBL		;INDIRECT FOR PLANET
	STA INDIR1
	LDA X,PLTTBL+1
	STA INDIR1+1
10$:	LDY I,0F		;FILL PLANET COLOR REGS
	BEGIN
	LDA NY,INDIR1
	STA AY,PLTCOL
	DEY
	MIEND
	RTS

MCOLOR:	LDY I,7			;FILL BIT MAP COLOR REGS
	BEGIN
	LDA AY,MCOLR0
	STA AY,MAPCOL
	DEY
	MIEND
	LDA ATRACT		;TURN ON FLASH
	AND I,0DF
	STA ATRACT
	RTS

PLTTBL:	.WORD P1C0,P1C1,P1C2
	.WORD P1C3,P1C4,P1C5
	.WORD P2C0,P2C1,P2C2
	.WORD P2C3,P2C4,P2C5
	.WORD P1C6,P1C7,P1C8
	.WORD P2C6,P2C7,P2C8
	.WORD P1C9,P1C10,P1C11
	.WORD P2C9,P2C10,P2C11
	.WORD P1C0,P1C1,P1C7
	.WORD P2C6,P2C2,P2C1

PBLACK:	.REPT 10
	.BYTE 0FF
	.ENDR
P1C0:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;EARTH
	.BYTE 0CA,0DC,0EE,0FF,0F9,07F,000,0FF
P1C1:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;DARK GREEN
	.BYTE 0E6,0EC,0EB,0FF,0FD,0F6,0A4,0FF
P1C2:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;ICE
	.BYTE 0BD,050,000,0FF,092,018,022,0FF
P1C3:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;CHOCOLATE
	.BYTE 0BD,0DD,0D4,0FF,09C,0EE,0F7,0FF
P1C4:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;DARK BLUE
	.BYTE 0EE,07D,06B,0FF,0BF,0BF,0AF,0FF
P1C5:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;BLACK
	.BYTE 0EF,06E,01F,0FF,0BF,0FF,0A5,0FF
P1C6:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;ORANGE
	.BYTE 05A,0FC,0BF,0FF,0C3,0DD,09B,0FF
P1C7:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;GRAY
	.BYTE 0FD,093,082,0FF,09C,0AD,0F7,0FF
P1C8:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;GREEN
	.BYTE 0BF,0D2,0DE,0FF,0EE,0FD,0BE,0FF
P1C9:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;TAN
	.BYTE 0A4,0D4,0C3,0FF,08B,09C,0BD,0FF
P1C10:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;RED
	.BYTE 0CF,0AD,083,0FF,0DD,0EF,0BB,0FF
P1C11:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;LIGHT BLUE
	.BYTE 09C,07F,03F,0FF,0BF,06B,049,0FF
P2C0:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,09C,0FF	;ORANGE
	.BYTE 0DD,0CC,0FF,0C4,094,0E7,08B,0FF
P2C1:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,010,0FF	;DARK ICE
	.BYTE 059,07B,0FF,0AF,067,0AD,072,0FF
P2C2:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FC,0FF	;GREEN
	.BYTE 0FB,0E4,0FF,092,0BC,0DC,0ED,0FF
P2C3:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,000,0FF	;LIGHT ICE
	.BYTE 010,011,0FF,01A,01B,05B,019,0FF
P2C4:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0C1,0FF	;ORANGE
	.BYTE 0C2,0C3,0FF,0E5,0E6,0C6,0C4,0FF
P2C5:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FE,0FF	;GREEN
	.BYTE 0FD,0FB,0FF,0AB,0F2,0BB,0FC,0FF
P2C6:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0F7,0FF	;RED
	.BYTE 0EF,0DF,0FF,0DE,0D5,0D6,0E7,0FF
P2C7:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0BF,0FF	;BLUE
	.BYTE 07F,06C,0FF,0A4,0A5,063,07D,0FF
P2C8:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0DD,0FF	;BROWN
	.BYTE 0E6,093,0FF,0ED,0A4,0E5,0EE,0FF
P2C9:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,07E,0FF	;LIGHT BLUE
	.BYTE 07D,0BF,0FF,03D,0BE,0FE,07C,0FF
P2C10:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0EF,0FF	;RED
	.BYTE 0E7,09F,0FF,097,0C7,0A5,0DF,0FF
P2C11:	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,0FF	;BLACK & BLUE
	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,03F,0FF

MCOLR0:	.BYTE BLACK,WHITE,R0&B0,RED0
	.BYTE R0&G3,0CD,R3&G2&B0,01C
	.PAGE
	.SBTTL	TURN ON PLANET
PLTON:	LDA WAVNUM
	ASL
	TAX
	JSR PCOLOR
	LDA I,0
	STA BASFLS
	RTS

	.SBTTL	TURN OFF PLANET
PLTOFF:	LDA I,80		;STOP BASES FLASHING
	STA BASFLS
	LDAL PBLACK		;SETUP BLACK PLANET
	STA INDIR1
	LDAH PBLACK
	STA INDIR1+1
	LDY I,0F		;FILL PLANET COLOR REGS
	BEGIN
	LDA NY,INDIR1
	STA AY,PLTCOL
	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL GRAPHICS
	.SBTTL	VERTICAL COORDINATE TABLE
MSGVRT:	.BYTE 026
	.BYTE 030
	.BYTE 038
	.BYTE 0F0
	.BYTE 0E4
	.BYTE 038
	.BYTE 038
	.BYTE 030
	.BYTE 030
	.BYTE 0D0
	.BYTE 040
	.BYTE 030
	.BYTE 040
	.BYTE 084
	.BYTE 0D0
	.BYTE 0F4
	.BYTE 028
	.BYTE 030
	.BYTE 038
	.BYTE 030
	.BYTE 038
	.BYTE 018
	.BYTE 020
	.BYTE 030
	.BYTE 018
	.BYTE 030
	.BYTE 018
	.BYTE 0AE
	.BYTE 0B8
	.BYTE 0C0
	.BYTE 0C8
	.BYTE 0D0
	.BYTE 0D8
	.BYTE 0E0
	.BYTE 011
	.BYTE 0D0
	.BYTE 0E0
	.BYTE 050
	.BYTE 020
	.BYTE 028
	.BYTE 030
	.BYTE 0D8
	.BYTE 030
	.BYTE 038
	.BYTE 068
	.BYTE 071
	.BYTE 072
	.BYTE 071
	.BYTE 07A
	.BYTE 07B
	.BYTE 0A8
	.BYTE 0B0
	.BYTE 0B8
	.BYTE 0C8
	.BYTE 026
	.BYTE 046
	.BYTE 066
	.BYTE 086
	.BYTE 070
	.BYTE 0C0
	.BYTE 0C0
	.BYTE 0A0
	.BYTE 0A8
	.BYTE 060
	.BYTE 070
	.BYTE 078
	.BYTE 080
	.BYTE 050
	.BYTE 060
	.BYTE 080
	.BYTE 080
	.BYTE 098
	.BYTE 098
	.BYTE 020
	.BYTE 020
	.BYTE 080
	.BYTE 088
	.BYTE 090
	.BYTE 038
	.BYTE 048
	.BYTE 050
	.BYTE 060
	.BYTE 068
	.BYTE 0E0
	.BYTE 0E8
	.BYTE 0D8
	.BYTE 0C8
	.BYTE 0C8
	.BYTE 0DA
	.BYTE 0DA
	.BYTE 0DA
	.BYTE 0DA
	.BYTE 058
	.BYTE 068
	.BYTE 070
	.BYTE 080
	.BYTE 080
	.BYTE 098
	.BYTE 0A8
	.BYTE 0B0
	.BYTE 0B8
	.PAGE
	.SBTTL	ENGLISH MESSAGE TABLE
ENGLOC:	.WORD JOIN
	.WORD AFORC
	.WORD IN
	.WORD CPR
	.WORD CRDT
	.WORD ONEPLR
	.WORD TWOPLR
	.WORD PLR1
	.WORD PLR2
	.WORD PRESS
	.WORD OVER
	.WORD BONMSG
	.WORD HISCOR
	.WORD MLVL
	.WORD BONX
	.WORD TRGTS
	.WORD INS1A
	.WORD INS1B
	.WORD INS1C
	.WORD INS2A
	.WORD INS2B
	.WORD RAMOK
	.WORD MAPOK
	.WORD ROMS
	.WORD OP1
	.WORD OP2
	.WORD BITERR
	.WORD SWICH
	.WORD STRT1
	.WORD STRT2
	.WORD FIRSW
	.WORD SHELD
	.WORD COINL
	.WORD COINR
	.WORD FLTSZ
	.WORD SEL1
	.WORD SEL2
	.WORD TIME
	.WORD SEL3A
	.WORD SEL3B
	.WORD SEL3C
	.WORD BONAW
	.WORD TXT1A
	.WORD TXT1B
	.WORD TXT2A
	.WORD TXT2B
	.WORD TXT2C
	.WORD TXT2D
	.WORD TXT2E
	.WORD TXT2F
	.WORD TXT3A
	.WORD TXT3B
	.WORD TXT3C
	.WORD NXBON
	.WORD EAR1
	.WORD EAR2
	.WORD EAR3
	.WORD EAR4
	.WORD EBAD
	.WORD ECLR
	.WORD ECLRB
	.WORD FROM
	.WORD CHMP
	.WORD SPA1
	.WORD SPA2
	.WORD SPA3
	.WORD SPA4
	.WORD END1
	.WORD END2
	.WORD END3
	.WORD END4
	.WORD END5
	.WORD END6
	.WORD SPLR1
	.WORD SPLR2
	.WORD INI1
	.WORD INI2
	.WORD INI3
	.WORD INI4
	.WORD INI5
	.WORD INI6
	.WORD INI7
	.WORD INI8
	.WORD INI9
	.WORD INI10
	.WORD NOBON
	.WORD CKTL
	.WORD UPRT
	.WORD COIN1
	.WORD COIN2
	.WORD COIN3
	.WORD COIN4
	.WORD FIR1
	.WORD FIR2
	.WORD FIR3
	.WORD FIR4
	.WORD ROOK
	.WORD LES1A
	.WORD LES1B
	.WORD LES1C
	.WORD LES1D
	.PAGE
	.SBTTL	ENGLISH DATA TABLE
L	=00
S	=10
.MACRO	MSGDAT HLOC,COLOR,CSET,SPACE
	.BYTE HLOC
	.BYTE COLOR!CSET!SPACE
.ENDM

ENGDAT:	MSGDAT 6E,HUE6,S,06
	MSGDAT 69,HUE7,S,06
	MSGDAT 7D,HUE6,S,06
	MSGDAT 4C,HUE2,L,0A
	MSGDAT 60,HUE6,L,08
	MSGDAT 60,HUE4,L,08
	MSGDAT 40,HUE4,L,08
	MSGDAT 62,HUE2,L,0A
	MSGDAT 62,HUE2,L,0A
	MSGDAT 52,HUE3,L,0A
	MSGDAT 5C,HUE3,L,0A
	MSGDAT 58,HUE3,L,0A
	MSGDAT 58,HUE3,L,0A
	MSGDAT 60,HUE1,L,0A
	MSGDAT 60,HUE2,L,0A
	MSGDAT 5C,HUE5,S,06
	MSGDAT 41,HUE7,S,06
	MSGDAT 41,HUE3,S,06
	MSGDAT 41,HUE3,S,06
	MSGDAT 41,HUE4,S,06
	MSGDAT 41,HUE4,S,06
	MSGDAT 18,HUE3,S,06
	MSGDAT 18,HUE3,S,06
	MSGDAT 18,HUE3,S,06
	MSGDAT 0A0,HUE3,S,06
	MSGDAT 0A0,HUE3,S,06
	MSGDAT 10,HUE3,L,08
	MSGDAT 18,HUE3,S,06
	MSGDAT 20,HUE3,S,06
	MSGDAT 20,HUE3,S,06
	MSGDAT 20,HUE3,S,06
	MSGDAT 20,HUE3,S,06
	MSGDAT 20,HUE3,S,06
	MSGDAT 20,HUE3,S,06
	MSGDAT 1E,HUE4,S,06
	MSGDAT 29,HUE2,S,06
	MSGDAT 3B,HUE3,S,06
	MSGDAT 0AE,HUE5,S,06
	MSGDAT 1E,HUE7,S,06
	MSGDAT 0C,HUE7,S,06
	MSGDAT 12,HUE7,S,06
	MSGDAT 2B,HUE3,L,0A
	MSGDAT 35,HUE2,S,06
	MSGDAT 3B,HUE2,S,06
	MSGDAT 47,HUE3,S,06
	MSGDAT 21,HUE3,S,06
	MSGDAT 3B,HUE5,L,08
	MSGDAT 97,HUE3,S,06
	MSGDAT 32,HUE3,S,06
	MSGDAT 88,HUE1,L,08
	MSGDAT 38,HUE4,S,06
	MSGDAT 32,HUE4,S,06
	MSGDAT 32,HUE4,S,06
	MSGDAT 39,HUE6,S,06
	MSGDAT 4D,HUE4,S,06
	MSGDAT 47,HUE4,S,06
	MSGDAT 53,HUE4,S,06
	MSGDAT 53,HUE4,S,06
	MSGDAT 5D,HUE3,L,0A
	MSGDAT 47,HUE2,S,06
	MSGDAT 3E,HUE2,S,06
	MSGDAT 1C,HUE7,S,06
	MSGDAT 1C,HUE6,S,06
	MSGDAT 9E,HUE3,S,06
	MSGDAT 7D,HUE4,S,06
	MSGDAT 7D,HUE4,S,06
	MSGDAT 8C,HUE4,S,06
	MSGDAT 7D,HUE5,S,06
	MSGDAT 54,HUE1,L,08
	MSGDAT 66,HUE5,S,06
	MSGDAT 88,HUE3,L,08
	MSGDAT 60,HUE5,S,06
	MSGDAT 88,HUE2,L,08
	MSGDAT 0A0,HUE2,S,06
	MSGDAT 0A0,HUE2,S,06
	MSGDAT 0C,HUE6,S,06
	MSGDAT 3C,HUE7,S,06
	MSGDAT 27,HUE1,S,06
	MSGDAT 88,HUE3,S,06
	MSGDAT 85,HUE4,S,06
	MSGDAT 79,HUE4,S,06
	MSGDAT 76,HUE5,S,06
	MSGDAT 7C,HUE5,S,06
	MSGDAT 3E,HUE2,S,06
	MSGDAT 53,HUE3,S,06
	MSGDAT 42,HUE3,L,0A
	MSGDAT 0B0,HUE3,L,08
	MSGDAT 0B0,HUE3,L,08
	MSGDAT 6B,HUE7,S,06
	MSGDAT 50,HUE7,S,06
	MSGDAT 53,HUE7,S,06
	MSGDAT 50,HUE7,S,06
	MSGDAT 78,HUE4,S,06
	MSGDAT 78,HUE5,S,06
	MSGDAT 78,HUE7,S,06
	MSGDAT 78,HUE5,S,06
	MSGDAT 65,HUE5,S,06
	MSGDAT 50,HUE4,S,06
	MSGDAT 47,HUE6,S,06
	MSGDAT 41,HUE6,S,06
	MSGDAT 32,HUE6,S,06
	.PAGE
	.SBTTL	8X8 CHARACTER SET
NUMBER:
	.BYTE 000,038,044,0C6,0C6,0C6,044,038	;"0" (ZERO)
	.BYTE 000,030,070,030,030,030,030,0FC	; 1
	.BYTE 000,07C,0C6,00E,03C,078,0E0,0FE	; 2
	.BYTE 000,07E,00C,018,03C,006,0C6,07C	; 3
	.BYTE 000,01C,03C,06C,0CC,0FE,00C,00C	; 4
	.BYTE 000,0FC,0C0,0FC,006,006,0C6,07C	; 5
	.BYTE 000,03C,060,0C0,0FC,0C6,0C6,07C	; 6
	.BYTE 000,0FE,0C6,00C,018,030,030,030	; 7
	.BYTE 000,078,0C4,0E4,078,09E,086,07C	; 8
	.BYTE 000,07C,0C6,0C6,07E,006,00C,078	; 9 (NINE) 
	.BYTE 0,0,0,30,30,0,30,30	;COLON
	.BYTE 000,03C,042,099,091,099,042,03C	;COPYRIGHT

LETTER:	.BYTE 000,038,06C,0C6,0C6,0FE,0C6,0C6	; "A"
	.BYTE 000,0FC,0C6,0C6,0FC,0C6,0C6,0FC	; B
	.BYTE 000,03C,066,0C0,0C0,0C0,066,03C	; C
	.BYTE 000,0F8,0CC,0C6,0C6,0C6,0CC,0F8	; D
	.BYTE 000,0FC,0C0,0C0,0F8,0C0,0C0,0FC	; E
	.BYTE 000,0FE,0C0,0C0,0FC,0C0,0C0,0C0	; F
	.BYTE 000,03E,060,0C0,0CE,0C6,066,03E	; G
	.BYTE 000,0C6,0C6,0C6,0FE,0C6,0C6,0C6	; H
	.BYTE 000,0FC,030,030,030,030,030,0FC	; I
	.BYTE 000,006,006,006,006,006,0C6,07C	; J
	.BYTE 000,0C6,0CC,0D8,0F0,0F8,0DC,0CE	; K
	.BYTE 000,0C0,0C0,0C0,0C0,0C0,0C0,0FC	; L
	.BYTE 000,0C6,0EE,0FE,0FE,0D6,0C6,0C6	; M
	.BYTE 000,0C6,0E6,0F6,0FE,0DE,0CE,0C6	; N
	.BYTE 000,07C,0C6,0C6,0C6,0C6,0C6,07C	; O
	.BYTE 000,0FC,0C6,0C6,0C6,0FC,0C0,0C0	; P
	.BYTE 000,07C,0C6,0C6,0C6,0DE,0CC,07A	; Q
	.BYTE 000,0FC,0C6,0C6,0CE,0F8,0DC,0CE	; R
	.BYTE 000,07C,0C6,0C0,07C,006,0C6,07C	; S
	.BYTE 000,0FC,030,030,030,030,030,030	; T
	.BYTE 000,0C6,0C6,0C6,0C6,0C6,0C6,07C	; U
	.BYTE 000,0C6,0C6,0C6,0EE,06C,038,010	; V
	.BYTE 000,0C6,0C6,0D6,0FE,0FE,0EE,0C6	; W
	.BYTE 00,0C6,0EE,7C,38,7C,0EE,0C6	; X
	.BYTE 000,0CC,0CC,0CC,078,030,030,030	; Y
	.BYTE 000,0FE,00E,01C,038,070,0E0,0FE	; Z

BLANK: 	.BYTE 0,0,0,0,0,0,0,0			;BLANK
	.PAGE
	.SBTTL	5X5 CHARACTER SET

LILNUM:	.BYTE 0F8,0D8,0D8,0D8,0F8		;0
	.BYTE 060,020,020,020,0F8		;1
	.BYTE 0F8,098,030,060,0F8		;2
	.BYTE 0F8,018,078,018,0F8		;3
	.BYTE 0D0,0D0,0F8,010,010		;4
	.BYTE 0F0,080,0F8,018,0F8		;5
	.BYTE 0F0,080,0F8,098,0F8		;6
	.BYTE 0F8,098,018,018,018		;7
	.BYTE 0F8,098,0F8,098,0F8		;8
	.BYTE 0F8,098,0F8,018,018		;9
	.BYTE 000,020,000,020,000		;COLON
	.BYTE 040,040,040,000,040

LILETR:	.BYTE 0F8,0C8,0F8,0C8,0C8		;A
	.BYTE 0F8,098,0F0,098,0F8		;B
	.BYTE 0F8,0C8,0C0,0C0,0F8		;C
	.BYTE 0F0,0C8,0C8,0C8,0F0		;D
	.BYTE 0F8,0C0,0E0,0C0,0F8		;E
	.BYTE 0F8,0C0,0E0,0C0,0C0		;F
	.BYTE 0F8,0C0,0D8,0C8,0F8		;G
	.BYTE 0C8,0C8,0F8,0C8,0C8		;H
	.BYTE 0F8,020,020,020,0F8		;I
	.BYTE 078,030,030,0B0,0F0		;J
	.BYTE 098,0B0,0E0,0B0,098		;K
	.BYTE 0C0,0C0,0C0,0C0,0F8		;L
	.BYTE 088,0D8,0F8,0A8,088		;M
	.BYTE 0C8,0E8,0B8,098,088		;N
	.BYTE 0F8,0C8,0C8,0C8,0F8		;O
	.BYTE 0F8,0C8,0F8,0C0,0C0		;P
	.BYTE 0F8,088,088,098,0F8		;Q
	.BYTE 0F8,0C8,0F8,0D0,0D0		;R
	.BYTE 0F8,0C0,0F8,018,0F8		;S
	.BYTE 0F8,020,020,020,020		;T
	.BYTE 0C8,0C8,0C8,0C8,0F8		;U
	.BYTE 088,088,0D8,070,020		;V
	.BYTE 088,0A8,0F8,0D8,088		;W
	.BYTE 088,050,020,050,088		;X
	.BYTE 088,0D8,070,020,020		;Y
	.BYTE 0F8,018,030,060,0F8		;Z
	.PAGE
	.SBTTL	ENGLISH MESSAGES
JOIN:	.ASCIN /JOIN THE/
AFORC:	.ASCIN /TARI   ORCE/
IN:	.ASCIN /IN:/
CPR:	.ASCIN /; 1982 ATARI/
CRDT:	.ASCIN /CREDITS:/
ONEPLR:	.ASCIN /ONE PLAYER/
TWOPLR:	.ASCIN /ONE OR TWO PLAYERS/
PLR1:	.ASCIN /PLAYER 1/
SPLR1	=PLR1
PLR2:	.ASCIN /PLAYER 2/
SPLR2	=PLR2
PRESS:	.ASCIN /PRESS START/
OVER:	.ASCIN /GAME OVER/
BONMSG: .ASCIN /BONUS:/
HISCOR:	.ASCIN /HI SCORES:/
MLVL:	.ASCIN /LEVEL:/
BONX:	.ASCIN /BONUS X/
TRGTS:	.ASCIN /ENEMY BASES:/
INS1A:	.ASCIN /YOUR MISSION:/
INS1B:	.ASCIN /SHOOT RED FLASHING/
INS1C:	.ASCIN /MISSILE BASES ON PLANET/
INS2A:	.ASCIN /PROTECT SHIPS FROM/
INS2B:	.ASCIN /ONCOMING MISSILES/
RAMOK:	.ASCIN /RAM OK/
MAPOK:	.ASCIN /BIT MAP OK/
ROMS:	.ASCIN /ROMS:/
OP1:	.ASCIN /GAME OPTION:/
OP2:	.ASCIN /COIN OPTION:/
BITERR:	.ASCIN /BIT MAP ERROR/
SWICH:	.ASCIN /SWITCHES/
STRT1:	.ASCIN /START1:/
STRT2:	.ASCIN /START2:/
FIRSW:	.ASCIN /FIRE:/
SHELD:	.ASCIN /SHIELD:/
COINL:	.ASCIN /COIN L:/
COINR:	.ASCIN /COIN R:/
FLTSZ:	.ASCIN /FLEET SIZE:/
SEL1:	.ASCIN /PRESS FIRE TO ADVANCE ONE LEVEL/
SEL2:	.ASCIN /PRESS START TO BEGIN GAME/
TIME:	.ASCIN /TIME LEFT:/
SEL3A:	.ASCIN /BONUS AWARD/
SEL3B:	.ASCIN /FOR LIBERATING/
SEL3C:	.ASCIN /THREE PLANETS/
BONAW:	.ASCIN /BONUS AWARD:/
TXT1A:	.ASCIN /THE GALAXY HAS BEEN INVADED/
TXT1B:	.ASCIN /BY THE EVIL MALAGLON ARMY/
TXT2A:	.ASCIN /COMMANDER CHAMPION OF/
;
; CHECKSUM #5
;
CKSUM5:	.BYTE CKSM5
;
TXT2B:	.ASCIN /THE/
TXT2C:	.ASCIN /ATARI FORCE/
TXT2D:	.ASCIN /HAS CHOSEN YOU/
TXT2E:	.ASCIN /TO BECOME THE/
TXT2F:	.ASCIN /LIBERATOR/
TXT3A:	.ASCIN /THE PEOPLE OF THE UNIVERSE/
TXT3B:	.ASCIN /ARE DEPENDING ON YOU TO FREE/
TXT3C:	.ASCIN /THEM FROM THEIR EVIL MASTERS/
NXBON:	.ASCIN /NEXT BONUS SHIP AT:/
EAR1:	.ASCIN /AVERAGE GAME TIME:/
EAR2:	.ASCIN /AVERAGE GAME SCORE:/
EAR3:	.ASCIN /ONE PLAYER GAMES:/
EAR4:	.ASCIN /TWO PLAYER GAMES:/
EBAD:	.ASCIN /EAROM BAD/
ECLR:	.ASCIN /CLEARING ENTIRE EAROM/
ECLRB:	.ASCIN /CLEARING BOOKEEPING DATA/
FROM:	.ASCIN /MESSAGE FROM/
CHMP:	.ASCIN /COMMANDER CHAMPION/
SPA1:	.ASCIN /WARNING;/
SPA2:	.ASCIN /LONG RANGE SCANNERS/
SPA3:	.ASCIN /DETECT ENEMY SCOUTS/
SPA4:	.ASCIN /IN YOUR SECTOR/
END1:	.ASCIN /FOR/
END2:	.ASCIN /ADVANCED GAME/
END3:	.ASCIN /HOLD/
END4:	.ASCIN /FIRE/
END5:	.ASCIN /PRESS/
END6:	.ASCIN /START/
INI1	=CHMP
INI2:	.ASCIN /TO/
INI3	=TXT2F
INI4:	.ASCIN /CONGRATULATIONS;/
INI5:	.ASCIN /YOU ARE AMONG THE/
INI6:	.ASCIN /MIGHTIEST OF WARRIORS/
INI7:	.ASCIN /ENTER YOUR INITIALS IN/
INI8:	.ASCIN /OUR MASTER COMPUTER/
INI9:	.ASCIN /SPIN TRAK BALL TO CHANGE/
INI10:	.ASCIN /PRESS FIRE TO SET/
NOBON:	.ASCIN /NO BONUS AWARD/
CKTL:	.ASCIN /COCKTAIL/
UPRT:	.ASCIN /UPRIGHT/
COIN1:	.ASCIN /FREE PLAY/
COIN2:	.ASCIN /2 PLAYS PER CREDIT/
COIN3:	.ASCIN /1 PLAY PER CREDIT/
COIN4:	.ASCIN /2 CREDITS PER PLAY/
OK:	.ASCIN /OK/
BAD:	.ASCIN /BAD/
FIR1:	.ASCIN /TECHNICAL REPORT:/
FIR2:	.ASCIN /NEXT PLANET LAUNCHES/
FIR3:	.ASCIN /DEADLY FIREBALLS/
FIR4:	.ASCIN /HIT 4 TIMES TO DESTROY/
ROOK:	.ASCIN /HEY ROOKIE;/
LES1A:	.ASCIN /TRAINING LESSON 1:/
LES1B:	.ASCIN /CONCENTRATE FIREPOWER/
LES1C:	.ASCIN /ON PLANET MISSILE BASES/
LES1D:	.ASCIN /TO EASILY DESTROY YOUR ENEMY/
	.END
                                                                                                                                                                                                                                                                                                                                                           