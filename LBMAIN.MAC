	.PAGE
	.INCLUDE LBCOMN
	.INCLUDE LBDCLM
	.TITLE LBMAIN - MAINLINE CODE
	.=08000
	.ASECT
	.PAGE
	.SBTTL GLOBAL DEFINITIONS
;
; EXTERNAL ENTRY POINTS
;
	.GLOBL IRQXIT
	.GLOBL SNDON,INISOU
	.GLOBL CLEAR,MESENT,DIGIT8,TBLMSG,TYPMSG,MESTYP
	.GLOBL LETOUT,HEXOUT
	.GLOBL GNPLOT,GNRSTR
	.GLOBL DIMOND,XHAIR,CIRCLE
	.GLOBL BEMPLT,EXPLT1,EXPLT2
	.GLOBL SAUERS,SAUDRW,STRDRW,SHPDRW,LIVDRW,SATDRW
	.GLOBL MSLDRW,MSLDR1,KLLDRW,MRVDRW,FIRDRW,SCTDRW
	.GLOBL DTHRAY,SHPEXP,RING,LIBDSP
	.GLOBL DIDRW,WRBOOK,REHIIN,WRHIIN,EAZBOO
	.GLOBL CURON,CUROFF,PLTON,PLTOFF
	.GLOBL COLOR,MCOLOR,SCORE,SCORY,SCORE1,CLRTRI
	.GLOBL REVRSE
;
; EXTERNAL VARIABLES AND CONSTANTS
;
	.GLOBL POINT,SFIRE,SEXPLO,SDRAY,SSHP,STICK
	.GLOBL SWARN,SENGN,SOUT,SMIRV,SCOM
	.GLOBL CBASE
	.GLOBL BASUVV,BASUHV,BASLVV,BASLHV
	.GLOBL BSUVAL,BSUHAL,BSUVAR,BSUHAR
	.GLOBL BSLVAL,BSLHAL,BSLVAR,BSLHAR
	.GLOBL BASXLO,BASXHI,BASLLO,BASLHI
	.GLOBL BASLAT,BASCLR,BASLOC
	.GLOBL $$CRDT,$CMODE,$COINS
	.GLOBL EAFLG,EAREQU
	.GLOBL CKSM0,CKSM1,CKSM2
;
; ENTRY POINTS DEFINED HERE
;
	.GLOBL RESET,MAIN,INIT
;
; CONSTANTS DEFINED HERE
;
	.GLOBL SHPMSK,RNGCOL
	.PAGE
	.SBTTL MAINLOOP
MAIN:	INC FRAME		;FRAME COUNTER
	IFEQ
	INC FRAME+1
	THEN
	JSR EXSTAT		;SELECT GAME STATE
	JSR ALWAYS		;NON-STATE DEPENDENT CODE
	RTS
	.PAGE
	.SBTTL BACKROUND ROUTINES
BCKRND:	LDA BCKFRM		;DO "TIMED" ROUTINES
	IFEQ
	JSR EXPLOD		;DRAW EXPLOSION
	LDA I,2			;SET FRAME TIMER
	STA BCKFRM
	THEN

	LDA ATRACT		;NO SHIELD IN ATRACT
	IFMI
	JSR BCKSHD		;DRAW SHIELD
	JSR ERSHLD		;ERASE SHIELD ON COLLISION
	THEN

	LDA LIBFLG		;LIBERATOR REQ?
	IFMI
	JSR LIBDSP
	THEN

	JMP BCKRND		;LOOP TILL INTERRUPT
	.PAGE
	.SBTTL INITIALIZING ROUTINE
INIT:	LDX I,0FF		;SET UP STACK POINTER
	TXS
	LDA I,0
	TAX
	BEGIN
	STA ZX,0		;CLEAR PAGE ZERO
	STA X,100		;CLEAR PAGE ONE
	STA X,200		;CLEAR PAGE TWO
	STA X,300		;CLEAR PAGE THREE
	STA X,3D00		;CLEAR HIGH RAM
	STA X,3E00
	STA X,3F00
	DEX
	EQEND
	STA PLTSEL		;FIRST PLANET

	LDX I,0F
	BEGIN
	STA X,BASES		;FLASH BASES
	DEX
	MIEND

	JSR INISOU		;INIT POKEY
	JSR INIINI		;INITIALIZE HI SCORE TABLE
	JSR COLOR		;TURN ON COLORS
	LDA I,HUE3
	STA CURCLR
	LDA I,0FF		;DISABLE SHIELD ERASE
	STA SHPNUM		;DISABLE BONUS SHIP
	
	LDA I,CINIT1		;WAIT FOR EAROM
	STA NSTATE
	LDA I,PSEC
	STA PAUSET
	LDA I,CPAUSE
	STA GSTATE
	CLI			;ENABLE INTERRUPTS
	JMP BCKRND		;DO BACKROUND LOOP

	.SBTTL	READ IN EAROM
INIT1:	JSR CLEAR		;CLEAR SCREEN
	JSR REHIIN		;READ IN EAROM
	LDA I,CINIT2		;WAIT FOR IT
	STA GSTATE
	RTS

	.SBTTL	CHECK FOR CLEAR EAROM
INIT2:	LDA EAFLG		;ENTER IF EAROM NOT ACTIVE
	ORA EAREQU
	IFNE
	RTS
	THEN

	LDA SCRBUF+8		;WAS EAROM CLEAR?
	IFEQ
	JSR INIINI		;YES, INITIALIZE TABLE
	JSR WRHIIN		;AND WRITE IN EAROM
	THEN
	LDA I,CEND		;GOTO GAME NOW
	STA GSTATE
	RTS
	.PAGE
	.SBTTL EXECUTE GAME STATE
EXSTAT: LDX GSTATE
	LDA X,SETUP+1
	PHA
	LDA X,SETUP
	PHA
	RTS
;
;GAME STATES
;
SETUP:	STATE INIT1,CINIT1	;READ IN EAROM
	STATE INIT2,CINIT2	;CHECK EAROM
	STATE NEWGAM,CNEWGA	;NEW GAME
	STATE NEWAVE,CNEWAV	;NEXT WAVE
	STATE PLTINI,CPLTIN	;INITIALIZE PLANET WAVE
	STATE LEVEL,CLEVEL	;SHOW CURRENT WAVE LEVEL
	STATE PLAY1,CPLAY1	;PLAY MODE 1
	STATE PLAY2,CPLAY2	;PLAY MODE 2
	STATE PLAY3,CPLAY3	;PLAY MODE 3
	STATE PLAY4,CPLAY4	;PLAY MODE 4
	STATE PLAY5,CPLAY5
	STATE ATTR0A,CATR0A	;ATTRACT PHASE 0A
	STATE ATTR0B,CATR0B	;ATTRACT PHASE 0B
	STATE ATTR1,CATTR1	;ATTRACT PHASE1
	STATE ATTR2A,CATR2A	;ATTRACT MODE PHASE 2A
	STATE ATTR2B,CATR2B	;ATTRACT MODE PHASE 2B
	STATE START,CSTART	;PRESS START MODE
	STATE ENDGAM,CEND	;END OF GAME
	STATE PAUSE,CPAUSE	;PAUSE STATE
	STATE BONUS,CBONUS	;BONUS ROUND
	STATE HISCHK,CHISCH	;UPDATE HI SCORE TABLE
	STATE GETINI,CGETIN	;GET INITIALS FOR HI SCORE
	STATE HITBL,CHITBL	;DISPLAY HI SCORE TABLE
	STATE SPAC1A,CSPA1A	;DEEP SPACE INIT
	STATE SPAC1B,CSPA1B	;SHIP TICK OFF
	STATE SPAC2A,CSPA2A	;SHOW LIBERATOR IN SPACE
	STATE SPAC2B,CSPA2B	;PAUSE WITH STARS
	STATE SPAC2C,CSPA2C	;WAIT FOR LIB ERASE
	STATE SPACE3,CSPA3	;DEEP SPACE PLAY
	STATE ZOOMER,CZOOM	;ZOOM SEQUENCE
	STATE SELCT1,CSEL1	;LEVEL SELECT INIT
	STATE SELCT2,CSEL2	;LEVEL SELECT
	STATE ADVGAM,CADVGA	;ADVANCED GAME MESSAGE
	STATE LES1A,CLES1A	;LESSON 1 INIT
	STATE LES1B,CLES1B	;LESSON 1 EXIT
	.PAGE
	.SBTTL ALWAYS DO THESE ROUTINES
ALWAYS:	LDA ATRACT		;NO SCORES IN ATTRACT
	IFMI
	LDA SYNC		;FRAME OVERRUN?
	IFEQ			;NO...
	LDA REQSCO		;UPDATE SCORE REQUEST?
	IFNE
	JSR SCORE
	THEN
	THEN
	THEN
	JSR CKSTRT		;CHECK IF START PRESSED
	RTS
	.PAGE
	.SBTTL	CHECK IF START PRESSED
CKSTRT:	LDA ATRACT		;ATTRACT MODE?
	IFMI
	LDA I,0
	JMP 5$
	THEN
	LDA $$CRDT		;ANY CREDITS?
	IFEQ
	LDA I,10		;TURN OFF LEDS
5$:	STA ST1LED
	STA ST2LED
	RTS			;NO, EXIT
	THEN

	LDA BLINK1		;BLINK TIMER OUT?
	IFEQ
	LDA BLINKS		;GET SHADOW
	EOR I,10
	STA BLINKS
	LDA $$CRDT		;HOW MANY CREDITS?
	CMP I,2
	LDA BLINKS
	IFCC
	STA ST1LED		;FLASH START1
	ELSE
	STA ST1LED		;FLASH BOTH
	STA ST2LED
	THEN
	STA BLINKS		;SAVE SHADOW
	LDA I,10		;SET BLINK TIMER
	STA BLINK1
	THEN
	DEC BLINK1

	LDA $$CRDT		;NOW, CHECK IF START PRESSED
	LDX I,0
	CMP I,2
	IFCC
	LDA STRTSW
	AND I,START1
	IFEQ
10$:	DEC $$CRDT		;TAKE ONE CREDIT
	LDX I,1			;SET NUMBER OF PLAYERS
	THEN
	ELSE
	LDA STRTSW		;2+ CREDITS
	AND I,START1		;ONE PLAYER?
	BEQ 10$
	LDA STRTSW		;TWO PLAYERS?
	AND I,START2
	IFEQ
	DEC $$CRDT		;TAKE TWO CREDITS
	DEC $$CRDT
	LDX I,2			;SET NUMBER OF PLAYERS
	THEN
	THEN

	TXA
	IFNE
	STA NUMPLR		;SET NUMBER OF PLAYERS
	LDY I,0
	LDA $COINS		;AUX COIN?
	AND I,01
	IFEQ
	LDY I,80		;YES, MARKETING MODE
	THEN
	STY MKMODE

	LDY I,80		;SET PLAYER ACTIVE FLAGS
	LDA FIRE		;FIRE BUTTON DOWN?
	AND I,08
	IFEQ
	LDY I,0C0		;ACTIVE & SELECT
	THEN
	DEX
	BEGIN
	STY X,PLRFLG
	DEX
	MIEND

	LDA I,80		;NO ATTRACT
	STA ATRACT
	LDA I,CNEWGA		;GOTO NEW GAME
	STA GSTATE
	THEN
	RTS
	.PAGE
	.SBTTL SETUP NEW GAME
NEWGAM:	JSR CLRTBL		;CLEAR PLAYER TABLES

	LDA I,40		;SLOW PLANET
	STA PLTLO
	LDA I,0
	STA PLTHI

	JSR CUROFF		;TURN OFF CURSOR

	STA PKSCN1		;REQUEST SCAN
	LDA PKSW1		;READ SWITCH PORT
	STA TEMP1
	LDY NUMPLR		;LOOP FOR BOTH PLAYERS
	DEY
	BEGIN
	LDA TEMP1		;GET INDEX
	AND I,03
	TAX
	LDA X,LIVTBL		;SET NUMBER OF LIVES
	STA AY,NUMLIV
	LDA I,0			;CLEAR NUMBER OF SHIPS
	STA AY,NUMSHP
	LDA TEMP1		;SET BONUS LEVEL
	AND I,0C
	LSR
	LSR
	TAX
	LDA X,BONTBL
	STA BONINC
	STA AY,BONLVM
	LDA I,00
	STA AY,BONLVH
	DEY
	MIEND
	LDA TEMP1		;SET DIFFICULTY
	AND I,30
	ORA MKMODE
	STA MKMODE

	JSR INISOU		;RE-CONFIGURE POKEY

	LDA I,08		;SET SWITCH MASKS
	STA LASMSK
	LDA I,04
	STA SHDMSK

	LDA I,CNEWAV		;GOTO NEW WAVE
	STA GSTATE
	RTS

LIVTBL:	.BYTE 04,05,06,08
BONTBL:	.BYTE 15,20,25,30

	.SBTTL	CLEAR TABLES TO BEGIN
CLRTBL:	LDA I,0
	LDX I,MAXPLR-1		;CLEAR SCORES
	BEGIN
	STA X,SCOREL
	STA X,SCOREM
	STA X,SCOREH
	DEX
	MIEND
	JSR CLRTRI		;CLEAR TRIPLE
	STA BONBUF		;CLEAR BONUS BUFFER
	STA BONBUF+1

	STA WAVNUM		;WAVE 0
	STA PLAYER		;PLAYER 1
	STA SHPFLG		;NO SHIPS SHOWING
	STA PLRWAV		;BOTH START AT WAVE 0
	STA PLRWAV+1
	DEC PLRWAV+1		;FAKE START
	STA PLRLVL
	STA PLRLVL+1
	DEC PLRLVL+1
	STA BMBMOD		;NO EXTRA MIRVS PLEASE
	STA BMBMOD+1

CLRTB1:	LDX I,MAXEXP-1		;CLEAR EXPLOSION TABLES
	BEGIN
	STA X,EXPFLG
	DEX
	MIEND

CLRBAS:	LDX I,MAXBAS-1		;CLEAR BASE TABLES
	LDY I,MAXBAS-1
	LDA PLTNUM
	AND I,10
	IFNE
	LDY I,2*MAXBAS-1
	THEN
	BEGIN
	LDA AY,BASCLR
	STA X,BASES
	LDA I,0
	STA X,BASFLG
	DEY
	DEX
	MIEND
	STA BASNUM
	STA MSGFLG

	RTS
	.PAGE
	.SBTTL NEW GAME WAVE SET-UP
NEWAVE:	LDX PLAYER		;LEVEL SELECTED YET?
	LDA X,PLRFLG
	AND I,40
	IFNE
	LDA I,CSEL1		;NO, GOTO LEVEL SELECT
	STA GSTATE
	RTS
	THEN

	LDX WAVNUM		;GET WAVE INDEX
	LDA X,PSPDLO		;SET PLANET SPEED
	STA PLTLO
	LDA X,PSPDHI
	STA PLTHI

	TXA			;REVERSE?
	LSR
	IFCS
	LDA I,0			;YES
	SEC
	SBC PLTLO
	STA PLTLO
	LDA I,0
	SBC PLTHI
	STA PLTHI
	THEN

	LDA X,MODE		;GET NEXT MODE
	STA GSTATE

NEWAV1:	JSR CLEAR		;CLEAR SCREEN
	JSR COLOR		;NEXT COLOR CHANGE

	LDX WAVNUM		;GET WAVE NUMBER
	LDA X,SELTBL		;WHICH PLANET?
	STA PLTSEL
	STA PLTNUM		;SHADOW

	JSR DSPSCO		;DISPLAY SCORES

	JSR CLRBAS		;CLEAR BASES

	LDA I,60		;INIT LIVES POINTER
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,-60
	THEN
	STA LIVPNT
	LDA I,0			;CLEAR PAUSE TIMER
	STA PAUSET
	STA LASMAX		;CLEAR LASER MAX

	LDX I,SHDSIZ-1
	BEGIN
	LDA X,SHDTBL		;FILL SHIELD RADIUS TABLE
	STA X,RADTBL
	DEX
	MIEND
	LDA I,0			;CLEAR SHIELD FLAG REG
	STA SHDFLG
	RTS

MODE:	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN
	.BYTE CSPA1A,CPLTIN,CPLTIN

SELTBL:	.BYTE 00,00,080,00,00,080
	.BYTE 10,10,090,10,10,090
	.BYTE 00,00,080,10,10,090
	.BYTE 00,00,080,10,10,090
	.BYTE 00,00,080,10,10,090

PSPDLO:	.BYTE 40,40,40,40,40,40
	.BYTE 40,40,40,40,40,40
	.BYTE 00,00,00,00,00,00
	.BYTE 00,00,00,00,00,00
	.BYTE 00,00,00,00,00,00

PSPDHI:	.BYTE 00,00,00,00,00,00
	.BYTE 00,00,00,00,00,00
	.BYTE 01,01,01,01,01,01
	.BYTE 01,01,01,01,01,01
	.BYTE 01,01,01,01,01,01
	.PAGE
	.SBTTL DIAL-A-PLANET INIT
SELCT1:	JSR CLEAR		;CLEAR SCREEN
	LDA I,0			;FIRST PLANET
	STA WAVNUM
	LDY PLAYER
	STA AY,PLRWAV
	STA AY,PLRLVL
	STA PLTSEL
	JSR COLOR		;SHOW CORRECT COLORS
	JSR LVLDSP		;SHOW LEVEL

	LDA I,60		;SET LIVES POINTER
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,-60
	THEN
	STA LIVPNT
	LDX PLAYER		;DRAW BONUS SHIPS
	LDA X,NUMLIV
	TAX
	JSR LIVDRW
	LDA I,MFLTSZ		;"FLEET SIZE"
	JSR TBLMSG

	LDA I,MSEL1		;"SELECT YOUR LEVEL..."
	JSR TBLMSG
	LDA I,MSEL2
	JSR TBLMSG
	LDA I,MTIME		;"TIME LEFT"
	JSR TBLMSG
	LDA I,20.		;SET TIMER
	STA PAUSET
	JSR TIMDSP		;DISPLAY TIMER
	LDA I,MSEL3A		;"BONUS AWARD..."
	JSR TBLMSG
	LDA I,MSEL3B
	JSR TBLMSG
	LDA I,MSEL3C
	JSR TBLMSG
	JSR SELBON		;BONUS POINTS
	LDA I,0FF		;SET DE-BOUNCE FLAG
	STA SWFLG
	LDA I,0
	STA LASFLG
	LDA I,CSEL2		;WAIT FOR PLAYER
	STA GSTATE
	RTS
	.PAGE
	.SBTTL	DIAL-A-PLANET LEVEL SELECT
SELCT2:	LDA FRAME		;DEC TIMER
	AND I,3F
	IFEQ
	DEC PAUSET
	IFEQ
	JMP 20$			;TIME OUT, PLAY THE GAME
	THEN
	JSR TIMDSP		;DISPLAY TIMER CHANGE
	THEN

	LDA FIRE		;FIRE BUTTON PUSHED?
	AND LASMSK
	IFNE
	JMP 10$			;NOPE
	THEN

	BIT LASFLG
	IFVC
	JMP 10$			;NOT DE-BOUNCED
	THEN
	STA LASFLG		;CLEAR DE-BOUNCE

	LDY PLAYER
	JSR LVLNUM		;ERASE LAST LEVEL NUMBER
	LDA AY,PLRWAV		;MOVE UP 3 WAVES
	CLC
	ADC I,3
	CMP I,MAXWAV-6		;OVER MAX?
	IFCS
	LDA I,60		;ERASE ALL EXTRA LIVES
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,-60
	THEN
	STA LIVPNT
	LDX AY,NUMLIV
	JSR LIVDRW
	LDA I,60		;RESET POINTER
	BIT $COINS
	IFVC
	LDA I,-60
	THEN
	STA LIVPNT
	STA PKSCN1		;GET INIT NUMBER OF LIVES
	LDA PKSW1
	AND I,03
	TAX
	LDA X,LIVTBL
	SEC
	SBC I,1
	STA AY,NUMLIV
	TAX
	JSR LIVDRW		;DRAW NEW LIVES
	LDA I,0			;WAVE 0
	THEN
	STA AY,PLRWAV
	STA AY,PLRLVL
	STA WAVNUM
	TAX
	LDA X,SELTBL		;GET CORRECT PLANET
	STA PLTSEL
	LDA X,PSPDLO		;PLANET SPEED
	STA PLTLO
	LDA X,PSPDHI
	STA PLTHI

	JSR COLOR		;NEW PLANET COLOR
	JSR LVLNUM		;DRAW NEW LEVEL NUMBER
	JSR SELBON		;BONUS POINTS

	LDA AY,NUMLIV		;ONE MORE SHIP
	CMP I,8			;NOT MORE THAN 8
	IFCC
	CLC
	ADC I,1
	STA AY,NUMLIV
	LDX I,1			;DRAW IT
	JSR LIVDRW
	THEN
	LDA I,STICK		;SOUND
	JSR SNDON
	RTS

10$:	LDA SWFLG		;CHECK DE-BOUNCE
	IFEQ
	LDA STRTSW		;ANY START PRESSED?
	AND I,START1!START2
	EOR I,START1!START2
	IFNE
20$:	LDY PLAYER
	LDA AY,PLRWAV		;GOTO THAT LEVEL
	STA WAVNUM
	IFEQ
	LDA I,80		;NO BONUS
	ELSE
	LDA I,0A0		;BONUS FLAG
	THEN
	STA AY,PLRFLG
	SED
	LDA BONBUF		;SAVE PLAYER'S BONUS AWARD
	SEC
	SBC I,30		;BUMP BACK TO LAST BONUS
	STA AY,PLRBOM
	LDA BONBUF+1
	SBC I,00
	STA AY,PLRBOH
	CLD
	LDA I,0			;CLEAR BONUS BUFFER
	STA BONBUF
	STA BONBUF+1
	LDY I,0
	LDA $COINS		;AUX COIN PUSHED?
	AND I,01
	IFEQ
	LDY I,80		;YES, MARKETING MODE
	THEN
	TYA
	ORA MKMODE
	STA MKMODE

	LDA I,CNEWAV		;GOTO NEWAVE
	STA GSTATE
	THEN
	THEN
	LDA STRTSW		;DE-BOUNCE
	AND I,START1!START2
	EOR I,START1!START2
	STA SWFLG
	RTS
	.PAGE
	.SBTTL	LEVEL SELECT TIMER DISPLAY
TIMDSP:	LDA PAUSET		;DISPLAY PAUSE TIMER
	JSR BINACI		;CONVERT TO ASCII
	LDA I,0EA		;SETUP DISPLAY LOCATION
	STA MESSX
	STA MSGSET		;SMALL CHARS
	LDA I,50
	STA MESSY
	LDA I,6
	STA STPSPA
	BIT $COINS		;COCKTAIL?
	IFVC
	JSR REVRSE
	THEN
	LDA I,HUE5
	STA STPCLR
	LDA COUNT1		;OUTPUT TIMER
	JSR LETOUT
	LDA COUNT2
	JSR LETOUT
	RTS
	.PAGE
	.SBTTL	DISPLAY BONUS AWARD LEVEL
;
;ENTRY:	(Y)=PLAYER INDEX
;
SELBON:	LDA WAVNUM		;CLEAR BONUS ON WAVE 0
	IFEQ
	STA BONBUF
	STA BONBUF+1
	STA MSGSET
	LDA I,68		;CLEAR BONUS SCORE AREA
	STA MESSX
	LDA I,29
	STA MESSY
	LDA I,8
	STA STPSPA
	LDA I,2
	BIT $COINS		;COCKTAIL?
	IFVC
	JSR REVRSE
	LDA I,-2
	THEN
	STA COUNT1
	LDX I,7
	BEGIN
	LDA I,20		;BLANKS
	JSR LETOUT
	SEC
	SBC COUNT1
	STA MESSX
	DEX
	MIEND
	THEN
	LDA I,0
	STA TRIPLE
	LDA BONBUF+1		;MOVE BONUS TO TRIPLE
	STA TRIPLE+2
	LDA BONBUF
	STA TRIPLE+1
	SED
	CLC
	ADC I,30		;NEXT BONUS
	STA BONBUF
	LDA TRIPLE+2
	ADC I,00
	STA BONBUF+1
	CLD
	LDA I,68		;SET DISPLAY LOCATION
	STA MESSX
	LDA I,29
	STA MESSY
	LDA I,HUE6
	STA STPCLR
	LDX I,2
	JSR SCORE1
	RTS
	.PAGE
	.SBTTL INITIALIZE PLANET WAVES
PLTINI:	LDX WAVNUM		;WAVE NUMBER IN INDEX
	LDA X,NUMTBL		;GET NUMBER OF BASES TO DISPLAY
	STA TEMP1
	STA BASNUM
	BEGIN
10$:	LDA RANDOM		;SELECT RANDOM BASES
	AND I,0F
	STA TEMP2
	LDA WAVNUM		;NO POLAR BASES ON WAVE 1
	IFEQ
	LDA TEMP2
	CMP I,0
	IFEQ
	JMP 10$
	THEN
	CMP I,0F
	IFEQ
	JMP 10$
	THEN
	THEN
	LDY TEMP2
	LDA AY,BASFLG		
	IFMI
	JMP 10$			;BASE WAS ALREADY SELECTED
	THEN
	LDA I,80		;TURN ON THE BASE
	STA AY,BASFLG
	LDA I,0
	STA AY,BASES
	DEC TEMP1
	EQEND
	STA BASFLS
	STA BASHIT
	JSR GETMST		;TURN ON MASTER BASE

	LDA I,CLEVEL		;GOTO LEVEL DISPLAY
	STA GSTATE

PLTIN1:	JSR SATINI		;INIT SATTILITE
	JSR SAUINI		;INIT SAUCER
	JSR MSLINI		;INIT MISSILES

	JSR FLEET		;DRAW WHOLE FLEET

	LDA I,0F0
	STA BSDEAD		;NO KILL POINTS DISPLAYED

	LDA I,MTRGTS		;"ENEMY BASES"
	JSR TBLMSG

	LDA I,HUE7		;SET UP TARGET NUMBER
	STA STPCLR
	LDA I,06
	STA STPSPA
	JSR TRGNM1		;WRITE FIRST TARGET NUMBER

	LDA I,0			;SET PAUSE TIMER
	STA PAUSET
	STA MSGFLG
	RTS

NUMTBL: .BYTE 04,04,05		;PROGRESSIVE NUMBER OF BASES
	.BYTE 06,06,07
	.BYTE 08,08,09
	.BYTE 0A,0A,0B
	.BYTE 0C,0C,0D
	.BYTE 0E,0E,0F
	.BYTE 10,10,10
	.BYTE 10,10,10
	.BYTE 10,10,10
	.BYTE 10,10,10
	.PAGE
	.SBTTL	ROUTINE INITIALIZATION
;
;ENTRY (X)=WAVE NUMBER
;
SAUINI:	LDA I,0			;CLEAR ACTIVE FLAG
	STA SAUFLG
	LDA I,14		;SET DISPLAY TIMER
	STA SAUTM1
	LDA X,SAUTBL		;SET SPEED
	STA SAUSPD
	LDA X,SAUWIN		;SET WINDOW BOUNDARY
	STA SAULIM
	RTS

SAUTBL:	.BYTE 00,03,01		;SAUCER SPEEDS
	.BYTE 00,01,01
	.REPT 3*8
	.BYTE 00
	.ENDR
SAUWIN:	.BYTE 00,60,50		;SAUCER X BOUNDARY
	.BYTE 00,50,48
	.BYTE 48,44,44
	.BYTE 40,40,3C
	.BYTE 3A,3A,38
	.BYTE 38,38,38
	.BYTE 38,38,38
	.BYTE 38,38,38
	.BYTE 38,38,38
	.BYTE 38,38,38
;
;ENTRY (X)=WAVE NUMBER
;
SATINI:	LDA X,SSPDTB		;SET SPEED
	STA SATIM1
	LDA X,FIRTBL		;SET MAX FIREBALLS
	STA FIRMAX

	LDY I,MAXSAT-1
	LDA I,0
	BEGIN
	STA AY,SATFLG		;CLEAR FLAG TABLE
	STA AY,FIRFLG
	DEY
	MIEND
	STA SATNUM
	STA SMLMAX
	STA SMLNUM
	STA FIRNUM
	LDY PLAYER		;ENABLE STAR DEATH BALLS
	LDA AY,PLRLVL
	CMP I,MAXWAV
	LDY I,0
	IFCS
	LDY I,1
	CMP I,MAXWAV+12.
	IFCS
	LDY I,2
	THEN
	THEN
	STY STRNUM
	LDA I,0C		;SET DELAY TIMER
	STA SATTMR
	RTS

SSPDTB:	.BYTE 07,07,07		;SATTILITE SPEEDS
	.BYTE 03,03,01
	.BYTE 00,00,00
	.BYTE 00,00,00
	.BYTE 01,01,01
	.BYTE 00,00,00
	.BYTE 01,01,01
	.BYTE 00,00,00
	.BYTE 00,00,00
	.BYTE 00,00,00
FIRTBL:	.BYTE 00,00,00		;NUMBER OF FIREBALLS
	.BYTE 00,00,00
	.BYTE 01,01,01
	.BYTE 01,01,01
	.BYTE 00,00,00
	.BYTE 02,02,02
	.BYTE 00,00,00
	.BYTE 02,02,02
	.BYTE 00,00,00
	.BYTE 02,02,02
;
;ENTRY (X)=WAVE NUMBER
;
MSLINI:	LDA X,NMSLMX		;SET MAXIMUM MISSILES
	STA MSLMAX
	LDA X,SPDTBL		;SET MISSILE SPEED
	STA MSLTIM
	LDA MKMODE		;CHECK DIFFICULTY
	AND I,20
	IFNE
	DEC MSLTIM		;HARD
	ELSE
	LDA MKMODE
	AND I,10
	IFNE
	INC MSLTIM		;EASY
	THEN
	THEN

	LDY PLAYER
	LDA X,MRVTBL		;SET NUMBER OF MIRVS
	CLC
	ADC AY,BMBMOD		;HI GAME MODIFIER
	STA BMBMAX

	LDY I,MAXBMB-1		;CLEAR MIRV TABLE
	LDA I,0
	BEGIN
	STA AY,MRVFLG
	DEY
	MIEND

	LDY I,MAXMSL-1		;CLEAR MISSILE TABLE
	BEGIN
	STA AY,MSLFLG
	DEY
	MIEND

	STA MSLNUM		;CLEAR CURRENT NUMBER
	STA BMBNUM		;CLEAR MIRV NUMBER
	RTS

NMSLMX:	.BYTE 04,04,05		;MAX NUMBER OF MISSILES
	.BYTE 03,04,04
	.BYTE 05,06,03
	.BYTE 04,05,03
	.BYTE 04,04,03
	.BYTE 04,05,03
	.BYTE 05,06,04
	.BYTE 05,04,05
	.BYTE 05,04,03
	.BYTE 05,06,05
SPDTBL:	.BYTE 05,03,03		;MISSILE SPEEDS
	.BYTE 05,04,03
	.BYTE 03,03,02
	.BYTE 02,02,01
	.BYTE 03,03,02
	.BYTE 02,02,01
	.BYTE 02,02,01
	.BYTE 02,01,01
	.BYTE 03,02,01
	.BYTE 02,02,01
MRVTBL:	.BYTE 00,00,00		;MAX NUMBER OF MIRVS
	.BYTE 03,04,04
	.BYTE 00,00,00
	.BYTE 01,01,01
	.BYTE 00,00,00
	.BYTE 00,00,00
	.BYTE 01,01,01
	.BYTE 01,01,01
	.BYTE 00,01,00
	.BYTE 00,01,01
	.PAGE
	.SBTTL	SELECT MASTER BASE
;
;ENTRY:	(X)=WAVE NUMBER
;
GETMST:	LDA X,PLAYS		;NEED MASTER BASE?
	CMP I,CPLAY4
	IFNE
	CMP I,CPLAY5
	IFNE
	LDA I,0			;NOPE
	STA MSTRBS
	RTS
	THEN
	THEN

	LDA RANDOM		;CHOOSE MASTER BASE
	AND I,3
	CLC
	ADC I,6
	STA MSTRBS
	TAY
	LDA AY,BASFLG		;FLAG IT
	ORA I,20
	STA AY,BASFLG
	LDA I,1			;FLASH COLOR
	STA AY,BASES
	LDA I,60		;SET THREAT NUMBER
	STA THREAT
	LDA I,0			;CLEAR LAUNCH COUNTER
	STA BASLAU
	RTS
	.PAGE
	.SBTTL	SHOW LEVEL, PLAYER AND PAUSE
LEVEL:	LDA PAUSET		;TIMER SET?
	IFNE			;NO, DISPLAY MESSAGE
	JMP 10$			;YES, DISPLAY SHIPS
	THEN

	LDY PLAYER		;TELL WHO'S TO PLAY
	IFEQ
	LDA I,MPLR1		;"PLAYER 1"
	JSR TBLMSG
	ELSE
	LDA I,MPLR2		;"PLAYER 2"
	JSR TBLMSG
	THEN

	JSR LVLDSP		;DISPLAY LEVEL

	LDA I,MBONX		;"BONUS X"
	JSR TBLMSG
	LDA WAVNUM		;WRITE BONUS NUMBER
	CLC
	ADC I,1
	CMP I,9			;NOT OVER 8
	IFCS
	LDA I,8
	THEN
	JSR BINACI
	LDA I,0A6
	STA MESSX
	LDA I,0D0
	STA MESSY
	LDA I,0A
	STA STPSPA
	LDA I,HUE2
	STA STPCLR
	JSR MESENT

	LDA MSGFLG		;IS THIS DISPLAY OR ERASE?
	IFEQ
	LDA I,80 		;FLAG MESSAGE TO ERASE ITSELF
	STA MSGFLG
	LDA I,20		;SET PAUSE TIMER
	STA PAUSET
	ELSE
	LDA I,0			;CLEAR ERASE FLAG
	STA MSGFLG
	LDA I,80		;TBALL ON
	JSR CURON		;TURN ON CURSOR
	LDX WAVNUM
	LDA X,PLAYS		;SELECT PLAY MODE
	STA GSTATE
	THEN
	RTS

10$:	JSR ONESHP		;DRAW PLAYER SHIPS
	RTS

PLAYS:	.BYTE CPLAY1,CPLAY2,CPLAY2
	.BYTE CPLAY1,CPLAY2,CPLAY2
	.BYTE CPLAY3,CPLAY3,CPLAY3
	.BYTE CPLAY3,CPLAY3,CPLAY3
	.BYTE CPLAY2,CPLAY2,CPLAY2
	.BYTE CPLAY3,CPLAY3,CPLAY3
	.BYTE CPLAY2,CPLAY2,CPLAY2
	.BYTE CPLAY3,CPLAY3,CPLAY3
	.BYTE CPLAY4,CPLAY4,CPLAY4
	.BYTE CPLAY5,CPLAY5,CPLAY5
	.PAGE
	.SBTTL DISPLAY CURRENT LEVEL
LVLDSP:	LDA I,MMLVL		;"LEVEL:"
	JSR TBLMSG
LVLNUM:	LDA AY,PLRLVL
	CLC
	ADC I,1
	JSR BINACI		;GET ASCII NUMBER
	LDA I,0A0		;SET UP DISPLAY
	STA MESSX
	LDA I,84
	STA MESSY
	LDA I,0			;LARGE CHARS
	STA MSGSET
	LDA I,0A		;SPACING
	STA STPSPA
	LDA I,HUE1		;FLASH COLOR
	STA STPCLR
	JSR MESENT		;WRITE LEVEL NUMBER
	RTS
	.PAGE
	.SBTTL ATTACT MODE
	.SBTTL	PHASE #0
ATTR0A:	JSR CLEAR
	JSR PLTOFF
	JSR CLRSTR
	JSR CRDISP

	LDA I,MTXT1A		;SETUP TEXT STRING
	STA MSGSAV
	LDA I,0
	STA MSGFLG
	LDA I,CATR0B		;GOTO ATRACT 0B
	STA GSTATE
	RTS
;
; CHECKUM #0
;
CKSUM0:	.BYTE CKSM0

	.SBTTL	PHASE #0B
ATTR0B:	BIT MSGFLG		;TYPING?
	IFVC
	LDA MSGSAV		;NO, GET NEXT MESSAGE CODE
	CMP I,MTXT3C+1		;DONE?
	IFCS
	LDA I,4*PSEC		;YES, PAUSE
	STA PAUSET
	LDA I,CATTR1		;GOTO ATRACT 1
	STA NSTATE
	LDA I,CSPA2B		;PAUSE WITH STARS
	STA GSTATE
	RTS
	THEN
	JSR TYPMSG		;CALL TYPER
	INC MSGSAV		;NEXT MESSAGE CODE
	ELSE
	JSR MESTYP		;TYPE NEXT LETTER
	THEN

	JSR STRMOV		;MAKE STAR FIELD
	JSR STRGEN
	RTS
	.PAGE
	.SBTTL	PHASE #1
ATTR1:	JSR CLEAR		;CLEAR SCREEN
	JSR PLTON		;TURN ON PLANET

	LDA I,1			;FAST PLANET
	STA PLTHI
	LDA I,0
	STA PLTLO

	LDA ATRACT		;FLAG RING ROTATE
	ORA I,40
	STA ATRACT

	LDX I,7			;ATTRACT COLORS
	BEGIN
	LDA X,ATRCOL
	STA X,MAPCOL
	DEX
	MIEND

	LDA I,MJOIN		;"JOIN THE"
	JSR TBLMSG
	LDA I,MAFORC		;"ATARI FORCE"
	JSR TBLMSG
	LDA I,0			;PUT IN CAPITALS
	STA MSGSET
	LDA I,63
	STA MESSX
	LDA I,'A
	JSR LETOUT
	LDA I,8D
	STA MESSX
	LDA I,'F
	JSR LETOUT
	LDA I,MIN		;"IN:"
	JSR TBLMSG

	JSR RING		;DRAW RING

	LDA I,MCPR		;"COPYRIGHT"
	JSR TBLMSG
	JSR CRDISP		;SHOW CREDITS
	JSR DSPSCO		;SHOW SCORES

	LDA I,0C0		;SET TIMER
	STA PAUSET
	LDA I,CATR2A		;GOTO ATTRACT MODE SETUP
	STA NSTATE
	LDA I,CPAUSE
	STA GSTATE

	RTS

ATRCOL:	.BYTE 0FF,07C,0D5,0D4
	.BYTE 093,052,083,038
RNGCOL	=ATRCOL+2
	.PAGE
	.SBTTL ATTRACT MODE 2A (SETUP GAME)
ATTR2A:	LDA I,40		;SLOW PLANET
	STA PLTLO
	LDA I,0
	STA PLTHI

	LDA I,0			;UNFLAG RING ROTATE
	STA ATRACT
	JSR NEWAV1		;NEW WAVE SETUP

	LDA I,4
	STA NUMLIV		;4 LIVES
	STA BASNUM		;4 BASES
	STA COUNT1
	BEGIN
10$:	LDA RANDOM		;SELECT 4 BASES
	AND I,0F
	TAX
	LDA X,BASFLG
	IFNE
	JMP 10$			;ALREADY SELECTED
	THEN
	LDA I,80
	STA X,BASFLG
	LDA I,0
	STA X,BASES
	DEC COUNT1
	EQEND

	LDX I,2			;FAKE WAVE
	JSR PLTIN1		;NEW PLANET WAVE INIT

	LDA I,0
	STA FIRMAX		;DISABLE FIREBALL
	STA SAUFLG		;DISABLE SAUCER
	STA PLAYER		;PLAYER 1
	STA SHPFLG		;CLEAR SHIP FLAG
	STA NUMSHP		;HE HAS 0 SHIPS

	BEGIN
	LDA I,1
	STA PAUSET		;DRAW 4 SHIPS
	JSR ONESHP
	LDA PAUSET
	EQEND

	LDA I,80		;DISABLE TRAK BALL
	STA MSGFLG		;ERASE INFO MSG

	LDA I,0			;DISOLVE THE SHIELD
	LDX I,SHDSIZ-1
	BEGIN
	STA X,RADTBL
	DEX
	MIEND

	LDA I,MINS1A		;"YOUR MISSION"
	JSR TBLMSG
	JSR INFO1		;WRITE INFO1 MSG
	JSR CRDISP
	LDA I,0			;NO TBALL
	JSR CURON		;INIT CURSOR

	LDA I,CATR2B		;NOW PLAY THE GAME
	STA GSTATE
	RTS
	.PAGE
	.SBTTL ATTRACT MODE 2B (PLAY THE GAME)
ATTR2B:	JSR KLLCHK		;DISPLAY KILL POINTS
	JSR GETRGT		;SELECT OUT TARGET
	JSR MOVCUR		;MOVE THE CURSOR
	IFCS
	LDA FRAME		;EVERY 8 FRAMES
	AND I,3
	IFEQ
	JSR LASR1		;SHOOT LASER
	THEN
	THEN
	JSR BEAM		;PLOT BEAM
	JSR CLOUD		;LASER CLOUD
	JSR MSLNCH		;LAUNCH MISSILES
	JSR MSLPLT		;PLOT MISSILES
	JSR MSLTRL
	JSR SHPEXP		;EXPLODE SHIP
	JSR COLIDE		;COLLISION DETECT
	JSR ATREND		;CHECK END OF MODE
	RTS
	.PAGE
	.SBTTL	GET A TARGET BASE
;
;EXIT:	(X2,Y2)=COORDINATE OF TARGET
;	(X) IS BLITZED
;
GETRGT:	LDA I,0
	STA X2
	LDA BASNUM		;ANY BASES?
	IFNE
	LDX I,MAXBAS-1		;BASE INDEX
	BEGIN
	LDA X,BASFLG		;BASE ACTIVE?
	IFMI
	LDA X,BASX		;GET X COORDINATE
	CMP I,0FF		;BASE SHOWING?
	IFNE
	CMP X2			;GET LARGEST
	IFCS
	CLC			;LEAD IT
	ADC I,6
	STA X2
	LDA X,BASLAT		;GET Y COORDINATE
	STA Y2
	THEN
	THEN
	THEN
	DEX
	MIEND

	LDA X2			;DID WE GET A TARGET?
	IFNE
	RTS
	THEN
	THEN

	.SBTTL	GET TARGET MISSILE
;
;EXIT:	(X2,Y2)=COORDINATE OF MISSILE TARGET
;	(X) IS BLITZED
;
GETMSL:	LDX I,MAXMSL-1
	BEGIN
	LDA X,MSLFLG		;ACTIVE?
	IFMI
	LDA X,MSLHVH
	ASL
	ASL
	CLC
	ADC X,MSLX
	STA X2
	LDA X,MSLVVH
	ASL
	ASL
	CLC
	ADC X,MSLY
	STA Y2
	RTS
	THEN
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	MOVE CURSOR TO TARGET
MOVCUR:	LDA X2			;ANY TARGET?
	IFEQ
	CLC			;NO, FREEZE
	RTS
	THEN

	LDA GUNX		;SET X COORD
	STA X1
	LDA GUNY		;SET Y COORD
	CLC
	ADC I,6
	STA Y1

	CMP Y2			;AT OUR TARGET YET?
	IFEQ
	LDA X1
	CMP X2
	IFEQ
	SEC			;YES, SIGNAL LASER TO FIRE
	RTS
	THEN
	THEN

	JSR LINE		;GET OFFSETS
	LDA GUNX		;GET NEW CURSOR POSITION
	CLC
	ADC X1
	STA GUNX
	LDA GUNY
	CLC
	ADC Y1
	STA GUNY
	IFMI			;SET TRIGGER NUMBER
	LDA I,1
	ELSE
	CMP I,47
	IFCS
	LDA I,3
	ELSE
	LDA I,2
	THEN
	THEN
	STA GNTRIG
	CLC
	RTS
	.PAGE
	.SBTTL	ATTRACT MODE END CHECK
ATREND:	LDA BASNUM		;ANY BASES LEFT
	BEQ 10$

	LDA SHPFLG		;ANY SHIPS LEFT
	IFNE
	RTS
	THEN

10$:	LDA MSGFLG		;CHANGE MESSAGE?
	IFNE
	JSR INFO1		;ERASE INFO1
	JSR INFO2		;WRITE INFO2
	LDA I,0			;DON'T ENTER HERE AGAIN
	STA MSGFLG
	THEN

	LDA MSLNUM		;ANY MISSILES LEFT
	IFNE
	RTS
	THEN

	JSR CUROFF		;TURN OFF CURSOR

	JSR ATRFIN		;CHECK IF FINISHED
	IFCS
	LDA I,CSTART		;GOTO START MODE
	STA NSTATE
	LDA I,40		;BUT PAUSE FIRST
	STA PAUSET
	LDA I,CPAUSE
	STA GSTATE
	THEN
	RTS

	.SBTTL	CHECK IF ATTRACT MODE FINISHED
ATRFIN:	LDX I,MAXBEM-1		;CHECK BEAM
	BEGIN
	LDA X,BEMFLG
	IFNE
	CLC
	RTS
	THEN
	LDA X,CLDSIZ		;CHECK CLOUDS
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDX I,MAXEXP-1		;CHECK EXPLOSIONS
	BEGIN
	LDA X,EXPFLG
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDX I,3			;CHECK SHIP EXPLOSIONS
	BEGIN
	LDA X,SHPINX
	IFPL
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDA BSDEAD		;CHECK KILL POINTS
	IFPL
	CLC
	RTS
	THEN

	SEC
	RTS
	.PAGE
	.SBTTL	WRITE/ERASE INFO MESSAGES
INFO1:	LDA I,MINS1B
	JSR TBLMSG
	LDA I,MINS1C
	JSR TBLMSG
	RTS

INFO2:	LDA I,MINS2A
	JSR TBLMSG
	LDA I,MINS2B
	JSR TBLMSG
	RTS
	.PAGE
	.SBTTL PRESS START MODE
START:	LDA $$CRDT		;ENTER?
	IFEQ
	LDA I,CHITBL		;NO, SHOW HI SCORES
	STA GSTATE
	RTS
	THEN

	LDX I,MAXEXP-1		;CLEAR EXPLOSION TABLES
	LDA I,0
	BEGIN
	STA X,EXPFLG
	DEX
	MIEND
	STA ATRACT		;MAKE SURE THIS IS ATTRACT

	JSR CLEAR		;CLEAR SCREEN
	JSR PLTON		;TURN ON PLANET
	LDA I,1			;ROTATE PLANET
	STA PLTHI
	LDA I,0
	STA PLTLO

	JSR CRDISP		;DISPLAY CREDITS

	LDA $$CRDT		;ONE OR TWO?
	CMP I,2
	IFCC
	LDA I,M1PLR		;"ONE PLAYER"
	JSR TBLMSG
	ELSE
	LDA I,M2PLR		;"ONE OR TWO"
	JSR TBLMSG
	THEN
	LDA I,MPRESS		;"PRESS START"
	JSR TBLMSG

	LDA I,80		;SET TIMER
	STA PAUSET
	LDA I,CPAUSE
	STA GSTATE
	LDA I,CHITBL
	STA NSTATE
	RTS
	.PAGE
	.SBTTL	DISPLAY NUMBER OF CREDITS
CRDISP:	LDA $CMODE		;DISP COIN MSG
	AND I,03
	TAX
	LDA X,CNTBL
	JSR TBLMSG

	LDA $$CRDT		;ANY CREDITS?
	IFEQ
	RTS			;NOPE
	THEN

	LDA I,MCRDT		;"CREDITS:"
	JSR TBLMSG

	LDA $$CRDT		;HOW MANY CREDITS?
	CMP I,19.		;NOT OVER 18
	IFCS
	LDA I,18.
	STA $$CRDT
	THEN
	JSR BINACI		;CONVERT TO ASCII
	LDA COUNT1		;ZERO ZUPPRESS
	AND I,0F0
	IFNE
	LDA I,0A0		;SET UP DISPLAY
	ELSE
	LDA I,0A8
	THEN
	STA MESSX
	STA BITMOX
	LDA I,0E4
	STA MESSY
	STA BITMOY
	LDA I,0
	STA MSGSET
	LDA I,08
	STA STPSPA
	LDA I,HUE1
	STA STPCLR
	JSR MESENT		;WRITE NUMBERS
	RTS

CNTBL:	.BYTE MCOIN1,MCOIN2,MCOIN3,MCOIN4
	.PAGE
	.SBTTL END OF GAME
ENDGAM:	JSR CMODE		;DO COIN MODE
	LDA I,0			;ATTRACT IS PLAYER 1
	STA PLAYER
	LDA I,CATR0A		;GOTO ATTRACT MODE
	STA GSTATE
	RTS

	.SBTTL	DO COIN MODE
CMODE:	STA PKSCN2		;SET COIN MODE
	LDA PKSW2
	STA $CMODE
	AND I,03
	IFEQ
	LDA I,2			;FREE PLAY
	STA $$CRDT
	THEN
	RTS

	.PAGE
	.SBTTL PAUSE MODE
PAUSE:	LDA FRAME
	AND I,3
	IFNE
	RTS
	THEN
	LDA PAUSET
	IFEQ
	LDA NSTATE		;NEXT GAME STATE
	STA GSTATE
	ELSE
	DEC PAUSET		;DECREMENT TIMER
	THEN
	RTS
	.PAGE
	.SBTTL BONUS ROUND
BONUS:	JSR SHPBON		;SETUP SHIP TO MOVE
	JSR SHPLIM		;CHECK IT'S LIMIT
	RTS
	.PAGE
	.SBTTL BONUS ROUND - MOVE SHIPS
SHPBON:	LDA SHPNUM		;MAKE SURE SHIPS NOT MOVING
	IFMI
	LDX I,0			;4 SHIPS
	BEGIN
	LDA SHPFLG		;SHIP ALIVE?
	AND X,SHPMSK
	IFNE
	LDA SHPFLG		;DONE THIS SHIP?
	AND X,BONMSK
	IFEQ
	LDA I,0			;CLEAR DONE FLAG
	STA SHPINX
	STX SHPNUM
	LDA I,SENGN		;SHIP ENGINE SOUND
	JSR SNDON
	RTS
	THEN
	THEN
	INX
	CPX I,4
	EQEND

	LDA I,2*PSEC		;ALL SHIPS MOVED
	STA PAUSET
	LDA I,0			;CLEAR BONUS BUFFER
	STA BONBUF
	STA BONBUF+1
	STA SHPINX		;NO MORE POINTS

	LDY PLAYER		;PLAYER INDEX
	LDA PLTNUM		;3RD WAVE?
	IFMI
	LDA AY,PLRFLG		;PLAYER GET BONUS AWARD?
	AND I,20
	IFNE
	JSR GIVBON		;YES, GIVE IT
	THEN
	THEN
	JSR NXTBON		;SHOW NEXT BONUS LEVEL
	LDA WAVNUM		;SEE IF THEY NEED LESSON
	CMP I,3
	IFCC
	LDA BASHIT
	CMP I,2
	IFCC
	LDA I,CLES1A		;YES, GOTO LESSON 1
	STA NSTATE
	JMP 10$
	THEN
	THEN
	JSR NXTPLR		;SELECT NEXT PLAYER
10$:	LDA I,CPAUSE		;BUT PAUSE FIRST
	STA GSTATE
	THEN
	RTS
	.PAGE
	.SBTTL	CHECK SHIP MOVE LIMIT
SHPLIM:	LDA SHPINX		;DONE WITH THIS ONE?
	IFMI
	LDX SHPNUM
	LDA I,0FF
	STA SHPNUM		;CLEAR MOVE SHIP
	LDA SHPFLG
	ORA X,BONMSK		;FLAG IT
	STA SHPFLG
	LDA I,SHPVAL		;ADD POINTS FOR BONUS
	JSR ADDPNT
	JSR BONPNT		;SHOW BONUS POINTS
	LDX I,1			;FILL RACK AGAIN
	JSR LIVDRW
	LDA I,STICK		;MAKE TICK SOUND
	JSR SNDON
	LDA I,SHPVAL		;ADD POINT FOR SCORE
	JSR ADDPNT
	JSR SCORE		;UPDATE PLAYER SCORE
	THEN
	RTS

BONMSK: .BYTE 08,04,02,01
	.PAGE
	.SBTTL	DISPLAY BONUS POINTS
BONPNT:	SED			;DECIMAL MODE
	LDA BONBUF
	CLC
	ADC TRIPLE
	STA BONBUF
	STA TRIPLE
	LDA BONBUF+1
	ADC TRIPLE+1
	STA BONBUF+1
	STA TRIPLE+1
	CLD

	LDA I,BPNTX		;SCREEN LOCATION
	STA BITMOX
	STA MESSX
	LDA I,BPNTY
	STA MESSY
	STA BITMOY
	LDA I,HUE1		;POINT COLOR
	STA STPCLR
	LDX I,1			;2 DIGITS
	JSR SCORE1

	RTS
	.PAGE
	.SBTTL		GIVE BONUS AWARD
GIVBON:	LDA I,MBONAW		;"BONUS AWARD:"
	JSR TBLMSG
	LDY PLAYER
	LDA I,0
	STA TRIPLE
	LDA AY,PLRBOH		;MOVE BONUS TO TRIPLE
	STA TRIPLE+2
	LDA AY,PLRBOM
	STA TRIPLE+1
	SED			;SET NEXT BONUS LEVEL
	CLC
	ADC BONINC
	STA AY,BONLVM
	LDA TRIPLE+2
	ADC I,0
	STA AY,BONLVH
	LDA AY,SCOREM
	AND I,0F0
	CLC
	ADC AY,BONLVM
	STA AY,BONLVM
	LDA AY,SCOREH
	ADC AY,BONLVH
	STA AY,BONLVH
	CLD
	LDA I,0B0		;SET DISPLAY COORDINATES
	STA MESSX
	LDA I,0D8
	STA MESSY
	LDA I,FLASH
	STA STPCLR
	LDX I,2
	JSR SCORE1		;SHOW POINTS

	LDA AY,PLRBOH		;NOW ADD TO SCORE
	STA TRIPLE+2
	LDA AY,PLRBOM
	STA TRIPLE+1
	LDA AY,PLRFLG		;UNFLAG BONUS AWARD
	AND I,0DF
	STA AY,PLRFLG
	JSR SCORE		;DISPLAY NEW SCORE
	LDA I,4*PSEC		;LONG PAUSE
	STA PAUSET
	RTS

	.SBTTL	DISPLAY NEXT BONUS LEVEL
NXTBON:	LDY PLAYER
	LDA I,MNXBON		;"NEXT BONUS..."
	JSR TBLMSG
	LDA I,4
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,-4
	THEN
	STA TEMP3
	LDA MESSX
	CLC
	ADC TEMP3
	STA MESSX
	LDA I,HUE4
	STA STPCLR
	LDA AY,BONLVH		;SHOW BONUS LEVEL
	IFNE
	CMP I,10		;SUPPRESS LEADING 0
	IFCC
	CLC
	ADC I,30
	JSR LETOUT
	ELSE
	JSR HEXOUT
	THEN
	THEN
	LDA AY,BONLVM
	JSR HEXOUT
	LDA I,0
	JSR HEXOUT
	LDA I,'0
	JSR LETOUT
	RTS
	.PAGE
	.SBTTL LESSON NUMBER 1 INIT
LES1A:	JSR PLTOFF		;NO PLANET
	JSR CLEAR		;CLEAR SCREEN
	JSR CLRSTR		;CLEAR STAR TABLES
	JSR LIBCLR		;LIBERATOR COLORS
	LDA I,54		;DRAW MARTIN
	STA LIBX
	LDA I,20
	STA LIBY
	LDA I,SCOM		;COM SOUND
	JSR SNDON
	LDA I,80
	STA LIBFLG

	LDA I,MROOK		;"HEY ROOKIE!"
	JSR TBLMSG
	LDA I,MLES1A		;SETUP LESSON MSGS
	STA MSGSAV
	STA TEMP4
	LDA I,MLES1D+1
	STA MSGEND
	LDA I,CLES1B
	STA NSTATE
	LDA I,CSPA2A
	STA GSTATE
	RTS


LES1B:	JSR NXTPLR		;GET NEXT PLAYER
	LDA NSTATE		;GO THERE NOW
	STA GSTATE
	RTS
	.PAGE
	.SBTTL DEEP SPACE INIT
SPAC1A:	JSR CLRSTR		;CLEAR STAR TABLES
	JSR FLEET		;DRAW SHIPS AND LIVES
	JSR SCTCLR		;CLEAR SCOUT TABLES

	LDY PLAYER		;WHO'S PLAYING?
	IFEQ
	LDA I,MPLR1		;"PLAYER 1"
	JSR TBLMSG
	ELSE
	LDA I,MPLR2		;"PLAYER 2"
	JSR TBLMSG
	THEN

	LDA WAVNUM		;DO THIS ON WAVE 3
	CMP I,6
	BEQ 5$

	LDA AY,PLRFLG		;DOES HE GET LIBERATOR?
	AND I,10
	IFEQ
5$:	LDA AY,PLRFLG		;FLAG THIS
	ORA I,10
	STA AY,PLRFLG

	JSR LIBCLR		;LIBERATOR COLORS
	LDA I,18		;DRAW THE LIBERATOR
	STA LIBX
	LDA I,40
	STA LIBY
	LDA I,SCOM		;COM SOUND
	JSR SNDON
	LDA I,80
	STA LIBFLG

	LDA I,MFROM		;"MESSAGE..."
	JSR TBLMSG
	LDA I,MCHMP
	JSR TBLMSG
	LDA I,MSPA1		;SPACE MESSAGES
	LDY I,MSPA4+1		;END OF MESSAGE
	LDX WAVNUM		;WAVE NUMBER 3?
	CPX I,6
	IFEQ
	LDA I,MFIR1		;YES, FIREBALL MESSAGE
	LDY I,MFIR4+1
	THEN
	STA MSGSAV
	STA TEMP4
	STY MSGEND
	LDA I,CSPA2C		;SET NEXT STATE
	STA NSTATE
	LDA I,CSPA2A		;GO TO SPACE2 STATE
	STA GSTATE
	RTS
	THEN

SHPSET:	LDA I,20		;SET PAUSE TIMER
	STA PAUSET
	LDA I,CSPA1B		;GOTO SHIP DISPLAY
	STA GSTATE
	RTS

LIBCLR:	LDA ATRACT		;TURN OFF FLASH
	ORA I,20
	STA ATRACT

	LDX I,7
	BEGIN
	LDA X,LIBCOL
	STA X,MAPCOL
	DEX
	MIEND
	RTS

LIBCOL:	.BYTE 0FF,03B,07D,053,0D4,01A,009,04B
	.PAGE
	.SBTTL DEEP SPACE SHIP TICK-OFF
SPAC1B:	LDA PAUSET		;CHECK TIMER
	IFEQ
	LDY PLAYER		;ERASE PLAYER MESSAGE
	IFEQ
	LDA I,MPLR1
	ELSE
	LDA I,MPLR2
	THEN
	JSR TBLMSG

	LDA I,80		;CURSOR ON
	JSR CURON
	LDA I,CSPA3
	STA GSTATE
	ELSE
	JSR STRMOV		;MOVE STARS
	JSR STRGEN		;GENERATE NEW STARS
	JSR ONESHP		;DRAW PLAYER SHIPS
	THEN
	RTS
	.PAGE
	.SBTTL SHOW LIBERATOR IN SPACE
SPAC2A:	BIT MSGFLG		;TYPING?
	IFVC
	LDA MSGSAV		;NO, NEXT MESSAGE
	CMP MSGEND
	IFCS
	LDA I,2*PSEC		;DONE TYPING, PAUSE
	STA PAUSET
	LDA I,CSPA2B		;PAUSE STATE WITH STARS
	STA GSTATE
	ELSE
	JSR TYPMSG		;START NEW MESSAGE
	INC MSGSAV
	THEN
	ELSE
	JSR MESTYP		;TYPE NEXT LETTER
	THEN

	JSR STRMOV
	JSR STRGEN
	RTS

	.SBTTL	PAUSE WITH STARS
SPAC2B:	LDA FRAME		;PAUSE TIMER
	AND I,3
	IFEQ
	DEC PAUSET
	IFEQ
	LDA ATRACT		;ATRACT MODE?
	IFMI
	LDA NSTATE		;LESSON?
	CMP I,CLES1B
	IFNE
	LDA I,MFROM		;ERASE MESSAGES
	JSR TBLMSG
	LDA I,MCHMP
	JSR TBLMSG
	THEN
	LDA TEMP4		;ERASE ALL MESSAGES
	BEGIN
	STA MSGSAV
	JSR TBLMSG
	LDA MSGSAV
	CLC
	ADC I,1
	CMP MSGEND
	CSEND
	LDA NSTATE
	CMP I,CLES1B
	BEQ 10$
	LDA I,80		;ERASE LIBERATOR
	STA LIBFLG
	THEN
	LDA NSTATE
10$:	STA GSTATE
	THEN
	THEN
	JSR STRMOV
	JSR STRGEN
	RTS

SPAC2C:	LDA LIBFLG		;DONE ERASING?
	IFMI
	RTS
	THEN
	JSR MCOLOR		;NORMAL COLORS
	JMP SHPSET
	.PAGE
	.SBTTL DEEP SPACE PLAY
SPACE3:	JSR SCTPLT		;PLOT SCOUT SHIPS
	JSR SCTINT		;INIT SCOUT SHIPS
	LDA ZOMFLG		;SEE IF ZOOMING
	IFEQ
	JSR LASER		;SHOOT LASER BEAM
	THEN
	JSR BEAM		;PLOT BEAM
	JSR CLOUD		;DRAW LASER CLOUD
	JSR STRMOV		;MOVE STARS
	JSR STRGEN		;GENERATE NEW STARS
	JSR SHPEXP		;EXPLODE SHIPS
	JSR COLID1		;COLLISION DETECT
	JSR SPAEND		;CHECK END OF WAVE
	RTS

	.SBTTL ZOOM PLANET STATE
ZOOMER:	JSR STRMOV		;MOVE STARS
	JSR ZOOM		;ZOOM PLANET
	RTS
	.PAGE
	.SBTTL	CLEAR OUT STAR TABLES
CLRSTR:	LDA I,0
	LDX I,STRSIZ
	BEGIN
	STA X,STRFLD		;CLEAR OUT OUR TABLES
	DEX
	MIEND
	LDX I,MAXSTR-1
	BEGIN
	STA X,STRFLG
	STA X,STRXHI
	STA X,STRXLO
	STA X,STRYHI
	STA X,STRYLO
	DEX
	MIEND
	RTS

	.SBTTL	CLEAR SCOUT SHIP TABLES
SCTCLR:	LDA I,0
	LDX I,MAXSCT-1
	BEGIN
	STA X,SCTFLG
	DEX
	MIEND
	STA SCTNUM

	LDA WAVNUM
	TAX
	LDA X,VACTBL		;SET VERTICAL ACCEL
	STA SCTIVA
	LDA X,NUMSCT		;SET NUMBER OF SCOUTS
	STA SCTCNT

	LDA I,2			;DEFAULT 2 SCOUTS
	CPX I,MAXWAV-12		;NEED MORE SCOUTS?
	IFCS
	LDA I,3			;NOW 3
	THEN
	STA SCTMAX
	RTS

VACTBL:	.BYTE 08,00,00
	.BYTE 07,00,00
	.BYTE 06,00,00
	.BYTE 05,00,00
	.BYTE 05,00,00
	.BYTE 05,00,00
	.BYTE 05,00,00
	.BYTE 05,00,00
	.BYTE 05,00,00
	.BYTE 05,00,00
NUMSCT:	.BYTE 04,00,00
	.BYTE 06,00,00
	.BYTE 08,00,00
	.BYTE 0A,00,00
	.BYTE 0A,00,00
	.BYTE 0A,00,00
	.BYTE 0A,00,00
	.BYTE 0A,00,00
	.BYTE 0A,00,00
	.BYTE 0A,00,00
	.PAGE
	.SBTTL	INITIALIZE SCOUT SHIPS
SCTINT:	LDA FRAME		;ENTER EVERY 64 FRAMES
	AND I,3F
	IFNE
	RTS
	THEN

	LDA SCTNUM		;CHECK CURRENT NUMBER
	CMP SCTMAX		;OVER MAX?
	IFCS
	RTS			;YES, EXIT
	THEN

	LDA SCTCNT		;TIME TO END?
	IFEQ
	RTS			;YES
	THEN
	SEC			;NO, COUNTDOWN
	SBC I,1
	STA SCTCNT

	LDX I,MAXSCT		;FIND SLOT
	BEGIN
	DEX
	LDA X,SCTFLG
	EQEND

	LDA RANDOM		;GET X COORDINATE
	IFMI
	LDA I,0FB
	LDY I,0FF
	ELSE
	LDA I,04
	LDY I,01
	THEN
	STA X,SCTXHI
	TYA
	STA X,SCTHVH		;SET H VEL

	LDA RANDOM		;GET Y COORDINATE
	AND I,0F
	CLC
	ADC I,40		;40-50 (+ OR -)
	LDY RANDOM
	IFMI
	COMP
	THEN
	STA X,SCTYHI

	LDA I,0			;CLEAR OTHERS
	STA X,SCTXLO
	STA X,SCTYLO
	STA X,SCTHVL
	STA X,SCTVVH
	STA X,SCTVVL
	STA X,SCTINX		;PICTURE INDEX

	LDA RANDOM		;SET VERTICAL ACCEL
	AND I,03
	CLC
	ADC SCTIVA
	LDY X,SCTYHI
	IFMI
	COMP
	THEN
	STA X,SCTVAC

	LDA I,80		;SET ACTIVE FLAG
	STA X,SCTFLG
	INC SCTNUM		;COUNT 'EM

	JSR SCTDRW		;DRAW FIRST ONE
	RTS
	.PAGE
	.SBTTL	MOVE & PLOT SCOUT SHIPS
SCTPLT:	LDX I,MAXSCT-1		;FIND ACTIVE SLOT
	BEGIN
	LDA X,SCTFLG
	IFEQ
	JMP 50$
	THEN

	JSR SCTDRW		;ERASE LAST

	LDA X,SCTHVL		;GET NEW X
	CLC
	ADC X,SCTXLO
	STA X,SCTXLO
	LDA X,SCTHVH		;MIDDLE BOUNDARY CHECK
	IFMI
	ADC X,SCTXHI
	STA X,SCTXHI
	STA X1
	IFPL
	JMP 10$
	THEN
	ELSE
	ADC X,SCTXHI
	STA X,SCTXHI
	STA X1
	IFMI
	JMP 10$
	THEN
	THEN
	JMP 20$			;NOT OVER MIDDLE YET

10$:	LDY I,0			;FIGURE NEW V VEL
	LDA X,SCTVAC
	IFMI
	DEY
	THEN
	CLC
	ADC X,SCTVVL
	STA X,SCTVVL
	TYA
	ADC X,SCTVVH
	STA X,SCTVVH
	IFMI			;GET NEW PICTURE INDEX
	COMP
	THEN
	CMP I,5
	IFCS
	LDA I,4
	THEN
	STA X,SCTINX

	LDA X,SCTYLO		;NEW Y COORDINATE
	CLC
	ADC X,SCTVVL
	STA X,SCTYLO
	LDA X,SCTYHI
	ADC X,SCTVVH
	STA X,SCTYHI
	STA Y1

	JSR MCOLID		;CHECK COLLISION
	IFCS
	LDA I,0			;HIT EDGE
	STA X,SCTFLG
	DEC SCTNUM
	JMP 50$
	THEN

20$:	JSR SCTDRW		;DRAW NEW SCOUT

50$:	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	MOVE STARS
STRMOV:	LDX I,MAXSTR-1
	BEGIN
	LDA X,STRFLG		;CHECK IF ACTIVE
	BEQ 10$
	AND I,3			;GET SPEED
	STA TEMP2
	JSR STRDRW		;ERASE OLD STAR

	LDY I,0			;INIT Y
	LDA X,STRXHI		;GET DISTANCE FROM CENTER
	SEC
	SBC I,80
	IFMI
	DEY
	THEN
	STY TEMP1
	BIT ZOMFLG		;ZOOMING?
	IFMI
	LDY I,3			;YES, TOP SPEED
	ELSE
	LDY TEMP2
	THEN
	DEY
	BEGIN
	ASL			;SCALE IT
	ROL TEMP1
	DEY
	MIEND
	CLC
	ADC X,STRXLO
	STA X,STRXLO
	LDA TEMP1
	ADC X,STRXHI
	CMP I,0FC
	BCS 15$
	STA X,STRXHI

	LDY I,0
	LDA X,STRYHI		;DISTANCE FROM CENTER
	SEC
	SBC I,80
	IFMI
	DEY
	THEN
	STY TEMP1
	BIT ZOMFLG		;ZOOMING?
	IFMI
	LDY I,3			;YES, TOP SPEED
	ELSE
	LDY TEMP2
	THEN
	DEY
	BEGIN
	ASL			;SCALE
	ROL TEMP1
	DEY
	MIEND
	CLC
	ADC X,STRYLO
	STA X,STRYLO
	LDA TEMP1
	ADC X,STRYHI
	CMP I,0F8
	BCS 15$
	STA X,STRYHI
	JSR STRDRW
10$:	DEX
	MIEND
	RTS

15$:	LDA I,0			;CLEAR SLOT
	STA X,STRFLG
	DEC NUMSTR
	JMP 10$
	.PAGE
	.SBTTL	GENERATE STARS
STRGEN:	LDA NUMSTR		;CHECK IF TOO MANY
	CMP I,MAXSTR
	IFCS
	RTS
	THEN
	LDA RANDOM		;ENTER 1 OUT OF 4
	AND I,03
	IFNE
	RTS
	THEN

	LDX I,MAXSTR
	BEGIN
	DEX
	LDA X,STRFLG		;LOOK FOR SLOT
	EQEND

	LDA RANDOM		;GET STARTING LOCATION
	AND I,3F
	CLC
	ADC I,88
	STA X,STRXHI
	LDA RANDOM
	AND I,3F
	CLC
	ADC I,88
	STA X,STRYHI

	LDA I,0			;CLEAR OTHERS
	STA X,STRXLO
	STA X,STRYLO

	LDA RANDOM		;PUT IN A QUADRANT
	IFMI
	LDA X,STRXHI
	COMP
	STA X,STRXHI
	THEN

	LDA RANDOM
	IFMI
	LDA X,STRYHI
	COMP
	STA X,STRYHI
	THEN
	LDA RANDOM		;GET A SPEED
	AND I,3
	ORA I,80		;FLAG ON
	STA X,STRFLG
	INC NUMSTR		;COUNT THEM
	JSR STRDRW		;DRAW IT
	RTS
	.PAGE
	.SBTTL ZOOM PLANET IN
ZOOM:	LDA PAUSET		;WAIT A LITTLE BEFORE ZOOM
	IFNE
	DEC PAUSET
	RTS
	THEN

	LDX CIRINX
	STX RADIUS		;MASK OUT PLANET
	JSR CIRCLE
	INX
	CPX I,41		;CHECK IF DONE
	IFEQ
	LDA ZOMFLG
	AND I,40		;ARE WE ERASING?
	IFEQ
	LDA WAVNUM		;FAKE NEXT WAVE
	ASL
	TAX
	JSR PLTON
	LDA I,HUE0
	STA CIRCOL		;ERASE COLOR
	LDA ZOMFLG		;FLAG ERASE
	ORA I,40
	STA ZOMFLG
	LDX I,1
	ELSE
	LDA I,CPLTIN		;GOTO PLANET
	STA GSTATE
	JSR NEWAV1		;ENTER HALF WAVE
	RTS
	THEN
	THEN
	STX CIRINX
	RTS
	.PAGE
	.SBTTL COLLISION DETECT FOR SPACE
COLID1:	LDY I,MAXBEM-1
	BEGIN
	LDX I,MAXSCT-1		;SCOUT INDEX
	BEGIN
	LDA X,SCTFLG		;ACTIVE?
	IFMI
	LDA X,SCTXHI
	STA X1
	SEC
	SBC AY,BEMTGX
	IFCC
	COMP
	THEN
	CMP AY,CLDSIZ
	IFCC			;WITHIN X RANGE
	LDA X,SCTYHI
	STA Y1
	SEC
	SBC AY,BEMTGY
	IFCC
	COMP
	THEN
	CMP AY,CLDSIZ
	IFCC			;GOT IT!
	LDA I,0
	STA X,SCTFLG
	JSR SCTDRW		;ERASE IT
	DEC SCTNUM
	JSR ACTEXP		;EXPLOSION
	LDA I,SCTVAL
	JSR ADDPNT
	THEN
	THEN
	THEN
	DEX
	MIEND
	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL END OF WAVE CHECK FOR DEEP SPACE
SPAEND:	LDA SHPFLG		;PLAYER ALIVE?
	IFEQ
	JSR CUROFF		;TURN OFF CURSOR
	LDA I,0			;STOP SCOUT LAUNCH
	STA SCTCNT
	LDY PLAYER		;GET PLAYER INDEX
	LDA AY,NUMSHP		;SEE IF PLAYER OUT
	CLC
	ADC AY,NUMLIV		;ANY LIVES LEFT?
	IFEQ
	JSR SPAFIN		;SEE IF ALL DONE
	IFCS
	LDA I,07		;RESTORE COLOR
	STA MAPCOL+2
	JMP GAMOVR		;GAME OVER
	THEN
	ELSE
	JSR SPAFIN
	THEN
	ELSE
	JSR SPAFIN
	THEN
	RTS

	.SBTTL	TASK DONE CHECKS
SPAFIN:	LDA SCTCNT		;ALL SCOUTS LAUNCHED?
	IFNE
	CLC
	RTS
	THEN

	LDA SCTNUM		;CURRENT SCOUTS DONE?
	IFNE
	CLC
	RTS
	THEN

	JSR CUROFF		;TURN OFF CURSOR

	LDX I,MAXBEM-1		;CHECK IF BEAMS DONE
	BEGIN
	LDA X,BEMFLG
	IFNE
	CLC
	RTS
	THEN
	LDA X,CLDSIZ
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDX I,3			;SHIP EXPLOSION
	BEGIN
	LDA X,SHPINX
	IFPL
	CLC
	RTS
	THEN
	DEX
	MIEND

	JSR CUROFF		;TURN OFF CURSOR

	LDA I,10		;SET PAUSE
	STA PAUSET

	LDA I,80		;ZOOM
	STA ZOMFLG

	STA CIRX		;SETUP CIRCLE REGS
	STA CIRY
	LDA I,HUE2
	STA CIRCOL
	LDA I,BLACK		;SET TO BLACK MASK
	STA MAPCOL+2
	LDA I,01		;SET FIRST CIRCLE SIZE
	STA CIRINX
	LDA I,CZOOM		;GOTO ZOOM STATE
	STA GSTATE
	SEC
	RTS
	.PAGE
	.SBTTL INITIALIZE AND DRAW SHIPS AND LIVES
FLEET:	LDY PLAYER		;PLAYER INDEX

	LDA AY,NUMLIV		;GET TOTAL NUMBER OF LIVES
	CLC
	ADC AY,NUMSHP
	STA AY,NUMLIV
	TAX
	LDA I,0			;CLEAR CURRENT NUMBER
	STA AY,NUMSHP
	STA SHPFLG		;AND FLAG REG
	JSR LIVDRW		;DRAW ALL LIVES
	RTS
	.PAGE
	.SBTTL DRAW ONE SHIP, THEN PAUSE
ONESHP:	DEC PAUSET		;COUNT DOWN
	IFNE
	RTS
	THEN

	LDX I,0			;SHIP INDEX
	LDY PLAYER		;PLAYER INDEX
	LDA I,4			;LOOP COUNTER
	STA COUNT1
	BEGIN
	LDA SHPFLG		;DONE THIS ONE YET?
	AND X,SHPMSK
	IFEQ
	LDA SHPFLG
	ORA X,SHPMSK		;FLAG
	STA SHPFLG
	BIT $COINS		;COCKTAIL?
	IFVS
	LDA X,SHIPX		;FILL LOCATION TABLE
	STA X,SHPXLC
	LDA X,SHIPY
	STA X,SHPYLC
	ELSE
	LDA X,SHIPXC		;FLIP LOCATIONS
	STA X,SHPXLC
	LDA X,SHIPYC
	STA X,SHPYLC
	THEN
	JSR SHPDRW		;DRAW THE SHIP
	LDA I,0FF		;INIT EXPLOSION INDEX
	STA X,SHPINX

	LDA AY,NUMSHP		;COUNT SHIPS
	CLC
	ADC I,1
	STA AY,NUMSHP

	LDA I,4			;POINTER INC
	BIT $COINS
	IFVC
	LDA I,-4
	THEN
	STA TEMP1
	LDA LIVPNT		;BACK UP DISPLAY POINTER
	SEC
	SBC TEMP1
	STA LIVPNT
	STA TEMP1
	PHA
	PHX
	LDX I,1
	JSR LIVDRW		;ERASE A LIFE
	PLX
	PLA			;RESTORE DISPLAY POINTER
	STA LIVPNT

	LDA LASMAX		;GIVE HIM FIRE POWER
	CLC
	ADC I,3
	STA LASMAX

	LDA I,STICK		;MAKE TICK SOUND
	JSR SNDON

	LDA AY,NUMLIV		;TAKE A LIFE
	SEC
	SBC I,1
	STA AY,NUMLIV
	IFEQ
	JMP 20$			;RAN OUT OF LIVES
	THEN

	LDA I,18		;SET NEXT PAUSE
	STA PAUSET
	RTS
	THEN
	INX
	DEC COUNT1
	EQEND

20$:	LDX I,MAXBEM-1		;CLEAR BEAM REGS
	LDA I,0
	BEGIN
	STA X,BEMFLG
	STA X,CLDSIZ
	DEX
	MIEND
	STA LASNUM		;NUMBER OF LASER BEAMS

	STA PAUSET		;CLEAR TIMER
	RTS

SHIPX:	.BYTE 08,0E7,08,0E7
SHIPXC:	.BYTE 18,0F7,18,0F7
SHIPY:	.BYTE 11,11,0E0,0E0
SHIPYC:	.BYTE 21,21,0F0,0F0
SHPMSK:	.BYTE ULSHIP,URSHIP,LLSHIP,LRSHIP
	.PAGE
	.SBTTL GAME PLAY SEQUENCE 1
PLAY1:	JSR KLLCHK		;CHECK KILL POINT DISPLAY
	JSR SHIELD		;CHECK IF SHIELD REQUESTED
	JSR BEAM		;PLOT LASER BEAMS
	JSR LASER		;SHOOT LASER BEAM
	JSR CLOUD		;DRAW LASER CLOUDS
	JSR MSLNCH		;LAUNCH PLANET MISSILES
	JSR MSLPLT		;PLOT MISSILE TRAJECTORY
	JSR MSLTRL		;ERASE MISSILE TRAILS
	JSR MRVPLT		;PLOT MIRVS
	JSR SATPLT		;PLOT AND BLINK SATTILITE
	JSR SATLAU		;LAUCH A SATTILITE
	JSR SHPEXP		;EXPLODE SHIPS
	JSR COLIDE		;COLLISION DETECT
	JSR CHKEND		;CHECK PLANET AND PLAYER HEALTH
	RTS
	.PAGE
	.SBTTL GAME PLAY SEQUENCE 2
PLAY2:	JSR SAUDSP		;DISPLAY SAUCER
	JSR KLLCHK		;CHECK KILL POINT DISPLAY
	JSR SAUCER		;CALCULATE NEXT SAUCER LOCATION
	JSR SHIELD		;CHECK IF SHIELD REQUESTED
	JSR BEAM		;PLOT LASER BEAMS
	JSR LASER		;SHOOT LASER BEAM
	JSR CLOUD		;DRAW LASER CLOUDS
	JSR MSLNCH		;LAUNCH PLANET MISSILES
	JSR MSLPLT		;PLOT MISSILE TRAJECTORY
	JSR MSLTRL		;ERASE MISSILE TRAILS
	JSR MRVPLT		;PLOT MIRVS
	JSR SATPLT		;PLOT AND BLINK SATTILITE
	JSR SATLAU		;LAUCH A SATTILITE
	JSR SHPEXP		;EXPLODE SHIPS
	JSR COLIDE		;COLLISION DETECT
	JSR CHKEND		;CHECK PLANET AND PLAYER HEALTH
	RTS
	.PAGE
	.SBTTL GAME PLAY SEQUENCE 3
PLAY3:	JSR SAUDSP		;DISPLAY SAUCER
	JSR KLLCHK		;CHECK KILL POINT DISPLAY
	JSR SAUCER		;CALCULATE NEXT SAUCER LOCATION
	JSR SHIELD		;CHECK IF SHIELD REQUESTED
	JSR BEAM		;PLOT LASER BEAMS
	JSR LASER		;SHOOT LASER BEAM
	JSR CLOUD		;DRAW LASER CLOUDS
	JSR MSLNCH		;LAUNCH PLANET MISSILES
	JSR MSLPLT		;PLOT MISSILE TRAJECTORY
	JSR MSLTRL		;ERASE MISSILE TRAILS
	JSR MRVPLT		;PLOT MIRVS
	JSR FIRPLT		;PLOT FIREBALL
	JSR FIRLAU		;LAUNCH FIREBALL
	JSR SHPEXP		;EXPLODE SHIPS
	JSR COLIDE		;COLLISION DETECT
	JSR CHKEND		;CHECK PLANET AND PLAYER HEALTH
	RTS
	.PAGE
	.SBTTL GAME PLAY SEQUENCE 4
PLAY4:	JSR SAUDSP		;DISPLAY SAUCER
	JSR KLLCHK		;CHECK KILL POINT DISPLAY
	JSR SAUCER		;CALCULATE NEXT SAUCER LOCATION
	JSR SHIELD		;CHECK IF SHIELD REQUESTED
	JSR BEAM		;PLOT LASER BEAMS
	JSR LASER		;SHOOT LASER BEAM
	JSR CLOUD		;DRAW LASER CLOUDS
	JSR MSLNCH		;LAUNCH PLANET MISSILES
	JSR MSLPLT		;PLOT MISSILE TRAJECTORY
	JSR MSLTRL		;ERASE MISSILE TRAILS
	JSR MRVPLT		;PLOT MIRVS
	JSR SMART		;MAKE PLANET SMART
	JSR SATPLT		;PLOT AND BLINK SATTILITE
	JSR SATLAU		;LAUCH A SATTILITE
	JSR SHPEXP		;EXPLODE SHIPS
	JSR COLIDE		;COLLISION DETECT
	JSR CHKEND		;CHECK PLANET AND PLAYER HEALTH
	RTS
	.PAGE
	.SBTTL GAME PLAY SEQUENCE 5
PLAY5:	JSR SAUDSP		;DISPLAY SAUCER
	JSR KLLCHK		;CHECK KILL POINT DISPLAY
	JSR SAUCER		;CALCULATE NEXT SAUCER LOCATION
	JSR SHIELD		;CHECK IF SHIELD REQUESTED
	JSR BEAM		;PLOT LASER BEAMS
	JSR LASER		;SHOOT LASER BEAM
	JSR CLOUD		;DRAW LASER CLOUDS
	JSR MSLNCH		;LAUNCH PLANET MISSILES
	JSR MSLPLT		;PLOT MISSILE TRAJECTORY
	JSR MSLTRL		;ERASE MISSILE TRAILS
	JSR MRVPLT		;PLOT MIRVS
	JSR SMART		;MAKE PLANET SMART
	JSR FIRPLT		;PLOT FIREBALL
	JSR FIRLAU		;LAUNCH FIREBALL
	JSR SHPEXP		;EXPLODE SHIPS
	JSR COLIDE		;COLLISION DETECT
	JSR CHKEND		;CHECK PLANET AND PLAYER HEALTH
	RTS
	.PAGE
	.SBTTL SAUCER DISPLAY SET-UP
SAUDSP:	LDA SAUFLG		;ACTIVE?
	IFEQ
	RTS
	THEN
	AND I,40
	IFNE
	JSR DTHRAY		;YES, PROCESS RAY
	RTS
	THEN

	LDA FRAME		;CHECK SPEED
	AND SAUSPD
	IFEQ
	JSR SAUERS		;ERASE OLD LOCATION
	JSR SAUDRW		;DRAW NEW SAUCER
	JSR RAYCHK		;SEE IF WE CAN SHOOT RAY
	THEN
	RTS
	.PAGE
	.SBTTL CHECK IF SAUCER CAN SHOOT RAY
RAYCHK:	LDA CURFLG		;DON'T SHOOT IF PLAYER CAN'T
	IFEQ
	RTS
	THEN

	LDX I,3
	BEGIN
	LDA SHPFLG		;CHECK IF SHIP IS ALIVE
	AND X,SHPMSK
	IFNE
	LDA SRNEWX		;CHECK IF SAUCER IF LINED UP
	IFMI
	TXA
	LSR
	BCC 10$
	ELSE
	TXA
	LSR
	BCS 10$
	THEN

	LDA SRNEWX
	STA RAYLHI
	STA RAYRHI
	STA RAYSVX
	EOR X,SLPTBL		;GET SIGN
	IFMI
	CLC
	ADC I,1
	THEN
	CLC
	ADC X,YINTCP		;ADD THE Y INTERCEPT
	CMP SRNEWY
	IFEQ
	LDA SRNEWY		;CHECK IF WE ARE FAR ENOUGH AWAY
	IFMI
	CMP X,SHTPNT
	BCS 10$
	ELSE
	CMP X,SHTPNT
	BCC 10$
	THEN
	LDA I,80 
	STA RAYLLO
	STA RAYRLO
	STX RAYINX		;SAVE INDEX
	LDA I,2
	STA TEMP1
	LDA I,3
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,3
	STA TEMP1
	LDA I,2
	THEN
	STA TEMP2
	CPX I,2
	IFCC
	LDA SRNEWY		;SHOOT FROM TOP
	SEC
	SBC TEMP1
	ELSE
	LDA SRNEWY		;SHOOT FROM BOTTOM
	CLC
	ADC TEMP2
	THEN
	STA RAYVRT
	STA RAYSVY

	LDA SAUFLG		;FLAG RAY SHOOTING
	ORA I,40
	STA SAUFLG
	LDA I,78		;SET FREEZE TIMER
	STA SAUTM2
	LDA I,SWARN		;WARN THE PLAYER
	JSR SNDON
	THEN
	THEN
10$:	DEX
	MIEND
	RTS

SLPTBL:	.BYTE 0,0FF,0FF,0
YINTCP:	.BYTE 1D,1D,0E4,0E4
SHTPNT: .BYTE 69,69,98,98
	.PAGE
	.SBTTL CALCULATE NEXT SAUCER LOCATION
SAUCER:	LDA SAUTM1		;CHECK LAUNCH TIMER
	IFNE
	LDA BASNUM		;DON'T LAUNCH IF NO BASES
	IFEQ
	RTS
	THEN
	LDA FRAME
	AND I,0F
	IFEQ
	DEC SAUTM1		;EVERY 4/15 SECS
	IFEQ
	JSR ACTSAU		;ACTIVATE SAUCER
	THEN
	THEN
	RTS
	THEN

	LDA FRAME		;CHECK UPDATE
	AND SAUSPD
	IFNE
	RTS
	THEN
	LDA SAUFLG		;CHECK IF WE SHOULD UPDATE
	IFEQ
	RTS
	THEN
	AND I,40
	IFNE
	RTS
	THEN

	LDA SAUCNT		;CHECK DIRECTION TIMER
	IFEQ
10$:	LDA RANDOM		;SET NEW COUNT
	AND I,1F		;UPPER LIMIT
	CLC
	ADC I,30
	STA SAUCNT
	LDA RANDOM		;GET NEW DIRECTION
	AND I,7
	STA SAUDIR
	THEN
	
	LDX SAUDIR		;DIRECTION INDEX
	LDA SROLDX		;CALCULATE NEW X COORDINATE
	CLC
	ADC X,SRHDIR
	STA SRNEWX
	SEC
	SBC I,80		;CHECK EDGE LIMIT
	IFCC
	COMP
	THEN
	CMP SAULIM
	BCS 10$
	LDA SROLDY		;CALCULATE NEW Y COORDINATE
	CLC
	ADC X,SRVDIR
	STA SRNEWY
	SEC
	SBC I,80
	IFCC
	COMP
	THEN
	CMP SAULIM		;CHECK LIMIT
	BCS 10$
	DEC SAUCNT
	RTS

SRHDIR:	.BYTE 0,1,1,1
	.BYTE 0,-1,-1,-1
SRVDIR:	.BYTE -1,-1,0,1
	.BYTE 1,1,0,-1
	.PAGE
	.SBTTL	ACTIVATE SAUCER
ACTSAU:	LDA RANDOM		;GET X COORDINATE
	AND I,3F
	CLC
	ADC I,60
	STA SRNEWX

	LDA RANDOM		;GET Y COORDINATE
	AND I,3F
	CLC
	ADC I,60
	STA SRNEWY

	LDA I,0			;CLEAR TIMERS
	STA SAUCNT
	STA SAUTM2
	LDA I,80		;SET FLAG
	STA SAUFLG
	JSR SAUDRW		;DRAW FIRST SAUCER
	RTS
	.PAGE
	.SBTTL CHECK IF KILL POINTS TO BE DISPLAYED
KLLCHK:	LDX BSDEAD		;CURRENT DEAD BASE
	IFMI
	RTS			;NONE
	THEN

	DEC KLLTMR		;DEC DISPLAY TIMER
	IFEQ
	JSR KLLDRW		;ERASE FINAL
	LDA I,0			;CLEAR FLAG
	STA X,BASFLG
	LDA I,0FF
	STA BSDEAD
	RTS
	THEN

	LDA X,BASFLG		;FREEZE MODE?
	AND I,40
	IFNE
	RTS
	THEN

	LDA X,BASX		;GET BASE X COORDINATE
	CMP BSKLLX		;SAME COORDINATE?
	IFEQ
	RTS			;YES, EXIT
	THEN
	PHA			;++1++ SAVE X COORD

	JSR KLLDRW		;ERASE FIRST

	LDA I,6
	BIT $COINS
	IFVC
	LDA I,-6
	THEN
	STA TEMP1
	PLA			;==0==
	CMP I,0FF		;BASE SHOWING?
	IFEQ
	LDA I,40		;GOTO FREEZE MODE
	STA X,BASFLG
	LDA BSKLLX		;SAME COORDINATE
	JMP 10$
	THEN
	SEC
	SBC TEMP1
	STA BSKLLX
10$:	JSR KLLDRW
	RTS
	.PAGE
	.SBTTL TURN ON SHIELD
SHIELD:	LDA SHDFLG		;IS SHIELD ON?
	AND I,80
	IFEQ			;NO
	LDA SHEELD		;IS SHIELD BUTTON PRESSED?
	AND SHDMSK
	IFEQ			;YES
	LDA CURFLG		;NO SHIELD WITHOUT CURSOR
	IFMI
	LDA SHDFLG		;MAKE SURE NOT ERASING
	AND I,40
	IFEQ
	LDA I,0C0		;FLAG BACKROUND SHIELD
	STA SHDFLG
	THEN
	THEN
	THEN
	ELSE			;SHIELD ON... 
	LDA SHEELD		;SHIELD STILL PRESSED?
	AND SHDMSK
	IFNE			;NO
	LDA SHDFLG		;MAKE SURE NOT STILL DRAWING
	AND I,40
	IFEQ
	LDA I,40
	STA SHDFLG
	THEN
	THEN
	THEN
	RTS

	.SBTTL BACKROUND SHIELD ROUTINE
BCKSHD: LDA SHDFLG		;CHECK IF ACTIVE
	AND I,40
	IFNE
	LDA I,HUE3		;SET CIRCLE COLOR
	STA CIRCOL
	LDA I,0			;SET CIRCLE CENTER
	STA CIRX
	STA CIRY
	LDX I,3			;SHIELD SIZE
	BEGIN
	LDA X,RADTBL		;GET RADIUS
	IFNE
	AND I,7F
	STA RADIUS
	JSR CIRCLE		;DRAW CIRCLE
	THEN
	DEX
	MIEND
	LDA SHDFLG		;UNFLAG
	AND I,0BF
	STA SHDFLG
	LDA I,0FF		;UPDATE SCORE
	STA REQSCO
	THEN
	RTS

SHDTBL: .BYTE 3C,38,34,30
	.PAGE
	.SBTTL	CHECK SHIELD COLLISION
;
;ENTRY:	(X1,Y1)=COORDINATE OF MISSILE
;
;EXIT:	CARRY SET IF SHIELD HIT
;	SHIELD FLAGGED TO ERASE IN BACKROUND
;
CHKSHD:	LDA SHDFLG		;SEE IF SHIELD ON
	IFMI
	PHY			;WE USE Y HERE
	LDA I,0			;SET CIRCLE CENTER
	STA X2
	STA Y2
	JSR GETRAD		;GET THE RADIUS
	STA TEMP3
	LDY I,SHDSIZ-1
	BEGIN
	LDA AY,RADTBL		;THIS RING ACTIVE?
	IFNE
	SEC
	SBC TEMP3
	IFMI
	COMP
	THEN
	CMP I,3			;HIT IF WITHIN 2 PIX
	IFCC
	JMP 10$
	THEN
	THEN
	DEY
	MIEND
	PLY
	THEN
	CLC			;NOTHING FOUND
	RTS

10$:	LDA AY,RADTBL		;FLAG THE RING
	ORA I,80
	STA AY,RADTBL
	JSR ACTEXP		;TURN ON EXPLOSION
	LDA I,MSLVAL
	JSR ADDPNT		;GIVE EM POINTS
	PLY			;RESTORE Y
	SEC
	RTS

	.SBTTL	ERASE A SHIELD RING
ERSHLD:
	BIT SHDFLG		;DRAW ONLY IF SHIELD ON
	IFMI
	IFVC			;DONE DRAWING?
	LDX I,SHDSIZ-1		;SHIELD INDEX
	BEGIN
	LDA X,RADTBL
	IFMI
	AND I,7F		;ERASE THE RING
	STA RADIUS
	JSR CIRCLE
	LDA I,0			;CLEAR THIS RING
	STA X,RADTBL
	THEN
	DEX
	MIEND
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL LASER FIRING SEQUENCE
LASER:	LDA CURFLG		;NO CURSOR - EXIT
	IFEQ
	RTS
	THEN

	LDA SHDFLG		;SHIELD ON?
	IFMI
	RTS
	THEN

	LDA FIRE		;IS FIRE BUTTON PRESSED?
	AND LASMSK
	IFNE
	RTS
	THEN

	BIT LASFLG		;IS ENABLE FLAG ON?
	BVS LASR1
	RTS

LASR1:	LDA LASNUM		;SEE IF OVER MAX
	CMP LASMAX
	IFCS
	LDA I,0			;ENABLE DE-BOUNCE
	STA LASFLG
	LDA I,SOUT		;OUT OF SHOTS
	JSR SNDON
	RTS
	THEN

	LDX I,MAXBEM		;BEAM INDEX
	BEGIN
	DEX
	LDA X,BEMFLG		;FIND SLOT
	EQEND

10$:	LDA GNOLDY		;DETERMINE CLOSEST SHIP
	IFPL
	LDA GNOLDX
	IFPL
	LDY I,0
	ELSE
	LDY I,1
	THEN
	ELSE
	LDA GNOLDX
	IFPL
	LDY I,2
	ELSE
	LDY I,3
	THEN
	THEN

	LDA I,4			;LOOP COUNTER
	STA COUNT1
	BEGIN
	LDA SHPFLG		;SEE IF SHIP ALIVE
	AND AY,SHPMSK
	IFNE
	LDA AY,SHPGNX
	STA X,BEMXHI
	STA X,BMEXHI
	LDA AY,SHPGNY
	STA X,BEMYHI
	STA X,BMEYHI
	LDA I,80		;SET ACTIVE FLAG
	STA X,BEMFLG
	LDA I,0			;CLEAR LO-ORDERS
	STA X,BEMXLO
	STA X,BMEXLO
	STA X,BEMYLO
	STA X,BMEYLO
	JSR ACTBEM		;ACTIVATE BEAM
	JMP 20$
	THEN
	DEY
	IFMI
	LDY I,3
	THEN
	DEC COUNT1
	EQEND
20$:	LDA I,0			;CLEAR OUR ENABLE FLAG
	STA LASFLG
	RTS

SHPGNX:	.BYTE 18,0E7,18,0E7
SHPGNY:	.BYTE 21,21,0E0,0E0
	.PAGE
	.SBTTL PLOT BEAMS FROM SHIPS
BEAM:	LDX I,MAXBEM-1		;BEAM INDEX
	BEGIN
	LDA X,BEMFLG		;IS THIS SLOT ACTIVE?
	IFMI
	LDA I,4			;YES, PLOT THE BEAM
	STA TEMP2
	JSR BEMPLT
	THEN
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	ACTIVATE ONE LASER BEAM
;
;ENTRY:	(X)=BEAM INDEX
;
ACTBEM: LDA X,BEMXHI		;SETUP LINE ROUTINE
	STA X1
	LDA X,BEMYHI
	STA Y1
	LDA GNOLDX		;GET TARGET LOCATION
	STA X,BEMTGX
	STA X2
	LDA GNOLDY
	CLC
	ADC I,6
	STA X,BEMTGY
	STA Y2
	JSR LINE		;GET LINE INCREMENTS
	LDA X1
	STA X,BEMHVH
	LDA X2
	STA X,BEMHVL
	LDA Y1
	STA X,BEMVVH
	LDA Y2
	STA X,BEMVVL

	JSR DIDRW		;DRAW TARGET DIAMOND
	
	LDA I,8			;SET REPT COUNT
	STA TEMP2
	JSR BEMPLT		;DRAW THE BEAM
	INC LASNUM		;COUNT THE SHOT
	LDA X,BEMFLG		;FLAG TO ERASE TAIL
	ORA I,40
	STA X,BEMFLG
	LDA I,SFIRE		;FIRE SOUND
	JSR SNDON
	RTS
	.PAGE
	.SBTTL EXPLOSION SEQUENCE DRIVER
EXPLOD:	LDX I,MAXEXP-1
	BEGIN
	LDA X,EXPFLG
	AND I,EXPON
	IFEQ
	JMP 10$
	THEN
	JSR EXPNT		;SET UP POINTER TABLES
	LDA X,EXPFLG		;CHECK IF FIRST TIME
	AND I,40
	IFEQ
	JMP 5$
	THEN
	JSR EXPFIL		;FILL DIRECTION TABLE
	LDA X,EXPX
	STA BITMOX		;SET INITIAL LOCATIONS
	LDA X,EXPY
	SEC
	SBC I,03
	STA BITMOY
	LDY I,NPRTCL-1		;TABLE INDEX
	LDA I,1
	STA COUNT1		;HORIZ COUNTER
	BEGIN
	STA COUNT2		;LOOP CONTROL
	BEGIN
	LDA BITMOX		;FILL HORIZONTAL POSITION TABLE
	STA NY,XHPOS
	LDA BITMOY		;FILL VERTICAL POSITION TABLE
	STA NY,XVPOS
	POINT EXPCLR		;PLOT POINT
	DEY			;NEXT PARTICLE
	INC BITMOX
	DEC COUNT2
	EQEND
	INC BITMOY		;NEXT LINE
	CPY I,NPRTCL/2		;HALF DONE?
	IFPL
	INC COUNT1
	INC COUNT1
	DEC X,EXPX
	LDA X,EXPX
	STA BITMOX
	ELSE			;YES..
	DEC COUNT1
	DEC COUNT1
	INC X,EXPX
	LDA X,EXPX
	STA BITMOX
	THEN
	LDA COUNT1
	MIEND
	LDA I,EXPFRM		;INIT COUNTER
	STA X,EXPCNT
	LDA X,EXPFLG		;UNFLAG FIRST TIME
	AND I,0BF
	STA X,EXPFLG
	JMP 10$
5$:	JSR EXPLT1		;ERASE LAST EXPLOSION
	DEC X,EXPCNT		;CHECK END
	IFEQ
	LDA I,0
	STA X,EXPFLG
	JMP 10$
	THEN
	JSR EXPLT2		;PLOT NEW EXPLOSION
10$:	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	FILL EXPLOSION INDIRECT TABLE POINTERS
EXPNT:	TXA			;DOUBLE INDEX
	ASL
	TAX
	LDA X,HZPPNT		;HORIZ POSITION POINTER
	STA XHPOS
	LDA X,HZPPNT+1
	STA XHPOS+1
	LDA X,HZDPNT		;HORIZ DIRECTION POINTER
	STA XHDIR
	LDA X,HZDPNT+1
	STA XHDIR+1
	LDA X,VTPPNT		;VERTICAL POSITION POINTER
	STA XVPOS
	LDA X,VTPPNT+1
	STA XVPOS+1
	LDA X,VTDPNT		;VERTICAL DIRECTION POINTER
	STA XVDIR
	LDA X,VTDPNT+1
	STA XVDIR+1
	TXA			;SINGLE INDEX
	LSR
	TAX
	RTS
				;EXPLOSION POINTER TABLES
HZPPNT:	.WORD HRZPOS
	.WORD HRZPOS+NPRTCL
	.WORD HRZPOS+<NPRTCL*2>
HZDPNT:	.WORD HRZDIR
	.WORD HRZDIR+NPRTCL
	.WORD HRZDIR+<NPRTCL*2>
VTPPNT:	.WORD VRTPOS
	.WORD VRTPOS+NPRTCL
	.WORD VRTPOS+<NPRTCL*2>
VTDPNT:	.WORD VRTDIR
	.WORD VRTDIR+NPRTCL
	.WORD VRTDIR+<NPRTCL*2>
	.PAGE
	.SBTTL	FILLS EXPLOSION DIRECTION TABLES
EXPFIL:	LDY I,NPRTCL-1		;TABLE INDEX
	BEGIN
	LDA RANDOM		;GET RANDOM NUMBER
	AND I,03		;BETWEEN 0 AND 3
	EOR AY,VTBL
	IFMI
	CLC
	ADC I,01		;TWOS COMPLIMENT
	THEN
	STA NY,XVDIR		;STORE IN TABLE
	LDA RANDOM		;SAME FOR HORIZ
	AND I,03
	EOR AY,HTBL
	IFMI
	CLC
	ADC I,01
	THEN
	STA NY,XHDIR
	DEY
	MIEND
	RTS

VTBL:	.BYTE 0,0,0,0
	.BYTE 0,0,0,0
	.BYTE 0,0FF,0FF,0FF
	.BYTE 0,0,0,0
	.BYTE 0FF,0FF,0FF,0FF
	.BYTE 0FF,0FF,0FF,0FF
	.BYTE 0FF
HTBL:	.BYTE 0,0,0,0FF
	.BYTE 0,0,0,0FF
	.BYTE 0FF,0,0,0
	.BYTE 0FF,0FF,0FF,0FF
	.BYTE 0,0,0FF,0FF
	.BYTE 0FF,0,0FF,0FF
	.BYTE 0FF
;
; CHECKSUM #1
;
CKSUM1:	.BYTE CKSM1
	.PAGE
	.SBTTL DRAW LASER CLOUDS
CLOUD:	LDA FRAME
	AND I,03		;CHECK UPDATE RATE
	IFNE
	RTS
	THEN

	LDX I,MAXBEM-1		;CLOUD INDEX
	BEGIN
	LDA X,CLDSIZ		;IS SLOT ACTIVE?
	IFEQ
	JMP 10$
	THEN
	
	LSR
	IFCS
	LDY I,1
	BEGIN			;DRAW VERTICAL BEAM
	LDA X,BEMTGX
	STA BITMOX
	DEC BITMOX
	LDA X,CLDSIZ
	CPY I,0
	IFEQ
	COMP
	THEN
	CLC
	ADC X,BEMTGY
	STA BITMOY
	LDA I,3			;LOOP COUNTER
	STA TEMP1
	BEGIN
	LDA BITDAT
	EOR I,FLASH
	STA BITDAT
	INC BITMOX
	DEC TEMP1
	EQEND
	DEY
	MIEND

	LDY I,1
	BEGIN			;DRAW HORIZ BEAM
	LDA X,BEMTGY
	STA BITMOY
	DEC BITMOY
	LDA X,CLDSIZ
	CPY I,0
	IFEQ
	COMP
	THEN
	CLC
	ADC X,BEMTGX
	STA BITMOX
	LDA I,3			;LOOP COUNTER
	STA TEMP1
	BEGIN
	LDA BITDAT
	EOR I,FLASH
	STA BITDAT
	INC BITMOY
	DEC TEMP1
	EQEND
	DEY
	MIEND

	ELSE
	STA TEMP1
	LDY I,1			;DRAW THE X
	BEGIN
	CPY I,0
	IFEQ
	COMP
	STA TEMP1
	THEN
	CLC
	ADC X,BEMTGX
	STA BITMOX
	DEC BITMOX
	LDA X,BEMTGY
	CLC
	ADC TEMP1
	CLC
	ADC I,1
	STA BITMOY
	LDA I,3			;LOOP COUNT
	STA TEMP2
	BEGIN
	LDA BITDAT
	EOR I,FLASH
	STA BITDAT
	INC BITMOX
	DEC BITMOY
	DEC TEMP2
	EQEND
	LDA TEMP1
	DEY
	MIEND

	LDY I,1			;DRAW THE X
	LDA X,CLDSIZ
	LSR
	STA TEMP1
	BEGIN
	CPY I,0
	IFEQ
	COMP
	STA TEMP1
	THEN
	CLC
	ADC X,BEMTGX
	STA BITMOX
	DEC BITMOX
	LDA X,BEMTGY
	SEC
	SBC TEMP1
	SEC
	SBC I,1
	STA BITMOY
	LDA I,3			;LOOP COUNT
	STA TEMP2
	BEGIN
	LDA BITDAT
	EOR I,FLASH
	STA BITDAT
	INC BITMOX
	INC BITMOY
	DEC TEMP2
	EQEND
	LDA TEMP1
	DEY
	MIEND

	THEN
	LDA X,CLDSIZ		;NEXT SIZE
	CLC
	ADC X,CLDINC
	CMP I,MAXCLD
	IFCS			;REACHED MAX?
	STA TEMP1
	LDA X,CLDINC
	IFPL
	LDA I,0FF
	STA X,CLDINC
	LDA X,CLDSIZ
	ELSE
	LDA TEMP1
	THEN
	THEN
	STA X,CLDSIZ
	ORA I,0			;CHECK FOR ZERO
	IFEQ
	STA X,BEMFLG
	DEC LASNUM		;ONE LESS SHOT
	THEN
	
10$:	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL PLANET MISSILE LAUNCH
MSLNCH:	LDA SHPFLG
	IFEQ
	RTS
	THEN
	LDA BASNUM		;ARE THE BASES ALIVE?
	IFEQ
	RTS
	THEN
	LDA FRAME		;FIRE EVERY 32 FRAMES
	AND I,1F
	IFNE
	RTS
	THEN
	LDA MSLNUM
	CMP MSLMAX
	IFCS
	RTS
	THEN
	LDX I,MAXMSL
	BEGIN
	DEX
	LDA X,MSLFLG
	EQEND
	INC MSLNUM
	LDA I,PLTMSL		;FLAG MISSILE ON
	STA X,MSLFLG
	LDA I,0
	STA TEMP1		;REPITITION REGISTER
10$:	LDA RANDOM		;SELECT A BASE
	AND I,0F
	TAY
	LDA AY,BASFLG		;SEE IF BASE IF ALIVE
	IFPL
	JMP 10$
	THEN
	LDA TEMP1
	CMP I,10		;REACHED LIMIT?
	IFEQ
	DEC MSLNUM
	LDA SAUTM1
	IFNE
	LDA SAUFLG		;SEE IF WE CAN SEND SAUCER
	IFEQ
	LDA I,1			;REQUEST SAUCER
	STA SAUTM1
	THEN
	THEN
	LDA I,0
	STA X,MSLFLG
	RTS
	THEN
	INC TEMP1		;COUNT
	LDA AY,BASLAT		;GET LATTITUDE (Y COORD)
	STA X,MSLVTH
	STA X,MSEVTH
	STA X,MSLY
	STA X,MSEY

	LDA AY,BASX		;GET X COORDINATE
	CMP I,0FF		;HIT A FENCE?
	IFEQ
	JMP 10$			;BASE NOT SHOWING...
	THEN
	STA X,MSLHZH
	STA X,MSEHZH
	STA X,MSLX
	STA X,MSEX
				;SELECT A TARGET TO HIT
	LDA X,MSLHZH
	IFPL			;CHECK IF TARGET STATION EXISTS
	LDA RANDOM		;CC=UPPER SHIPS - CS=LOWER SHIPS
	LSR
	IFCC
	LDA SHPFLG
	AND I,URSHIP		;UPPER RIGHT EXIST?
	IFEQ
	LDA SHPFLG		;NO, TRY LOWER
	AND I,LRSHIP
	IFEQ	
	JMP 10$			;NO SHIPS ON RIGHT SIDE
	THEN
	JMP 30$			;SHOOT LOWER
	THEN
	JMP 20$			;SHOOT UPPER
	ELSE
	LDA SHPFLG
	AND I,LRSHIP		;LOWER RIGHT EXIST?
	IFEQ
	LDA SHPFLG		;NO, TRY UPPER
	AND I,URSHIP
	IFEQ
	JMP 10$			;NOTHING..
	THEN
	JMP 20$			;SHOOT UPPER
	THEN
	JMP 30$			;SHOOT LOWER
	THEN
	ELSE
	LDA RANDOM		;CC=UPPER SHIPS - CS=LOWER SHIPS
	LSR
	IFCC
	LDA SHPFLG
	AND I,ULSHIP		;UPPER RIGHT EXIST?
	IFEQ
	LDA SHPFLG		;NO, TRY LOWER
	AND I,LLSHIP
	IFEQ	
	JMP 10$			;NO SHIPS ON RIGHT SIDE
	THEN
	JMP 30$			;SHOOT LOWER
	THEN
	JMP 20$			;SHOOT UPPER
	ELSE
	LDA SHPFLG
	AND I,LLSHIP		;LOWER RIGHT EXIST?
	IFEQ
	LDA SHPFLG		;NO, TRY UPPER
	AND I,ULSHIP
	IFEQ
	JMP 10$			;NOTHING..
	THEN
	JMP 20$			;SHOOT UPPER
	THEN
	JMP 30$			;SHOOT LOWER
	THEN
	THEN
20$:	LDA AY,BASUVV		;GET VERTICAL VELOCITY
	STA X,MSLVVH
	STA X,MSEVVH
	LDA AY,BASUHV		;GET HORIZ. VELOCITY
	STA X,MSLHVH
	STA X,MSEHVH
				;VERTICAL ACCELERATION
	LDA AY,BSUVAL		;CHECK ZERO
	IFEQ
	STA X,MSLVAC
	ELSE
25$:	LDA RANDOM		;GET RANDOM ACCEL.
	AND I,1F		;ELIMINATE TOP END
	CMP AY,BSUVAR		;IN RANGE?
	IFCS
	JMP 25$			;NOPE, GET ANOTHER
	THEN
	ADC AY,BSUVAL		;CALC NEW ACCEL.
	STA X,MSLVAC
	THEN
	LDA AY,BSUHAL		;SAME FOR HORIZ.
	IFEQ
	STA X,MSLHAC
	ELSE
26$:    LDA RANDOM
	AND I,1F
	CMP AY,BSUHAR
	IFCS
	JMP 26$
	THEN
	ADC AY,BSUHAL
	STA X,MSLHAC
	THEN
	JMP 40$
30$:	LDA AY,BASLVV		;GET VERTICAL VELOCITY
	STA X,MSLVVH
	STA X,MSEVVH
	LDA AY,BASLHV		;GET HORIZ. VELOCITY
	STA X,MSLHVH
	STA X,MSEHVH
				;VERTICAL ACCELERATION
	LDA AY,BSLVAL		;CHECK ZERO
	IFEQ
	STA X,MSLVAC
	ELSE
35$:	LDA RANDOM		;GET RANDOM ACCEL.
	AND I,1F		;ELIMINATE TOP END
	CMP AY,BSLVAR		;IN RANGE?
	IFCS
	JMP 35$			;NOPE, GET ANOTHER
	THEN
	ADC AY,BSLVAL		;CALC NEW ACCEL.
	STA X,MSLVAC
	THEN
	LDA AY,BSLHAL		;SAME FOR HORIZ.
	IFEQ
	STA X,MSLHAC
	ELSE
36$:    LDA RANDOM
	AND I,1F
	CMP AY,BSLHAR
	IFCS
	JMP 36$
	THEN
	ADC AY,BSLHAL
	STA X,MSLHAC
	THEN
40$:	LDA X,MSLHZH		;GIVE VELOCITY A SIGN
	IFPL
	LDA X,MSLHVH
	COMP
	STA X,MSLHVH
	STA X,MSEHVH
	ELSE
	LDA X,MSLHAC
	COMP
	STA X,MSLHAC
	THEN

	LDA MSLTIM		;SET SPEED
	STA X,MSLSPD
	STA X,MSLTMR

	LDA I,0			;CLEAR LOW ORDER BYTES
	STA X,MSLVTL
	STA X,MSEVTL
	STA X,MSLHZL
	STA X,MSEHZL
	STA X,MSLVVL
	STA X,MSEVVL
	STA X,MSLHVL
	STA X,MSEHVL

	LDA I,20		;SET ERASE TIMER
	STA X,MSLERS

	LDA BMBNUM		;ANY MIRVS LEFT?
	CMP BMBMAX
	IFCC
	INC BMBNUM		;COUNT IT
	LDA X,MSLFLG		;FLAG MISSILE SLOT
	ORA I,MRVON
	STA X,MSLFLG
	JSR MRVDRW		;DRAW THE MIRV
	RTS
	THEN
	JSR MSLDRW		;DRAW FIRST MISSILE
	RTS
	.PAGE
	.SBTTL PLOT PLANET MISSILE
MSLPLT:	LDX I,MAXMSL-1		;MISSILE INDEX
	BEGIN
	LDA X,MSLFLG
	AND I,PLTMSL		;CHECK IF SLOT ACTIVE
	IFEQ
	JMP 10$
	THEN

	LDA X,MSLTMR		;DEC DISPLAY TIMER
	IFNE
	SEC
	SBC I,1
	STA X,MSLTMR
	IFNE
	JMP 10$
	THEN
	THEN

	LDA X,MSLFLG
	ORA I,20		;FLAG WE'VE BEEN HERE
	STA X,MSLFLG
	AND I,MRVON		;IS THIS A MIRV?
	IFNE
	JSR MRVDRW		;YES, ERASE OLD MIRV
	LDA I,HUE3
	STA MSLCOL
	ELSE
	JSR MSLDRW		;ERASE OLD MISSILE
	LDA I,HUE2
	STA MSLCOL
	THEN

	LDA X,MSLX		;NEED NEW NODE POINT?
	CMP X,MSLHZH
	IFEQ
	LDA X,MSLY
	CMP X,MSLVTH
	IFEQ
	LDY I,0			;CALC VERTICAL VELOCITY
	LDA X,MSLVAC
	IFMI
	DEY
	THEN
	CLC
	ADC X,MSLVVL
	STA X,MSLVVL
	TYA
	ADC X,MSLVVH
	STA X,MSLVVH
				;CALC NEW VERTICAL COORDINATE
	LDA X,MSLVTL
	CLC
	ADC X,MSLVVL
	STA X,MSLVTL
	LDA X,MSLVTH
	ADC X,MSLVVH
	STA X,MSLVTH
				;CALC NEW HORIZ. VELOCITY
	LDY I,0
	LDA X,MSLHAC
	IFMI
	DEY
	THEN
	CLC
	ADC X,MSLHVL
	STA X,MSLHVL
	TYA
	ADC X,MSLHVH
	STA X,MSLHVH
				;CALC NEW HORIZ. COORDINATE
	LDA X,MSLHZL
	CLC
	ADC X,MSLHVL
	STA X,MSLHZL
	LDA X,MSLHZH
	ADC X,MSLHVH
	STA X,MSLHZH
	THEN
	THEN

	LDA X,MSLVTH		;GET DELTA TO NODE
	SEC
	SBC X,MSLY
	IFCC
	COMP
	THEN
	STA VRTDLT
	LDA X,MSLHZH
	SEC
	SBC X,MSLX
	IFCC
	COMP
	THEN
	STA HRZDLT

	CMP VRTDLT		;CALC DELTAS
	IFEQ
	LDA X,MSLHVH
	IFMI
	DEC X,MSLX
	ELSE
	INC X,MSLX		;INC BOTH IF DELTA EQ
	THEN
	LDA X,MSLVVH
	IFMI
	DEC X,MSLY
	ELSE
	INC X,MSLY
	THEN

	ELSE
	IFCC
	LDA X,MSLVVH
	IFMI
	DEC X,MSLY
	ELSE
	INC X,MSLY
	THEN
	ELSE
	LDA X,MSLHVH
	IFMI
	DEC X,MSLX
	ELSE
	INC X,MSLX
	THEN
	THEN
	THEN

	LDA X,MSLX		;SET-UP FOR COLLISION
	STA X1
	LDA X,MSLY
	STA Y1
	JSR MCOLID		;CHECK COLLISION
	IFCS
	JMP 5$			;HIT SOMETHING
	THEN

	JSR CHKSHD		;CHECK SHIELD COLLISION
	IFCS
	JMP 5$
	THEN

	LDA X,MSLX
	STA BITMOX
	LDA X,MSLY
	STA BITMOY
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT

	LDA X,MSLFLG		;CHECK IF MIRV
	AND I,MRVON
	IFNE
	JSR MRVDRW		;DRAW NEW MIRV
	ELSE
	JSR MSLDRW		;DRAW NEW MISSILE
	THEN
	JMP 10$

5$:	LDA X,MSLX		;PLOT LAST POINT
	STA BITMOX
	LDA X,MSLY
	STA BITMOY
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT
	LDA I,0			;SPEED UP TAIL
	STA X,MSLTMR
	STA X,MSLSPD
	LDA X,MSLFLG		;FLAG TO ERASE TRAIL
	AND I,7F
	ORA I,ERSTRL
	STA X,MSLFLG
10$:	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL PLOT PLANET MISSILE TRAILS
MSLTRL:	LDX I,MAXMSL-1		;MISSILE TABLE INDEX
	BEGIN
	LDA X,MSLFLG		;CHECK ENABLE
	AND I,PLTMSL!ERSTRL
	IFEQ
	JMP 40$			;DON'T ERASE THIS ONE
	THEN

	LDA X,MSLTMR		;CHECK SPEED
	IFNE
	JMP 40$
	THEN
	LDA X,MSLSPD		;RESET SPEED
	STA X,MSLTMR

	LDA X,MSLFLG		;CHECK END FIRST TIME
	AND I,20
	IFEQ
	JMP 30$
	THEN

	LDA X,MSLERS		;CHECK ERASE TIMER
	IFNE
	SEC
	SBC I,01
	STA X,MSLERS
	JMP 40$
	THEN

	LDA X,MSLFLG		;SET COLOR
	AND I,MRVON
	IFNE
	LDA I,HUE3
	STA MSLCOL
	ELSE
	LDA I,HUE2
	STA MSLCOL
	THEN

	LDA X,MSEX		;CHECK IF NEW NODE NEEDED
	CMP X,MSEHZH
	IFEQ
	LDA X,MSEY
	CMP X,MSEVTH
	IFEQ
	LDY I,0			;CALC VERTICAL VELOCITY
	LDA X,MSLVAC
	IFMI
	DEY
	THEN
	CLC
	ADC X,MSEVVL
	STA X,MSEVVL
	TYA
	ADC X,MSEVVH
	STA X,MSEVVH
				;CALC NEW VERTICAL COORDINATE
	LDA X,MSEVTL
	CLC
	ADC X,MSEVVL
	STA X,MSEVTL
	LDA X,MSEVTH
	ADC X,MSEVVH
	STA X,MSEVTH
				;SAME FOR HORIZ.
	LDY I,0
	LDA X,MSLHAC
	IFMI
	DEY
	THEN
	CLC
	ADC X,MSEHVL
	STA X,MSEHVL
	TYA
	ADC X,MSEHVH
	STA X,MSEHVH
				;CALC NEW HORIZ. COORDINATE
	LDA X,MSEHZL
	CLC
	ADC X,MSEHVL
	STA X,MSEHZL
	LDA X,MSEHZH
	ADC X,MSEHVH
	STA X,MSEHZH
	THEN
	THEN

	LDA X,MSEVTH		;CALC DELTAS
	SEC
	SBC X,MSEY
	IFCC
	COMP
	THEN
	STA VRTDLT
	LDA X,MSEHZH
	SEC
	SBC X,MSEX
	IFCC
	COMP
	THEN
	STA HRZDLT

	CMP VRTDLT
	IFEQ
	LDA X,MSEHVH
	IFMI
	DEC X,MSEX
	ELSE
	INC X,MSEX		;INC BOTH IF DELTA EQ
	THEN
	LDA X,MSEVVH
	IFMI
	DEC X,MSEY
	ELSE
	INC X,MSEY
	THEN
	ELSE
	IFCC
	LDA X,MSEVVH
	IFMI
	DEC X,MSEY
	ELSE
	INC X,MSEY
	THEN
	ELSE
	LDA X,MSEHVH
	IFMI
	DEC X,MSEX
	ELSE
	INC X,MSEX
	THEN 
	THEN
	THEN

	LDA X,MSEX
	CMP X,MSLX
	IFEQ
	LDA X,MSEY
	CMP X,MSLY
	IFEQ
	LDA X,MSLX
	STA BITMOX
	LDA X,MSLY
	STA BITMOY
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT

30$:	LDA X,MSLFLG		;CHECK IF SATTILITE MISSILE
	AND I,10
	IFNE
	DEC SMLNUM
	THEN

	LDA X,MSLFLG		;CHECK IF MIRV
	AND I,MRVON
	IFNE
	DEC BMBNUM
	THEN

	DEC MSLNUM
	LDA I,0
	STA X,MSLFLG
	JMP 40$
	THEN
	THEN
				;PLOT THE POINT
	LDA X,MSEX
	STA BITMOX
	LDA X,MSEY
	STA BITMOY
	LDA BITDAT
	EOR MSLCOL
	STA BITDAT

40$:	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL MIRV PLOTTING
MRVPLT:	LDA FRAME		;CHECK RATE
	AND I,01
	IFNE
	RTS
	THEN

	LDY I,MAXBMB-1
	BEGIN
	LDA AY,MRVFLG		;MIRV ACTIVE?
	IFPL
	JMP 40$
	THEN
	AND I,40		;THIS FIRST TIME?
	IFNE
	LDA AY,MRVFLG		;UN-FLAG
	AND I,0BF
	STA AY,MRVFLG
	JMP 10$
	THEN

	LDX AY,MRVOFS		;GET INDEX OFFSET
	LDA I,MAXMRV		;SET LOOP COUNT
	STA COUNT1
	BEGIN
	LDA X,MRVINX		;THIS PIECE ON?
	IFPL
	LDA X,MRVHZH		;ERASE OLD MIRVS
	STA BITMOX
	LDA X,MRVVTH
	STA BITMOY
	JSR MSLDR1
	THEN
	DEX
	DEC COUNT1
	EQEND

	LDA AY,MRVTM2		;LIFE TIMER
	SEC
	SBC I,1
	STA AY,MRVTM2

	IFEQ
	LDA I,0			;TIME-OUT, END
	STA AY,MRVFLG
	JMP 40$
	THEN

10$:	LDX AY,MRVOFS		;GET INDEX OFFSET
	LDA I,MAXMRV		;SET LOOP COUNT
	STA COUNT1
	BEGIN
	LDA X,MRVINX		;THIS PIECE ON?
	IFPL
	LDA X,MRVHZL		;GET NEW H COORD
	CLC
	ADC X,MRVHVL
	STA X,MRVHZL
	LDA X,MRVHZH
	ADC X,MRVHVH
	STA X,MRVHZH
	STA X1

	LDA X,MRVVTL		;GET NEW V COORD
	CLC
	ADC X,MRVVVL
	STA X,MRVVTL
	LDA X,MRVVTH
	ADC X,MRVVVH 
	STA X,MRVVTH
	STA Y1

	JSR MCOLID		;CHECK IF HIT ANYTHING
	IFCS
	LDA I,1			;ERASE NEXT TIME
	STA AY,MRVTM2
	THEN

	JSR CHKSHD		;CHECK IF SHIELD HIT
	IFCS
	LDA I,1
	STA AY,MRVTM2
	THEN

	LDA X,MRVHZH		;LOAD BITMODE REGS
	STA BITMOX
	LDA X,MRVVTH
	STA BITMOY
	JSR MSLDR1		;DRAW NEW MIRVS
	THEN
	DEX
	DEC COUNT1
	EQEND
40$:	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL	ACTIVATE MIRVS
;
;ENTRY:	(X)=MISSILE INDEX OF MIRVING MISSILE
;
ACTMRV:	SAVEXY			;SAVE REGS
	LDA X,MSLHVH		;GET VELOCITIES
	STA X2
	LDA X,MSLVVH
	STA Y2
	STY TEMP1		;SAVE CLOUD INDEX
	LDY I,MAXBMB-1
	BEGIN
	LDA AY,MRVFLG		;FREE SLOT?
	IFEQ
	LDX AY,MRVOFS		;GET INDEX OFFSET
	LDA I,MAXMRV		;SET LOOP COUNT
	STA COUNT1
	BEGIN
	LDA X2			;SET INIT VELOCITIES
	STA X,MRVHVH
	LDA Y2
	STA X,MRVVVH
	LDA RANDOM
	STA X,MRVHVL
	LDA RANDOM
	STA X,MRVVVL

	LDA X1			;GET X COORDINATE
	STA X,MRVHZH
	LDA Y1			;GET Y COORDINATE
	STA X,MRVVTH
	LDA TEMP1		;REMEMBER FOR COLLISION
	STA X,MRVINX
	LDA I,0			;CLEAR LO-ORDER
	STA X,MRVHZL
	STA X,MRVVTL

	DEX
	DEC COUNT1
	EQEND

	LDA I,80		;SET FLAG
	STA AY,MRVFLG
	LDA I,30		;SET LIFE TIMER
	STA AY,MRVTM2
	LDA I,SEXPLO		;TURN ON SOUND
	JSR SNDON
	JMP 10$
	THEN
	DEY
	MIEND
	JSR ACTEXP		;DUMMY MIRV
10$:	RESTXY			;RESTORE REGS
	RTS

MRVOFS:	.BYTE 03,07,0B,0F	;INDEX OFFSETS
	.PAGE
	.SBTTL SATTILITE ROUTINES
	.SBTTL	SATTILITE LAUNCH
SATLAU:	LDA SATTMR		;DEC DELAY TIMER
	IFNE
	LDA FRAME
	AND I,0F
	IFEQ
	DEC SATTMR
	THEN
	RTS
	THEN

	LDA BASNUM		;SEE IF BASE TO LAUCH
	IFNE
	LDA SATNUM		;CHECK ACTIVE NUMBER
	CMP I,MAXSAT
	IFCC
	LDY I,MAXSAT		;FIND EMPTY SLOT
	BEGIN
	DEY
	LDA AY,SATFLG
	EQEND

	LDX I,MAXBAS-1		;BASE INDEX
	BEGIN
	LDA X,BASFLG		;IS BASE ALIVE?
	IFMI
	LDA X,BASX		;GET X COORDINATE
	SEC
	SBC I,80		;NEAR 80?
	IFMI
	COMP
	THEN
	CMP I,2
	IFCC
	LDA PLTHI		;WHICH WAY WE ROTATING?
	IFMI
	LDA I,7F		;SEND SAT LEFT
	STA AY,SATX		;INIT X COORDINATE
	LDA I,0F8		;INIT INC
	STA AY,SATINH
	LDA I,58		;INIT DEC
	STA AY,SATDEC
	LDA I,10!08		;"PLUS" ! "OVER"
	STA AY,SATFLG
	JMP 20$
	ELSE
	LDA I,81		;SEND SAT RIGHT
	STA AY,SATX		;INIT X COORDINATE
	LDA I,08		;INIT INC
	STA AY,SATINH
	LDA I,0B8		;INIT DEC
	STA AY,SATDEC
	LDA I,20!08		;"MINUS" ! "OVER"
	STA AY,SATFLG
	JMP 20$
	THEN
	THEN
	THEN
	DEX
	MIEND
	THEN
	THEN
	RTS

20$:	LDA X,BASLAT		;INIT Y COORDINATE
	STA AY,SATVRT
	IFMI
	LDA I,-1
	ELSE
	LDA I,1
	THEN
	STA AY,SATVIN		;VERTICAL INC

	LDA SATIM1		;GET SAT SPEED
	STA AY,SATSPD
	LSR SATIM1		;SET NEXT SPEED
	IFEQ
	LDA I,1
	STA SATIM1
	THEN
	LDA SMLMAX		;INCREASE SAT MISSILES
	CMP I,MAXMSL
	IFCC
	CLC
	ADC I,1
	STA SMLMAX
	THEN

	JSR BASOFF		;TURN OFF BASE
	LDA I,0
	STA AY,SATINL		;CLEAR LO-ORDER
	INC SATNUM
	LDA AY,SATFLG		;FLAG "ACTIVE"
	ORA I,80
	STA AY,SATFLG
	TYA
	TAX
	JSR SATDRW		;DRAW FIRST ONE
	RTS
	.PAGE
	.SBTTL	PLOT & BLINK SATTILITE
SATPLT:	LDX I,MAXSAT-1
	BEGIN
	LDA X,SATFLG		;SLOT ACTIVE?
	IFEQ
	JMP 30$
	THEN

	LDA FRAME		;CHECK SPEED
	AND X,SATSPD
	IFNE
	JMP 30$
	THEN

	LDA X,SATFLG		;OVER THE PLANET?
	AND I,08
	IFNE
	LDA X,SATFLG		;YES, "UNDER" ON?
	AND I,04
	IFNE
	JMP 10$			;YES, DON'T DISPLAY
	THEN
	THEN
	JSR SATDRW		;ERASE SATTILITE

10$:	LDA X,SATX
	IFMI
	LDA X,SATFLG
	AND I,20		;CHECK NEG FLAG
	IFEQ			;NOT ON
	LDA X,SATDEC		;REVERSE DEC
	COMP
	CLC			;INCREASE ORBIT
	ADC I,08
	STA X,SATDEC
	LDA X,SATVIN		;REVERSE VRT INC
	COMP
	STA X,SATVIN
	LDA X,SATFLG		;FLAG WE DID THIS (NEG)
	ORA I,20
	AND I,0EF		;"PLUS" OFF
	STA X,SATFLG
	THEN
	ELSE			;PLUS X
	LDA X,SATFLG
	AND I,10		;CHECK "PLUS" FLAG
	IFEQ			;NOT ON
	LDA X,SATDEC		;REVERSE DEC
	COMP
	SEC			;INCREASE ORBIT
	SBC I,08
	STA X,SATDEC
	LDA X,SATVIN		;REVERSE VRT INC
	COMP
	STA X,SATVIN
	LDA X,SATFLG		;FLAG WE DID THIS (PLUS)
	ORA I,10
	AND I,0DF		;"NEG" OFF
	STA X,SATFLG
	THEN
	THEN

	LDA X,SATVRT		;CALC NEW Y COORDINATE
	CLC
	ADC X,SATVIN
	STA X,SATVRT

	LDY I,0			;ADD DEC TO INC
	LDA X,SATDEC
	IFMI
	DEY
	THEN
	CLC
	ADC X,SATINL
	STA X,SATINL
	TYA
	ADC X,SATINH
	STA X,SATINH
	IFEQ
	JSR SATMSL
	LDA X,SATINH
	THEN

	CLC			;ADD INC TO X COORDINATE
	ADC X,SATX
	STA X,SATX
	CLC			;COLLISION OFFSET
	ADC I,5
	STA X1
	LDA X,SATVRT
	CLC
	ADC I,5
	STA Y1
	JSR EDGCOL		;CHECK EDGE COLLISION
	IFCS
	LDA I,0			;CLEAR SLOT
	STA X,SATFLG
	DEC SATNUM
	JMP 30$
	THEN

	LDA I,PLTBOT		;FIND NEAREST BASE LAT
	SEC
	SBC X,SATVRT
	IFMI
	JMP 20$			;BELOW PLANET
	THEN
	LSR
	LSR
	LSR
	TAY
	CPY I,10		;ABOVE PLANET?
	IFCS
	JMP 20$
	THEN

	LDA X,SATX
	CMP AY,BASXLO		;SEE IF OVER PLANET
	IFCS
	CMP AY,BASXHI
	IFCC			;YES, OVER
	LDA X,SATFLG		;SEE IF OVER HAS BEEN FLAGGED
	AND I,08
	IFEQ
	LDA X,SATFLG		;NO, FLAG OVER
	ORA I,08
	STA X,SATFLG
	AND I,04		;IS "UNDER" ON?
	IFNE
	LDA X,SATFLG		;YES, TURN IT OFF
	AND I,0FB
	STA X,SATFLG
	ELSE
	LDA X,SATFLG		;NO, TURN IT ON
	ORA I,04
	STA X,SATFLG
	JMP 30$			;DON'T DISPLAY
	THEN
	ELSE
	LDA X,SATFLG		;OVER PLANET, "UNDER" ON?
	AND I,04
	IFNE
	JMP 30$			;YES, NO DISPLAY
	THEN
	THEN
	ELSE
20$:	LDA X,SATFLG		;NOT OVER PLANET
	AND I,0F7
	STA X,SATFLG
	THEN
	ELSE
	LDA X,SATFLG
	AND I,0F7
	STA X,SATFLG
	THEN

	JSR SATDRW		;DRAW NEW SATTILITE

30$:	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	LAUNCH MISSILE FROM SATTILITE
;
;ENTRY: (X)=SATTILITE INDEX
;
;EXIT:	NO AFFECT OR
;	MISSILE TABLES FILLED
;
SATMSL:	LDA SMLTIM		;CHECK DELAY TIMER
	IFNE
	DEC SMLTIM
	RTS
	THEN

	LDA SMLNUM		;CHECK NUMBER OUT THERE
	CMP SMLMAX
	IFCS
	RTS
	THEN
	LDA MSLNUM
	CMP I,MAXMSL
	IFCS
	RTS
	THEN
	LDY I,MAXMSL		;FIND EMPTY SLOT
	BEGIN
	DEY
	LDA AY,MSLFLG
	EQEND

10$:	LDA X,SATX		;FIND WHICH SIDE WE'RE ON
	IFPL			;LEFT SIDE
	LDA SHPFLG
	AND I,ULSHIP!LLSHIP	;THESE ALIVE?
	IFEQ
	RTS
	THEN
	LDA I,STLEFT		;YES, GET X COORDINATE
	STA X2

	LDA RANDOM
	IFPL			;SHOOT UPPER
	LDA SHPFLG
	AND I,ULSHIP		;HE ALIVE?
	IFEQ
	JMP 20$
	THEN
15$:	LDA I,STTVRT		;GET Y COORDINATE
	STA Y2
	ELSE
	LDA SHPFLG
	AND I,LLSHIP
	IFEQ
	JMP 15$
	THEN
20$:	LDA I,STBVRT
	STA Y2
	THEN
	ELSE
	LDA SHPFLG
	AND I,URSHIP!LRSHIP	;THESE ALIVE?
	IFEQ
	RTS
	THEN
	LDA I,STRGHT		;YES, GET X COORDINATE
	STA X2

	LDA RANDOM
	IFPL			;SHOOT UPPER
	LDA SHPFLG
	AND I,URSHIP		;HE ALIVE?
	IFEQ
	JMP 30$
	THEN
25$:	LDA I,STTVRT		;GET Y COORDINATE
	STA Y2
	ELSE
	LDA SHPFLG
	AND I,LRSHIP
	IFEQ
	JMP 25$
	THEN
30$:	LDA I,STBVRT
	STA Y2
	THEN
	THEN

	LDA X,SATX		;MISSILE X COORDINATE
	STA X1
	STA AY,MSLHZH
	STA AY,MSEHZH
	STA AY,MSLX
	STA AY,MSEX
	LDA X,SATVRT		;MISSILE Y COORDINATE
	STA Y1
	STA AY,MSLVTH
	STA AY,MSEVTH
	STA AY,MSLY
	STA AY,MSEY

	JSR LINE		;GET INCREMENTS
	LDA X1
	STA AY,MSLHVH
	STA AY,MSEHVH
	LDA X2
	STA AY,MSLHVL
	STA AY,MSEHVL
	LDA Y1
	STA AY,MSLVVH
	STA AY,MSEVVH
	LDA Y2
	STA AY,MSLVVL
	STA AY,MSEVVL

	LDA I,PLTMSL!10		;FLAG REGISTER
	STA AY,MSLFLG
	LDA I,0			;ZERO ACCELERATION
	STA AY,MSLHAC
	STA AY,MSLVAC
	LDA I,80		;LOW ORDERS
	STA AY,MSLHZL
	STA AY,MSEHZL
	STA AY,MSLVTL
	STA AY,MSEVTL
	LDA I,10		;SET ERASE TIMER
	STA AY,MSLERS
	STX SAVEX
	LDA MSLTIM
	LSR
	STA AY,MSLSPD
	TYA
	TAX
	JSR MSLDRW		;DRAW FIRST MISSILE
	INC SMLNUM		;COUNT IT
	INC MSLNUM
	LDA I,4			;SET DELAY TIMER
	STA SMLTIM
	LDX SAVEX
	RTS
	.PAGE
	.SBTTL PLOT FIREBALLS
FIRPLT:	LDX I,MAXFIR-1
	BEGIN
	LDA X,FIRFLG		;SLOT ACTIVE?
	IFPL
	JMP 10$
	THEN

	LDA FRAME		;CHECK SPEED
	AND X,FIRSPD
	IFNE
	JMP 10$
	THEN

	LDA X,FIRTMR		;DEC TIMER
	IFNE
	SEC
	SBC I,1
	STA X,FIRTMR
	STA TEMP1
	CMP I,4			;ENABLE COLLISION?
	IFCC
	LDA X,FIRFLG		;YES, FLAG IT
	ORA I,20
	STA X,FIRFLG
	AND I,40		;STAR BALL?
	IFNE
	LDA TEMP1		;TIMER OUT?
	IFEQ
	LDA I,01
	STA X,FIRSPD		;YES, SPEED IT UP	
	THEN
	THEN
	THEN
	THEN
	
	JSR FIRDRW		;DRAW FIREBALL
	
	LDA X,FIRXLO		;CALC NEW COORDINATE
	CLC
	ADC X,FIRHVL
	STA X,FIRXLO
	LDA X,FIRXHI
	ADC X,FIRHVH
	STA X,FIRXHI
	STA X1
	LDA X,FIRYLO
	CLC
	ADC X,FIRVVL
	STA X,FIRYLO
	LDA X,FIRYHI
	ADC X,FIRVVH
	STA X,FIRYHI
	STA Y1

	JSR MCOLID		;COLLISION DETECT
	IFCS
5$:	LDA X,FIRFLG		;WAS IT STAR BALL?
	AND I,40
	IFNE
	INC STRNUM
	THEN
	LDA I,0			;HIT SOMETHING
	STA X,FIRFLG		;TURN OFF FIREBALL
	DEC FIRNUM
	JMP 10$
	THEN

	JSR CHKSHD		;CHECK IF SHIELD ON
	IFCS
	ROL X,FIRSPD		;SLOW IT DOWN
	LDA I,SEXPLO
	JSR SNDON
	DEC X,FIRCNT		;MUST BE HIT 4 TIMES
	BEQ 5$
	THEN

	LDA X,FIRINX		;GET NEW PICTURE INDEX
	SEC
	SBC I,2
	IFMI
	LDA I,6
	THEN
	STA X,FIRINX
	JSR FIRDRW		;DRAW NEW FIREBALL

10$:	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL LAUNCH A FIREBALL
FIRLAU:	LDA SATTMR		;DEC DELAY TIMER
	IFNE
	LDA FRAME
	AND I,0F
	IFEQ
	DEC SATTMR
	THEN
	RTS
	THEN

	LDA BASNUM		;ANY BASES LEFT?
	IFEQ
	RTS
	THEN
	LDA SHPFLG		;ANY SHIPS LEFT?
	IFEQ
	RTS
	THEN

	LDA FIRNUM		;OVER MAX?
	CMP FIRMAX
	IFCS
	RTS
	THEN

	LDY I,MAXFIR		;FIND SLOT
	BEGIN
	DEY
	LDA AY,FIRFLG
	EQEND

	JSR SELBAS		;SELECT A BASE
	IFCS
	RTS			;DIDN'T FIND ONE
	THEN

	STA AY,FIRXHI
	STA X1
	LDA X,BASLAT		;GET Y COORDINATE
	STA AY,FIRYHI
	STA Y1

	LDA I,0			;TURN OFF BASE
	STA AY,FIRXLO		;CLEAR LO-ORDERS
	STA AY,FIRYLO
	STA AY,FIRTMR		;NO TIMER VALUE
	JSR BASOFF		;TURN OFF BASE

	JSR SELTRG		;SELECT A TARGET
	LDA I,8			;GET SHIP CENTER
	BIT $COINS
	IFVC
	LDA I,-8
	THEN
	STA TEMP1
	LDA X,SHPXLC		;GET COORDINATE
	CLC
	ADC TEMP1
	STA X2
	LDA X,SHPYLC
	CLC
	ADC TEMP1
	STA Y2
	JSR LINE		;CALC LINE OFFSETS
	LDA X1
	STA AY,FIRHVH
	LDA X2
	STA AY,FIRHVL
	LDA Y1
	STA AY,FIRVVH
	LDA Y2
	STA AY,FIRVVL

	LDA I,1			;SET INIT SPEED
	STA AY,FIRSPD
	LDA I,4			;SET HIT COUNTER
	STA AY,FIRCNT
	LDA I,6			;INIT PICTURE INDEX
	STA AY,FIRINX
	STA SATTMR		;DELAY NEXT ONE
	LDA I,0A0
	LDX STRNUM		;NEED A STAR BALL?
	IFNE
	DEC STRNUM
	LDA I,0E0		;YES! KILL HIM!!!
	THEN
	STA AY,FIRFLG		;ENABLE FLAG
	INC FIRNUM
	TYA
	TAX
	JSR FIRDRW		;DRAW FIRST ONE
	RTS
	.PAGE
	.SBTTL	SELECT A SHIP TARGET
;
;EXIT:	(X)=INDEX OF SELECTED SHIP
;
SELTRG:	BEGIN
	LDA RANDOM
	AND I,3
	TAX
	LDA SHPFLG
	AND X,SHPMSK
	NEEND
	RTS

	.SBTTL SELECT A RANDOM ACTIVE BASE
;
;EXIT:	ACC=X COORDINATE, (X)=INDEX OF SELECTED BASE
;
SELBAS:	LDA I,0F
	STA TEMP1
	BEGIN
10$:	LDA RANDOM
	AND I,0F
	TAX
	LDA X,BASFLG
	IFPL
	JMP 10$
	THEN
	LDA X,BASX
	CMP I,0FF
	IFNE
	CLC
	RTS
	THEN
	ASL TEMP1
	MIEND
	SEC
	RTS
	.PAGE
	.SBTTL MAKE PLANET SMART
SMART:	LDA FRAME		;TIMER MASK
	AND I,07
	IFNE
	RTS
	THEN

	LDA MSTRBS		;GET MASTER BASE INDEX
	IFEQ
	JMP SMOOTH		;NOT ACTIVE
	THEN
	ASL
	TAX
	LDA LONGHI		;LOOK AT NEXT ROTATION
	CLC
	ADC PLTHI
	LSR
	TAY
	LDA X,BASLOC
	STA BASPNT
	LDA X,BASLOC+1
	STA BASPNT+1
	LDA NY,BASPNT		;GET NEXT X COORDINATE
	CMP I,0FF		;IS IT SHOWING?
	IFEQ
	JMP SMOOTH		;YES, EXIT
	THEN
	STA X1

	LDX MSTRBS		;GET INDEX AGAIN
	LDA X,BASLAT
	STA Y1
	LDA I,60		;INIT H DELTA
	STA HRZDLT
	LDY I,MAXBEM-1		;CLOUD INDEX
	BEGIN
	LDA AY,BEMFLG		;BEAM ACTIVE?
	IFNE
	LDA AY,BEMTGX		;WITHIN HORIZ WINDOW?
	SEC
	SBC I,80
	CLC
	ADC I,30
	CMP I,60
	IFCC
	LDA AY,BEMTGY		;WITHIN VERT WINDOW?
	SEC
	SBC Y1
	CLC
	ADC I,MAXCLD
	CMP I,MAXCLD*2
	IFCC
	LDA X1			;YES, CALC H DELTA
	SEC
	SBC AY,BEMTGX
	STA TEMP2
	IFCC
	COMP
	THEN
	SEC
	SBC AY,CLDSIZ
	CMP HRZDLT		;IS THIS THE CLOSEST YET?
	IFCC
	STA HRZDLT		;YES, SAVE IT
	LDA TEMP2		;SAVE SIGN OF DELTA
	STA TEMP1
	THEN
	THEN
	THEN
	THEN
	DEY			;NEXT BEAM
	MIEND

	LDA HRZDLT		;CLOSEST TARGET
	CMP THREAT		;CLOSEST YET?
	STA THREAT
	BCS SMOOTH		;NO...
	LSR			;DIVIDE BY 8
	LSR
	LSR
	TAY			;USE AS INDEX
	LDA TEMP1
	IFPL
	LDA PLTLO		;GET NEW SPEED
	CLC
	ADC AY,SMRTLO
	STA PLTLO
	LDA PLTHI
	ADC AY,SMRTHI
	STA PLTHI
	ELSE
	LDA PLTLO
	SEC
	SBC AY,SMRTLO
	STA PLTLO
	LDA PLTHI
	SBC AY,SMRTHI
	STA PLTHI
	THEN
	RTS

SMRTLO:	.BYTE 020,040,060,080
	.BYTE 0A0,0C0,0E0,000
	.BYTE 020,040,060,080
	.BYTE 0A0,0C0,0E0,000
SMRTHI:	.BYTE 000,000,000,000
	.BYTE 000,000,000,001
	.BYTE 001,001,001,001
	.BYTE 001,001,001,002
	.PAGE
	.SBTTL	SMOOTH ROTATION FOR SMART PLANET
SMOOTH:	LDA PLTHI		;WHICH WAY TO SMOOTH?
	IFPL
	CMP I,1
	IFEQ
10$:	LDA PLTLO
	IFEQ
	RTS
	THEN
	SEC
	SBC I,20
	STA PLTLO
	RTS
	THEN
	IFCS
	LDA PLTLO
	SEC
	SBC I,20
	STA PLTLO
	LDA PLTHI
	SBC I,0
	STA PLTHI
	RTS
	THEN
20$:	LDA PLTLO
	CLC
	ADC I,20
	STA PLTLO
	LDA PLTHI
	ADC I,00
	STA PLTHI
	RTS
	THEN
	CMP I,0FF
	BEQ 10$
	BNE 20$
	.PAGE
	.SBTTL MISSILE COLLISION DETECT
;
;ENTRY:	(X1,Y1)=COORDINATE OF MISSILE
;
MCOLID:	LDA MKMODE		;MARKETING MODE?
	BMI EDGCOL		;YES, NO SHIP COLLISION
	SAVEXY			;SAVE X & Y
	LDX I,3			;CHECK SHIP COLLISION
	LDY PLAYER
	BEGIN
	LDA SHPFLG
	AND X,SHPMSK		;IS SHIP ALIVE?
	IFNE
	LDA I,8			;GET SHIP CENTER
	BIT $COINS
	IFVC
	LDA I,-8
	THEN
	STA TEMP1
	LDA X,SHPXLC		;CHECK H DELTA
	CLC
	ADC TEMP1
	SEC
	SBC X1
	IFCC
	COMP
	THEN
	CMP I,7			;WITHIN 7 HORIZ?
	IFCC
	LDA X,SHPYLC		;YES, CHECK V DELTA
	CLC
	ADC TEMP1
	SEC
	SBC Y1
	IFCC
	COMP
	THEN
	CMP I,7
	IFCC
	STY SAVEY		;**HIT SHIP**
	JSR SHPDRW		;ERASE SHIP
	LDA X,SHPMSK
	EOR I,0FF
	AND SHPFLG		;FLAG OFF
	STA SHPFLG
	LDA I,0C		;ENABLE EXPLOSION
	STA X,SHPINX
	LDY SAVEY
	LDA AY,NUMSHP		;TAKE A SHIP
	SEC
	SBC I,1
	STA AY,NUMSHP
	LDA LASMAX		;REDUCE FIRE POWER
	SEC
	SBC I,3
	STA LASMAX
	LDA I,SSHP		;SHIP EXPLODE SOUND
	JSR SNDON
	RESTXY			;RESTORE REGS
	JMP COLEND
	THEN
	THEN
	THEN
	DEX
	MIEND
	RESTXY			;RESTORE REGS

EDGCOL:	LDA X1			;HORIZONTAL BOUNDS CHECK
	CMP I,XLEFT
	IFCC
	JMP COLEND
	ELSE
	CMP I,XRIGHT
	IFCS
	JMP COLEND
	THEN
	THEN

	LDA Y1			;VERTICAL BOUNDS CHECK
	CMP I,TOP
	IFCC
	JMP COLEND
	ELSE
	CMP I,BOTTOM
	IFCS
	JMP COLEND
	THEN
	THEN

	CLC			;NO COLLISION
	RTS

COLEND:	SEC			;COLLISION END
	RTS
	.PAGE
	.SBTTL COLLISION DETECT
COLIDE: LDY I,MAXBEM-1		;BEAM INDEX
	BEGIN
	LDA AY,CLDSIZ		;IS SLOT ACTIVE?
	IFEQ
	JMP 50$
	THEN
;
; MIRV COLLISION
;
	STY SAVEY		;USE Y HERE
	LDY I,MAXBMB-1		;MIRV INDEX
	BEGIN
	LDA AY,MRVFLG		;ACTIVE?
	IFMI
	AND I,40		;YES, FIRST TIME?
	IFEQ			;NO...
	LDX AY,MRVOFS		;GET TABLE INDEX OFFSET
	PHY			;SAVE MIRV INDEX
	LDY SAVEY		;GET CLOUD INDEX BACK
	LDA I,MAXMRV		;LOOP COUNTER
	STA COUNT1
	BEGIN
	LDA X,MRVINX		;THIS PIECE ON?
	IFPL
	STA TEMP1		;YES,
	CPY TEMP1		;IS THIS THE SAME CLOUD?
	IFNE			;IF NOT...
	LDA X,MRVHZH		;SET UP COLLISION
	STA X1
	LDA X,MRVVTH
	STA Y1
	LDA I,0
	STA TEMP1
	JSR COLDCT
	IFCC			;**HIT MIRV PIECE**
	LDA I,0FF		;DISABLE PIECE
	STA X,MRVINX
	LDA X1			;ERASE PIECE
	STA BITMOX
	LDA Y1
	STA BITMOY
	JSR MSLDR1
	LDA I,SMIRV		;MIRV SOUND
	JSR SNDON
	LDA I,MSLVAL		;ADD POINTS
	JSR ADDPNT
	THEN
	THEN
	THEN
	DEX
	DEC COUNT1
	EQEND
	PLY			;GET MIRV INDEX BACK
	THEN
	THEN
	DEY
	MIEND
	LDY SAVEY		;RESTORE Y
;
; MISSILE COLLISION
;
	LDX I,MAXMSL-1
	BEGIN
	LDA X,MSLFLG
	AND I,PLTMSL
	IFNE
	LDA X,MSLX		;SET UP DETECT
	STA X1
	LDA X,MSLY
	STA Y1
	LDA I,0
	STA TEMP1
	JSR COLDCT
	IFCC
	LDA X,MSLFLG		;**HIT MISSILE**
	AND I,7F
	ORA I,ERSTRL
	STA X,MSLFLG
	AND I,MRVON		;IS THIS A MIRV?
	IFNE
	JSR MRVDRW		;ERASE MIRV
	JSR ACTMRV		;ACTIVATE MIRV
	ELSE
	JSR MSLDRW		;ERASE MISSILE
	JSR ACTEXP		;ACTIVATE EXPLOSION
	THEN
	LDA I,0
	STA X,MSLERS
	STA X,MSLTMR
	STA X,MSLSPD
	LDA I,MSLVAL
	JSR ADDPNT		;ADD POINTS
	THEN
	THEN
	DEX
	MIEND
;
; PLANET BASE COLLISION
;
	LDX I,0F
	BEGIN
	LDA X,BASFLG		;CHECK IF BASE IS ALIVE
	IFMI
	LDA X,BASX		;GET X COORDINATE
	STA X1
	CMP I,0FF		;IS BASE SHOWING?
	IFNE
	LDA X,BASLAT		;GET Y COORDINATE
	STA Y1
	LDA I,1
	STA TEMP1
	JSR COLDCT
	IFCC
	JSR ACTEXP		;**HIT BASE**
	JSR BASOF1		;TURN OFF BASE
	LDA I,BASVAL
	JSR ADDPNT		;ADD POINTS
	JSR BSKILL
	JMP 20$
	THEN
	THEN
	THEN
	DEX
	MIEND
;
; SAUCER COLLISION
;
20$:	LDA SAUFLG		;ACTIVE?
	IFMI
	LDA SROLDX		;CHECK X COORDINATE
	STA X1
	LDA SROLDY
	STA Y1
	LDA I,2
	STA TEMP1
	JSR COLDCT
	IFCC
	JSR ACTEXP		;**HIT SAUCER**
	LDA SAUFLG
	AND I,07F
	STA SAUFLG
	LDA I,SAUTIM		;SET LAUNCH TIMER
	STA SAUTM1
	JSR SAUERS		;ERASE SAUCER
	LDA I,SAUVAL
	JSR ADDPNT
	THEN
	THEN
;
; SATTILITE COLLISION
;
	LDX I,MAXSAT-1		;SATTILITE INDEX
	BEGIN
	LDA X,SATFLG		;ACTIVE?
	IFNE
	AND I,0C
	CMP I,0C		;IS IT UNDER PLANET?
	IFNE
	LDA X,SATX		;CHECK X COORDINATE
	STA X1
	LDA X,SATVRT		;CHECK Y COORDINATE
	STA Y1
	LDA I,4
	STA TEMP1
	JSR COLDCT
	IFCC
	JSR ACTEXP
	JSR SATDRW		;ERASE SATTILITE
	LDA I,0
	STA X,SATFLG
	DEC SATNUM
	LDA I,SATVAL
	JSR ADDPNT		;SCORE
	THEN
	THEN
	THEN
	DEX
	MIEND
;
; FIREBALL COLLISION
;
	LDX I,MAXFIR-1
	BEGIN
	LDA X,FIRFLG		;FIREBALL ACTIVE?
	IFMI
	AND I,20		;COLLISION ENABLED?
	IFNE
	LDA X,FIRXHI
	STA X1
	LDA X,FIRYHI
	STA Y1
	LDA I,3
	STA TEMP1
	JSR COLDCT
	IFCC
	DEC X,FIRCNT		;MUST BE HIT 4 TIMES
	IFEQ
	JSR ACTEXP
	JSR FIRDRW
	LDA X,FIRFLG		;WAS IT A STAR BALL?
	AND I,40
	IFNE
	INC STRNUM
	THEN
	LDA I,0
	STA X,FIRFLG
	DEC FIRNUM
	LDA I,SATVAL
	JSR ADDPNT
	ELSE
	LDA X,FIRFLG		;DISABLE COLLISIONS
	AND I,0DF
	STA X,FIRFLG
	LDA I,0C
	STA X,FIRTMR
	SEC			;SLOW DOWN FIREBALL
	ROL X,FIRSPD
	LDA I,SEXPLO		;EXPLODE SOUND
	JSR SNDON
	THEN
	THEN
	THEN
	THEN
	DEX
	MIEND

50$:	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL	COLLISION DETECTOR MODULE
;
;ENTRY:	(Y)=BEAM INDEX,(X1,Y1)=COORDINATE OF TEST POINT
;	(TEMP1)=COLLISION WINDOW SIZE
;
;EXIT:	ABOVE UNCHANGED, CC - NO COLLSION, CS - COLLISION
;
COLDCT:	LDA X1			;GET X DELTA
	SEC
	SBC AY,BEMTGX
	IFCC
	COMP
	SEC
	THEN
	CMP TEMP1
	IFCS
	SBC TEMP1		;WINDOW SIZE
	THEN
	CMP AY,CLDSIZ		;WITHIN X?
	IFCS
	RTS			;EXIT - CS
	THEN

	LDA Y1			;GET Y DELTA
	SEC
	SBC AY,BEMTGY
	IFCC
	COMP
	SEC
	THEN
	CMP TEMP1
	IFCS
	SBC TEMP1		;WINDOW SIZE
	THEN
	CMP AY,CLDSIZ		;WITHIN Y?
	RTS			;EXIT - CC IF COLLISION
	.PAGE
	.SBTTL	ACTIVATE EXPLOSION
;
;ENTRY:	(X1,Y1)=COORDINATE OF EXPLOSION
;
ACTEXP:	SAVEXY			;SAVE REGS
	LDX I,MAXEXP-1
	BEGIN
	LDA X,EXPFLG		;CHECK FOR OPEN SLOT
	IFEQ
	JMP 10$
	THEN
	DEX
	MIEND
	JMP 20$			;PTF
				;DIDN'T FIND ONE
	LDX I,MAXEXP-1
	LDY I,MAXEXP-2
	BEGIN
	LDA X,EXPCNT
	CMP AY,EXPCNT
	IFCS
	DEX
	DEY
	ELSE
	DEY
	THEN
	TYA
	MIEND
	JSR EXPNT
	JSR EXPLT1		;ERASE OLDEST EXPLOSION

10$:	LDA I,EXPON!40
	STA X,EXPFLG
	LDA X1
	STA X,EXPX
	LDA Y1
	STA X,EXPY
20$:	LDA I,SEXPLO		;EXPLODSION SOUND
	JSR SNDON
	RESTXY
	RTS
	.PAGE
	.SBTTL	DISPLAY NUMBER OF PLANET TARGETS LEFT
TRGNUM:	LDA LASTRG		;ERASE LAST NUMBER
	JSR BINACI		;GET ASCII VALUE
	LDA I,0A4		;SET UP DISPLAY LOC
	STA MESSX
	STA MSGSET		;SMALL NUMBERS
	LDA I,0F4
	STA MESSY
	LDA I,6			;SET SPACING
	STA STPSPA
	LDA I,HUE7
	STA STPCLR
	JSR MESENT

TRGNM1:	LDA BASNUM		;WRITE NEW NUMBER
	STA LASTRG
	JSR BINACI		;GET ASCII VALUE
	LDA I,0A4
	STA MESSX
	STA MSGSET
	LDA I,0F4
	STA MESSY
	LDA I,6
	STA STPSPA
	JSR MESENT
	RTS
	.PAGE
	.SBTTL	INITIAL BASE KILL SETUP
;
;ENTRY:	(X)=BASE NUMBER
;
BSKILL:	LDA BSDEAD
	IFPL
	JSR KLLDRW		;ERASE BASE IF POINT ACTIVE
	THEN
	STX BSDEAD		;DEAD BASE
	LDA I,2
	STA TEMP1
	LDA I,6
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,-2
	STA TEMP1
	LDA I,-6
	THEN
	STA TEMP2
	LDA Y1			;Y COORDINATE
	SEC
	SBC TEMP1
	STA BSKLLY
	LDA X1			;X COORDINATE
	SEC
	SBC TEMP2
	STA BSKLLX
	LDA I,080
	STA KLLTMR		;SET DISPLAY TIMER
	LDA I,0
	STA X,BASFLG		;FLAG BASE
	JSR KLLDRW		;DRAW FIRST ONE
	RTS
	.PAGE
	.SBTTL TURN OFF A BASE
;
;ENTRY:	(X)=BASE INDEX
;
;EXIT:	(X)&(Y) ARE OK
;
BASOF1:	LDA X,BASFLG		;WAS IT MASTER BASE?
	AND I,20
	IFNE
	LDA I,0			;YES, CLEAR IT
	STA MSTRBS
	STA X,BASFLG
	THEN
	INC BASHIT		;COUNT THE HITS
BASOFF:	PHY			;WE USE Y
	TXA			;PUT X IN Y
	TAY
	LDA X,BASFLG		;MASTER BASE?
	AND I,20
	IFNE
	LDA BASLAU		;COUNT NUMBER OF LAUNCHES
	CMP I,20.
	IFCS
	LDA I,0			;MAKE IT NORMAL BASE
	STA MSTRBS
	JMP 5$
	THEN
	CLC
	ADC I,1
	STA BASLAU
	JMP 10$			;LEAVE IT ALONE
	THEN
	LDA I,0			;CLEAR FLAG
5$:	STA X,BASFLG
	LDA PLTNUM		;GET BASE COLOR
	AND I,10
	IFNE
	TYA
	CLC
	ADC I,10
	TAY
	THEN
	LDA AY,BASCLR
	STA X,BASES
	DEC BASNUM
	JSR TRGNUM		;GET NEW TARGET NUMBER
10$:	PLY			;RESTORE Y
	RTS
	.PAGE
	.SBTTL CHECK FOR END OF WAVE OR GAME
CHKEND:	LDA SHPFLG		;ANY SHIPS LEFT ?
	IFEQ
	LDA SHDFLG		;IS SHIELD ON?
	AND I,80
	IFNE
	LDA SHDFLG		;YES, STILL DRAWING?
	AND I,40
	IFNE
	CLC			;YES, EXIT
	RTS
	ELSE
	LDA I,40		;NO, REQUEST ERASE
	STA SHDFLG
	THEN
	THEN

	JSR CUROFF
	LDA I,0			;SPEED UP ALL MISSILES
	LDX I,MAXMSL-1
	BEGIN
	STA X,MSLSPD
	DEX
	MIEND
	STA MSLTIM
	LDX I,MAXFIR-1
	BEGIN
	STA X,FIRSPD		;FIREBALL TOO
	DEX
	MIEND

	JSR CHKFN1		;NO, EVERYTHING DONE?
	IFCS
	JSR ENDWAV		;END THE WAVE
	THEN
	ELSE
	LDA BASNUM		;ANY BASES LEFT ?
	CLC
	ADC SATNUM
	CLC
	ADC FIRNUM
	IFEQ
	JSR CHKFIN		;NO, EVERYTHING DONE?
	IFCS
	LDA SHDFLG		;IS SHIELD ON?
	AND I,80
	IFNE
	LDA SHDFLG		;YES, STILL DRAWING?
	AND I,40
	IFNE
	CLC			;YES, EXIT
	RTS
	ELSE
	LDA I,40		;NO, REQUEST ERASE
	STA SHDFLG
	THEN
	THEN

	JSR CUROFF
	JSR CHKFN1
	IFCS
	JSR ENDWAV		;END THE WAVE
	THEN
	ELSE
	LDA PAUSET		;SPEED UP MISSILES
	IFEQ
	LDX I,MAXMSL-1
	BEGIN
	LDA X,MSLSPD
	IFNE
	SEC
	SBC I,1
	STA X,MSLSPD
	THEN
	DEX
	MIEND
	LDA I,40		;RESET TIMER
	STA PAUSET
	ELSE
	SEC			;DEC TIMER
	SBC I,1
	STA PAUSET
	THEN
	THEN
	THEN
	THEN
	RTS

;
; CHECKSUM #2
;
CKSUM2:	.BYTE CKSM2
	.PAGE
	.SBTTL	CHECK IF MISSILE AND EXPLOSIONS FINISHED
CHKFN1:	LDX I,MAXBEM-1		;CHECK BE
	BEGIN
	LDA X,BEMFLG
	IFNE
	CLC
	RTS
	THEN
	LDA X,CLDSIZ
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDX I,MAXEXP-1
	BEGIN
	LDA X,EXPFLG
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDX I,7			;SOUNDS OFF?
	BEGIN
	LDA X,POINT
	IFNE
	CLC 
	RTS
	THEN
	DEX
	MIEND

	LDX I,3			;SHIP EXPLOSION
	BEGIN
	LDA X,SHPINX
	IFPL
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDA BSDEAD
	IFPL
	CLC
	RTS
	THEN

CHKFIN:	LDX I,MAXMSL-1
	BEGIN
	LDA X,MSLFLG
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDX I,MAXBMB-1		;ANY MIRV ALIVE?
	BEGIN
	LDA X,MRVFLG		;CHECK MIRV
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDX I,MAXFIR-1
	BEGIN
	LDA X,FIRFLG		;CHECK FIREBALL
	IFNE
	CLC
	RTS
	THEN
	DEX
	MIEND

	LDA SAUFLG		;CHECK IF SAUCER FIRING
	AND I,40
	IFNE
	CLC
	RTS
	THEN
	SEC
	RTS
	.PAGE
	.SBTTL	END OF WAVE
ENDWAV:	LDY PLAYER		;WHO IS PLAYING?
	LDA AY,NUMSHP		;AM I STILL ALIVE?
	CLC
	ADC AY,NUMLIV
	IFNE			;YES..
	LDA I,MBONMG		;"BONUS:"
	JSR TBLMSG

	LDA AY,NUMSHP		;ANY SHIPS LEFT?
	IFEQ
	LDA AY,PLRFLG		;WAS HE GETTING AWARD?
	AND I,20
	IFNE
	LDA AY,PLRFLG		;NOT NOW
	AND I,0DF
	STA AY,PLRFLG
	LDA I,MNOBON
	JSR TBLMSG
	THEN
	JSR BONPNT		;NO, SHOW 0 BONUS
	THEN
	LDA I,0FF		;YES, GOTO BONUS ROUND
	STA SHPNUM
	LDA I,CBONUS
	STA GSTATE
	RTS
	THEN
GAMOVR:	TYA
	IFEQ
	LDA I,MPLR1		;"PLAYER 1"
	JSR TBLMSG
	ELSE
	LDA I,MPLR2		;"PLAYER 2"
	JSR TBLMSG
	THEN
	LDA I,MOVER		;"GAME OVER"
	JSR TBLMSG

	LDA I,0			;CLEAR PLAYER FLAG
	STA AY,PLRFLG

	JSR NXTPLR		;SELECT NEXT PLAYER
	RTS
	.PAGE
	.SBTTL	SELECT NEXT PLAYER
NXTPLR:	LDA NUMPLR		;HOW MANY PLAYERS?
	CMP I,2
	IFEQ
	LDY PLAYER		;WHO IS PLAYING?
	IFEQ
	INY			;1, IS 2 ALIVE?
	LDA AY,PLRFLG
	IFEQ
	DEY			;2 IS DEAD
	JMP 10$
	ELSE
	STY PLAYER		;2 ALIVE
	THEN
	ELSE
	DEY			;2, IS 1 ALIVE?
	LDA AY,PLRFLG
	IFEQ
	INY			;1 IS DEAD
	JMP 10$
	ELSE
	STY PLAYER		;1 ALIVE
	THEN
	THEN
	ELSE
	LDY PLAYER		;ONE PLAYER ONLY
	THEN

10$:	LDA AY,PLRFLG		;AM I ALIVE?
	IFEQ
	LDX NUMPLR		;SAVE TOTAL SCORE OF GAME
	DEX
	SED
	IFEQ			;ONE PLAYER GAME
	LDA N1PGAM
	CLC
	ADC I,1
	STA N1PGAM
	LDA N1PGAM+1
	ADC I,0
	STA N1PGAM+1
	IFCS			;RESET IF WRAPPED
	ORA I,0
	IFEQ
	CLD
	JSR EAZBOO		;CLEAR EAROM BOOKS
	JMP 20$
	THEN
	THEN
	ELSE			;TWO PLAYER GAME
	LDA N2PGAM
	CLC
	ADC I,1
	STA N2PGAM
	LDA N2PGAM+1
	ADC I,0
	STA N2PGAM+1
	IFCS			;RESET IF WRAPPED
	ORA I,0
	IFEQ
	CLD
	JSR EAZBOO		;CLEAR EAROM BOOKS
	JMP 20$
	THEN
	THEN
	THEN

	BEGIN
	LDA AX,SCOREM
	CLC
	ADC TOTSCR
	STA TOTSCR
	LDA AX,SCOREH
	ADC TOTSCR+1
	STA TOTSCR+1
	LDA TOTSCR+2
	ADC I,0
	STA TOTSCR+2
	DEX
	MIEND
	CLD
	JSR WRBOOK		;WRITE BOOKEEPING
20$:	JSR CMODE		;DO COIN MODE

	LDA I,0			;NO, FLAG ATTRACT MODE
	STA ATRACT

	LDA I,CHISCH		;SHOW HI SCORE
	STA NSTATE
	LDA I,2*PSEC		;SET PAUSE TIMER
	STA PAUSET
	ELSE
	LDA AY,PLRLVL		;NEXT LEVEL NUMBER
	CLC
	ADC I,1
	CMP I,100.		;OVER 100?
	IFCS
	LDA I,99.		;STICK AT 99
	THEN
	STA AY,PLRLVL

	LDA AY,PLRWAV		;INC THE WAVE NUMBER
	CLC
	ADC I,1
	CMP I,MAXWAV		;OVER MAX?
	IFCS
	LDA AY,BMBMOD		;MORE MIRVS
	CLC
	ADC I,1
	STA AY,BMBMOD
	LDA I,MAXWAV-12.	;YES, GO BACK 12 WAVES
	THEN
	STA AY,PLRWAV
	STA WAVNUM

	LDA I,08		;RESET SWITCH MASKS
	STA LASMSK
	LDA I,04
	STA SHDMSK
	LDX I,0
	STX CTRLD
	BIT SLFTST		;COCKTAIL?
	IFVC
	TYA			;PLAYER 2?
	IFNE
	LDA I,02		;NEW SWITCH MASKS
	STA LASMSK
	LDA I,01
	STA SHDMSK
	LDX I,10		;SWAP TBALL
	THEN
	THEN
	STX TBSWAP		;CHOOSE TBALL

	LDA I,CNEWAV		;YES, NEW WAVE
	STA NSTATE
	LDA I,2*PSEC		;SET PAUSE TIMER
	STA PAUSET
	THEN

	LDA I,CPAUSE		;GOTO PAUSE STATE
	STA GSTATE
	RTS
	.PAGE
	.SBTTL HI SCORE TABLE ROUTINES
	.SBTTL	 INITIALIZE HIGH SCORE TABLE
INIINI:
	LDX I,NHISCO*3-1
	BEGIN
	LDA X,STRINI
	STA X,INITAL
	LDA X,SCOINI
	STA X,HSCORL
	DEX
	MIEND
	RTS
STRINI:	.ASCIN /MRBMECBFSCADPDMS LDDHHRPNISDEN/
SCOINI:	.REPT NHISCO-3
	.BYTE 00,10,00
	.ENDR
	.REPT 3
	.BYTE 00,20,00
	.ENDR
	.PAGE
	.SBTTL	 UPDATE HIGH SCORE LADDER
HISCHK:	JSR CLRINI		;CLEAR ANY OLD FLAGS

	LDX I,1			;NO START WITH PLAYER 2
	STX TEMP1		;INTIALIZE HI SCORE FLAG TO "NOT HI"
	BEGIN			;LOOP FOR EACH PLAYER
	LDY I,3*<NHISCO-1>	;START AT BOTTOM OF LADDER-LO SCORES
	BEGIN
	LDA AY,HSCORH
	CMP X,SCOREH		;COMPARE HI 2 DIGITS
	IFEQ			;THEY'RE EQUAL CHECK NEXT BYTES
	LDA AY,HSCORM
	CMP X,SCOREM
	IFEQ			;THIS GUY IS RELENTLESS
	LDA AY,HSCORL
	CMP X,SCOREL
	THEN
	THEN
	IFCC
	JSR NEWHI		;HE DIDN'T MAKE IT BY MUCH
	THEN
	DEY
	DEY
	DEY			;POINT TO NEXT HI SCORE
	MIEND			;DONE WITH THIS GUY
	DEX
	MIEND			;DONE WITH BOTH
	LDA TEMP1		;NEW HI SCORE FOUND?
	IFMI
	JSR INTLDR		;YES TELL SETUP STATE TO
	ELSE
	JMP ABORT		;SEARCH FOR NEW INITALS SLOT
	THEN
	RTS

	.SBTTL	CLEAR OUT OLD INITIAL FLAGS
CLRINI:	LDY I,3*<NHISCO-1>
	BEGIN
	LDA AY,INITAL
	IFMI
	LDA I,26.
	STA AY,INITAL
	STA AY,INITAL+1
	STA AY,INITAL+2
	THEN
	DEY
	DEY
	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL	 INSERT SCORES + INITIALS ON LADDER
;INPUT: Y=INDEX INTO HSCORE OF BEATEN SCORE
;	X=PLAYER ID (0 OR 1)
NEWHI:				;SAVE HEIGHT OF NEW HI SCORE
	STY TEMP2		;ON LADDER
	LDY I,0			;START SEARCHING AT BOTTOM OF LADDER
	BEGIN
	CPY TEMP2		;THERE YET?
	IFEQ			;YES
	LDA X,SCOREH		;MOVE HIM ONTO IT THEN
	STA AY,HSCORH
	LDA X,SCOREM
	STA AY,HSCORM
	LDA X,SCOREL
	STA AY,HSCORL
	TXA
	ORA I,80		;FLAG INITIAL SLOT
	STA AY,INITAL		;MARK INITIAL SLOT TO NEW ENTRY
	LDA I,26.+41		;STORE BLANKS IN OTHER  2 SLOTS
	STA AY,INITAL+1
	STA AY,INITAL+2
	LDY I,0			;TELL NUHICK DONE WITH THIS PLAYER
	LDA I,0FF
	STA TEMP1		;FLAG FOR FOUND NEW HIGH
	RTS
	THEN
	LDA AY,HSCORH+3		;MOVE THIS SCORE DOWN ONE
	STA AY,HSCORH		;RUNG ON LADDER
	LDA AY,HSCORM+3
	STA AY,HSCORM
	LDA AY,HSCORL+3
	STA AY,HSCORL
	LDA AY,INITAL+5		;MOVE INITIALS DOWN 1 RUNG
	STA AY,INITAL+2
	LDA AY,INITAL+4
	STA AY,INITAL+1
	LDA AY,INITAL+3
	STA AY,INITAL
	INY
	INY
	INY
	MIEND			;ALWAYS BRANCH
	RTS
	.PAGE
	.SBTTL	 SEARCH FOR NEW ENTRY ON LADDER
INTLDR:	LDY I,3*<NHISCO-1>
	BEGIN
	LDA AY,INITAL		;GET INITIAL
	IFMI			;IS IT A NEW ENTRY?
	AND I,01
	STA PLAYER		;MAKE A PLAYER # OUT OF IT
	STY INTPNT		;SAVE POINTER

	JSR CLEAR		;CLEAR SCREEN
	JSR PLTOFF		;TURN OFF PLANET
	JSR LIBCLR		;LIBERATOR COLORS
	JSR DSPSCO		;DISPLAY CURRENT SCORES
	JSR INTMSG		;WRITE MESSAGES
	JSR CLRSTR		;CLEAR STAR TABLES

	LDA I,0
	STA INTCRH		;START WITH LETTER "A"
	STA INTCRL
	STA GUNX
	STA GUNY
	STA MSGSET		;LARGE INITIALS
	LDA I,2			;SET INITIAL POINTER
	STA INTNUM

	LDA I,0			;SELECT TRAK BALL
	LDX I,08
	BIT $COINS		;COCKTAIL?
	IFVC
	LDA I,10
	LDX I,02
	THEN
	STA TBSWAP
	STX LASMSK

	LDA I,0FF		;SET ENTRY TIMER
	STA PAUSET
	STA TRKFLG		;ENABLE TRAKBALL
	LDA I,CGETIN		;TELL SETUP TO GET INITIALS
	STA GSTATE
	RTS
	THEN
	DEY
	DEY
	DEY
	MIEND

ABORT:	JSR WRHIIN		;SAVE HI INITIALS IN EAROM
ABORT1:	LDA I,0			;DISABLE TBALL
	STA TRKFLG
	STA PLAYER		;NORMAL FLIP
	LDA I,CADVGA		;DISPLAY SCORE TABLE
	STA GSTATE
	RTS

INTLHS:	.BYTE 90,84,78		;HORIZ COORD OF 3 INITIALS BEING ENTERED
	.PAGE
	.SBTTL	ENTER INITIAL MESSAGES
INTMSG:	LDA PLAYER		;WHO'S PLAYING?
	IFEQ
	LDA I,MSPLR1		;"PLAYER 1"
	JSR TBLMSG
	ELSE
	LDA I,MSPLR2		;"PLAYER 2"
	JSR TBLMSG
	THEN

	LDA I,MINI1		;REST OF MESSAGES
	BEGIN
	STA MSGSAV
	JSR TBLMSG
	LDA MSGSAV
	CLC
	ADC I,1
	CMP I,MINI10+1
	EQEND

	LDA I,10		;DRAW LIBERATOR
	STA LIBX
	LDA I,20
	STA LIBY
	LDA I,SCOM		;COM SOUND
	JSR SNDON
	LDA I,80
	STA LIBFLG

	RTS
	.PAGE
	.SBTTL	 TAKE INITIALS FOR NEW HIGH SCORE
GETINI:
	LDA FRAME
	AND I,0F
	IFEQ
	DEC PAUSET
	IFEQ			;TOO MUCH TIME?
	LDA I,26.		;YES, GIVE HIM BLANKS
	LDY INTPNT
	BEGIN
	STA AY,INITAL
	DEC INTNUM
	MIEND
	JMP 10$			;GO SEE IF MORE INITIALS
	THEN
	THEN
	LDX I,0			;NO X=0 FORCES ADCURS TO WORK ON HORIZ
	LDA GUNX		;GET HORIZ DISPLACEMENT
	STX GUNX		;0	"	"
	CLC
	ADC GUNY
	STX GUNY
	ASL
	ASL
	IFMI
	DEC INTCRH
	THEN
	CLC
	ADC INTCRL
	STA INTCRL
	LDA I,0
	ADC INTCRH
	IFMI
	LDA I,26.
	ELSE
	CMP I,27.
	IFCS
	LDA I,0
	THEN
	THEN
	STA INTCRH		;SAVE INITIAL CODE
	LDY INTNUM		;LOAD INITIAL # (0 -> 2)
	LDA AY,INTLHS		;HORIZ DISPLAY LOC
	STA MESSX
	LDA I,0C0		;VERT LOC
	STA MESSY
	LDA I,0A
	STA STPSPA
	BIT $COINS		;COCKTAIL?
	IFVC
	JSR REVRSE
	THEN
	LDA I,FLASH		;SET COLOR
	STA STPCLR
	LDA INTCRH
	CLC
	ADC I,41
	JSR LETOUT
	LDA LASFLG		;SWITCH DE-BOUNCED?
	AND I,40
	IFNE
	LDA FIRE		;SELECTED?
	AND LASMSK
	IFEQ
	LDA INTCRH
	CLC
	ADC I,41		;ADD IN ASCII OFFSET
	LDY INTPNT
	STA AY,INITAL
	INC INTPNT		;POINT TO NEXT INITAL SLOT ON LADDER
10$:	LDA I,84		;RESET TIMEOUT TO 30 SEC
	STA PAUSET
	LDA I,0
	STA LASFLG		;SET SWITCH TO READ AGAIN
	STA INTCRH
	DEC INTNUM		;ONE LESS LETTER TO GO
	IFMI
	JSR INTLDR
	THEN
	THEN
	THEN
	JSR STRMOV
	JSR STRGEN
	RTS
	.PAGE
	.SBTTL ADVANCED GAME MESSAGE
ADVGAM:	JSR CLEAR		;CLEAR SCREEN
	JSR PLTOFF		;NO PLANET
	JSR MCOLOR		;CORRECT COLORS
	LDA ATRACT		;TURN ON FLASH
	AND I,0DF
	STA ATRACT

	LDA I,MEND1		;DISPLAY MESSAGES
	BEGIN
	STA MSGSAV
	JSR TBLMSG
	LDA MSGSAV
	CLC
	ADC I,1
	CMP I,MEND6+1
	EQEND

	LDA I,CHITBL		;GOTO HI SCORE TABLE
	STA NSTATE
	LDA I,60
	STA PAUSET
	LDA I,CPAUSE		;PAUSE FIRST
	STA GSTATE
	RTS
	.PAGE
	.SBTTL	HI SCORE TABLE DISPLAY
HITBL:	JSR CLEAR		;CLEAR SCREEN
	JSR PLTOFF		;TURN OFF PLANET

	JSR CRDISP		;SHOW CREDITS
	JSR DSPSCO		;SHOW CURRENT SCORES

	LDA I,MHISCR		;"HI SCORES:"
	JSR TBLMSG

	LDA I,60		;SET FIRST LINE LOC
	STA MESSY

	LDY I,3*<NHISCO-1>
	BEGIN
	LDA AY,HSCORH		;MOVE SCORE TO TRIPLE
	STA TRIPLE+2
	LDA AY,HSCORM
	STA TRIPLE+1
	LDA AY,HSCORL
	STA TRIPLE

	LDA I,52		;SET LEFT MARGIN
	STA MESSX
	STA BITMOX
	LDA MESSY		;SET VERTICAL
	STA BITMOY
	LDX I,2			;3 DIGITS
	JSR SCORE1

	LDA I,98		;LEFT MARGIN FOR INITIALS
	STA MESSX
	LDA AY,INITAL		;DISPLAY INITIALS
	JSR LETOUT
	LDA AY,INITAL+1
	JSR LETOUT
	LDA AY,INITAL+2
	JSR LETOUT

	LDA MESSY		;NEXT LINE
	CLC
	ADC I,0A
	STA MESSY
	DEY
	DEY
	DEY
	MIEND
	LDA I,40		;SET PAUSE TIMER
	STA PAUSET
	LDA I,CPAUSE
	STA GSTATE
	LDA I,CEND		;END GAME
	STA NSTATE
	RTS
	.PAGE
	.SBTTL	SCORE SUPPORT ROUTINES
	.SBTTL		DISPLAY BOTH SCORES
DSPSCO:	LDY NUMPLR
	IFEQ
	RTS			;NO SCORES
	THEN
	DEY
	BEGIN
	STY SAVEY
	JSR SCORY
	LDY SAVEY
	DEY
	MIEND
	RTS

	.SBTTL	ADD OBJECT VALUE TO CURRENT SCORE
;
;ENTRY: (Y)=INDEX INTO VALUE TABLES
;
ADDPNT:
	STX SAVEX
	STY SAVEY
	TAY
	LDA WAVNUM		;BONUS MULTIPLY
	CMP I,08
	IFCS
	LDA I,07		;NOT OVER X8
	THEN
	TAX
	SED			;DECIMAL MODE
	BEGIN
	LDA TRIPLE
	CLC
	ADC AY,VALULO
	STA TRIPLE
	LDA TRIPLE+1
	ADC I,0
	STA TRIPLE+1
	LDA TRIPLE+2
	ADC I,0
	STA TRIPLE+2
	DEX
	MIEND
	LDX SAVEX
	LDY SAVEY
	CLD
	LDA I,0FF		;REQUEST SCORE UPDATE
	STA REQSCO
	RTS
;
VALULO: .BYTE 01,10,15,10,02,05
	.PAGE
	.SBTTL LINE GENERATION
;
;ENTRY: (X1,Y1)=COORDINATE OF STARTING POINT
;	(X2,Y2)=COORDINATE OF ENDING POINT
;
;EXIT:	(X1,X2)=DOUBLE X INCREMENT
;	(Y1,Y2)=DOUBLE Y INCREMENT
;
LINE:	LDA TEMP1		;SAVE TEMPS
	PHA
	LDA TEMP2
	PHA
	LDA I,0			;CLEAR TEMPS
	STA TEMP1
	STA TEMP2
	LDA X2			;HORIZONTAL DELTA
	SEC
	SBC X1
	IFCC
	COMP
	DEC TEMP1
	THEN
	STA HRZDLT
	STA LENGTH

	LDA Y2			;VERTICAL DELTA
	SEC
	SBC Y1
	IFCC
	COMP
	DEC TEMP2
	THEN
	STA VRTDLT		;LENGTH=MAX(XDLT/YDLT)
	CMP LENGTH
	IFCS
	STA LENGTH
	THEN

	LDA LENGTH		;HORIZONTAL INCREMENT
	STA DIVSOR
	CMP HRZDLT
	IFNE
	LDA HRZDLT
	JSR DIVIDE
	LDA QUOSH
	STA X1
	LDA REMAIN
	STA X2
	ELSE
	LDA I,1
	STA X1
	LDA I,0
	STA X2
	THEN
	LDA TEMP1		;GIVE IT A SIGN
	IFMI
	LDA I,0
	SEC
	SBC X2
	STA X2
	LDA I,0
	SBC X1
	STA X1
	THEN

	LDA LENGTH		;VERTICAL INCREMENT CALCULATION
	STA DIVSOR
	CMP VRTDLT
	IFNE
	LDA VRTDLT
	JSR DIVIDE
	LDA QUOSH
	STA Y1
	LDA REMAIN
	STA Y2
	ELSE
	LDA I,1
	STA Y1
	LDA I,0
	STA Y2
	THEN
	LDA TEMP2
	IFMI
	LDA I,0
	SEC
	SBC Y2
	STA Y2
	LDA I,0
	SBC Y1
	STA Y1
	THEN
	PLA			;RESTORE TEMPS
	STA TEMP2
	PLA
	STA TEMP1
	RTS
	.PAGE
	.SBTTL FIND RADIUS BETWEEN TWO POINTS
;
;ENTRY:	(X1,Y1),(X2,Y2)=COORDINATES OF 2 POINTS
;
;EXIT:	ACC=RADIUS
;
GETRAD:	LDA X1			;FIND H DELTA
	SEC
	SBC X2
	IFMI
	COMP
	THEN
	STA HRZDLT
	LDA Y1			;FIND V DELTA
	SEC
	SBC Y2
	IFMI
	COMP
	THEN
	STA VRTDLT
	CMP HRZDLT		;SEE WHICH IS BIGGER
				;RADIUS=MAXDLT + 3/8 MINDLT
	IFCS
	LDA HRZDLT
	LSR
	CLC
	ADC HRZDLT
	LSR
	LSR
	CLC
	ADC VRTDLT
	ELSE
	LSR
	CLC
	ADC VRTDLT
	LSR
	LSR
	CLC
	ADC HRZDLT
	THEN
	RTS
	.PAGE
	.SBTTL DIVIDE ROUTINE
;
;ENTRY:	(A)=DIVIDEND
;	(DIVSOR)=DIVISOR
;EXIT:	QUOSH=MSB OF QUOTIENT
;	REMAIN=LSB OF QUOTIENT
;
DIVIDE:	STA MQ
	SAVEXY
	JSR DIVIT
	STX QUOSH
	LDX I,0
	STX MQ
	JSR DIVIT1
	STX REMAIN
	RESTXY
	RTS
DIVIT:	LDA I,0
DIVIT1:	LDY I,7
	BEGIN
	ROL MQ
	ROL
	IFCS
	SBC DIVSOR
	SEC
	BCS 20$
	THEN
	CMP DIVSOR
	IFCS
	SBC DIVSOR
	THEN
20$:	DEY
	MIEND
	ROL MQ
	LDX MQ
	RTS
	.PAGE
	.SBTTL 8 BIT BINARY TO DECIMAL CONVERT
;
;ENTRY:	(ACC)=8 BIT BINARY
;
;EXIT:	(COUNT1,COUNT2)=3 BCD DIGITS (LO,HI)
;
BINDEC:	STA TEMP1	;SAVE A
	PHY		;USE Y HERE
	SED		;DECIMAL MODE
	LDA I,0		;CLEAR OUR REGS
	STA COUNT1
	STA COUNT2
	LDY I,7		;BIT COUNT
	BEGIN
	ASL TEMP1
	LDA COUNT1
	ADC COUNT1
	STA COUNT1
	ROL COUNT2
	DEY
	MIEND
	CLD		;CLEAR DECIMAL
	PLY		;RESTORE Y
	RTS

	.SBTTL BINARY TO ASCII COVERSION
;
;ENTRY:	(ACC)=BINARY 8 BIT <99
;
;EXIT:	(MESAGE)=ADDRESS OF ASCII STRING (ZERO SUPPRESS)
;	(X)&(Y) OK
;
BINACI:	JSR BINDEC	;CONVERT TO DECIMAL FIRST
	LDA COUNT1	;WORK ON LO NIBBLE
	AND I,0F
	CLC
	ADC I,30
	ORA I,80	;FLAG FOR END OF MESSAGE
	STA COUNT2
	LDA COUNT1	;GET OUR BYTE
	LSR		;WORK ON HI NIBBLE
	LSR
	LSR
	LSR
	IFNE
	CLC		;ADD ASCII DISPLACEMENT
	ADC I,30
	STA COUNT1
	LDAL COUNT1	;SET ADDRESS POINTER
	STA MESAGE
	LDAH COUNT1
	STA MESAGE+1
	ELSE
	LDAL COUNT2
	STA MESAGE
	LDAH COUNT2
	STA MESAGE+1
	THEN
	RTS
	.PAGE
	HLL65		;PHASE ERROR DETECT
	.END
                   